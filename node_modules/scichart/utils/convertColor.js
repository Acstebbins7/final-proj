"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertRgbToHexColor = exports.convertColor = void 0;
/**
 *
 * @param htmlColor, for example "00ff00" or "#00ff00" - green
 * @param opacity, value from 0 to 1
 * @returns rgbColor, for example "0xff00ff00" - green
 */
exports.convertColor = (htmlColor, opacity = 1) => {
    const opacityHex = convertComponent(opacity);
    const htmlColorLower = htmlColor.toLowerCase();
    if (htmlColorLower.length === 0) {
        return "";
    }
    if (htmlColorLower[0] === "#") {
        return `0x${opacityHex}${htmlColorLower.substr(1)}`;
    }
    else {
        return `0x${opacityHex}${htmlColorLower}`;
    }
};
/**
 *
 * Converts individual R,G, and B components to HEX Color
 * @param r, red component where its value is from 0 to 1
 * @param g, green component where its value is from 0 to 1
 * @param b, blue component where its value is from 0 to 1
 * @returns argbColor, for example "0xff00ff00" - green
 */
exports.convertRgbToHexColor = (r, g, b) => {
    return "#" + convertComponent(r) + convertComponent(g) + convertComponent(b);
};
/**
 * @ignore
 * Converts number (color component) from 0 to 1 to hex string. For example 1 -> "ff", 0.5 => "80"
 * @param component
 */
const convertComponent = (component) => {
    if (component >= 1) {
        return "ff";
    }
    if (component <= 0) {
        return "00";
    }
    const num = Math.floor(component * 256);
    const hex = num.toString(16);
    return hex.length === 1 ? "0" + hex : hex;
};
