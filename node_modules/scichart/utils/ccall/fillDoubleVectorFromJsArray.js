"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fillDoubleVectorFromJsArray = void 0;
function fillDoubleVectorFromJsArray(wasmContext, doubleVector, array) {
    let buffer;
    try {
        const vectorSize = doubleVector.size();
        const arraySize = array.length;
        const startPosition = vectorSize;
        const endPosition = startPosition + arraySize;
        /// because plain c functions were receiving the object pointer as null, this is the way around that...
        wasmContext.SCRTSetActiveDoubleVector(doubleVector, vectorSize);
        // Allocate some space in the heap for the data (making sure to use the appropriate memory size of the elements)
        // @ts-ignore
        buffer = wasmContext._malloc(arraySize * 8);
        // Assign the data to the heap - Keep in mind bytes per element
        // @ts-ignore
        wasmContext.HEAPF64.set(array, buffer / 8);
        // Finally, call the function
        // Here we use start position 0 and the end position array.length
        // @ts-ignore
        wasmContext.ccall("SCRTFillActiveDoubleVector", null, ["number", "number", "number"], [buffer, startPosition, endPosition]);
    }
    catch (e) {
        console.log(e);
    }
    finally {
        // To avoid memory leaks we need to always clear out the allocated heap data
        // @ts-ignore
        wasmContext._free(buffer);
    }
}
exports.fillDoubleVectorFromJsArray = fillDoubleVectorFromJsArray;
