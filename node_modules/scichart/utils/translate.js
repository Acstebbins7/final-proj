"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.translateFromCanvasToSeriesViewRectY = exports.translateFromCanvasToSeriesViewRectX = exports.translateFromSeriesViewRectToCanvas = exports.translateFromCanvasToSeriesViewRect = void 0;
/**
 * @description Translates Canvas coordinates to coordinates for seriesViewRect
 * @param point
 */
const Point_1 = require("../Core/Point");
exports.translateFromCanvasToSeriesViewRect = (point, seriesViewRect) => {
    if (!seriesViewRect) {
        return undefined;
    }
    const newX = point.x - seriesViewRect.x;
    const newY = point.y - seriesViewRect.y;
    if (newX < 0 || newX > seriesViewRect.width || newY < 0 || newY > seriesViewRect.height) {
        return undefined;
    }
    return new Point_1.Point(newX, newY);
};
exports.translateFromSeriesViewRectToCanvas = (point, seriesViewRect) => {
    if (!seriesViewRect) {
        return undefined;
    }
    const newX = point.x + seriesViewRect.x;
    const newY = point.y + seriesViewRect.y;
    if (newX < 0 || newX > seriesViewRect.width || newY < 0 || newY > seriesViewRect.height) {
        return undefined;
    }
    return new Point_1.Point(newX, newY);
};
exports.translateFromCanvasToSeriesViewRectX = (x, seriesViewRect) => {
    if (!seriesViewRect) {
        return undefined;
    }
    const newX = x - seriesViewRect.x;
    if (newX < 0 || newX > seriesViewRect.width) {
        return undefined;
    }
    return newX;
};
exports.translateFromCanvasToSeriesViewRectY = (y, seriesViewRect) => {
    if (!seriesViewRect) {
        return undefined;
    }
    const newY = y - seriesViewRect.y;
    if (newY < 0 || newY > seriesViewRect.height) {
        return undefined;
    }
    return newY;
};
