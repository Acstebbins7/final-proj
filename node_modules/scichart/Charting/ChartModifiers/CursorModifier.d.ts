import { SeriesInfo } from "../Model/ChartData/SeriesInfo";
import { IThemeProvider } from "../Themes/IThemeProvider";
import { CursorTooltipSvgAnnotation } from "../Visuals/Annotations/CursorTooltipSvgAnnotation";
import { IRenderableSeries } from "../Visuals/RenderableSeries/IRenderableSeries";
import { ChartModifierBase2D, IChartModifierBaseOptions } from "./ChartModifierBase2D";
import { ModifierMouseArgs } from "./ModifierMouseArgs";
export declare type TTooltipSvgTemplate = (seriesInfos: SeriesInfo[], svgAnnotation: CursorTooltipSvgAnnotation) => string;
/**
 * Optional parameters used to configure a {@link CursorModifier} at construct time
 */
export interface ICursorModifierOptions extends IChartModifierBaseOptions {
    tooltipSvgTemplate?: TTooltipSvgTemplate;
    crosshairStroke?: string;
    crosshairStrokeThickness?: number;
    tooltipContainerBackground?: string;
    tooltipTextStroke?: string;
    showTooltip?: boolean;
    showAxisLabels?: boolean;
    axisLabelStroke?: string;
    axisLabelFill?: string;
}
/**
 * The RolloverModifier provides tooltip and cursor behavior on a 2D {@link SciChartSurface}
 * within SciChart - High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 *
 * To apply the RolloverModifier to a {@link SciChartSurface} and add tooltip behavior,
 * use the following code:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * sciChartSurface.chartModifiers.add(new RolloverModifier());
 * ```
 */
export declare class CursorModifier extends ChartModifierBase2D {
    tooltipSvgTemplate?: TTooltipSvgTemplate;
    /**
     * Gets or sets the crosshair line strokethickness
     */
    crosshairStrokeThickness: number;
    /**
     * Gets or sets the tooltip container background color as an HTML Color code
     */
    tooltipContainerBackground: string;
    /**
     * Gets or sets the tooltip text color as an HTML Color code
     */
    tooltipTextStroke: string;
    /**
     * Gets or sets whether we should display the tooltip. Default is false
     */
    showTooltip: boolean;
    /**
     * Gets or sets whether we should display axis labels. Default is true
     */
    showAxisLabels: boolean;
    /**
     * Gets or sets the axis label text color as an HTML Color code
     */
    axisLabelStroke: string;
    /**
     * Gets or sets the axis label fill as an HTML Color code.
     */
    axisLabelFill: string;
    private xLineAnnotation;
    private yLineAnnotation;
    private tooltipAnnotation;
    private mousePosition;
    private crosshairStrokeProperty;
    /**
     * Creates an instance of the RolloverModifier
     * @param options Optional parameters {@link ICursorModifierOptions} used to configure the modifier
     */
    constructor(options?: ICursorModifierOptions);
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * @inheritDoc
     */
    onAttach(): void;
    /**
     * @inheritDoc
     */
    onDetach(): void;
    /**
     * @inheritDoc
     */
    onAttachSeries(rs: IRenderableSeries): void;
    /**
     * @inheritDoc
     */
    onDetachSeries(rs: IRenderableSeries): void;
    /**
     * @inheritDoc
     */
    modifierMouseMove(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierMouseLeave(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierMouseEnter(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    onParentSurfaceRendered(): void;
    /**
     * Gets or sets the crosshair line Stroke color as an HTML Color code
     */
    get crosshairStroke(): string;
    /**
     * Gets or sets the crosshair line Stroke color as an HTML Color code
     */
    set crosshairStroke(value: string);
    protected notifyPropertyChanged(propertyName: string): void;
    private getSeriesInfos;
    private update;
    private newLineAnnotation;
}
