"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LegendModifier = void 0;
const SciChartLegend_1 = require("../Visuals/Legend/SciChartLegend");
const ChartModifierBase2D_1 = require("./ChartModifierBase2D");
/**
 * The LegendModifier provides interactive legend behavior on a 2D {@link SciChartSurface}
 * within SciChart - High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 *
 * To apply the LegendModifier to a {@link SciChartSurface} and add tooltip behavior,
 * use the following code:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * sciChartSurface.chartModifiers.add(new LegendModifier());
 * ```
 */
class LegendModifier extends ChartModifierBase2D_1.ChartModifierBase2D {
    /**
     * Creates an instance of the LegendModifier
     * @param options Optional parameters {@link ILegendModifierOptions} used to configure the modifier
     */
    constructor(options) {
        var _a, _b, _c, _d, _e, _f;
        super(options);
        this.sciChartLegend = new SciChartLegend_1.SciChartLegend();
        this.sciChartLegend.orientation = (_a = options === null || options === void 0 ? void 0 : options.orientation) !== null && _a !== void 0 ? _a : this.sciChartLegend.orientation;
        this.sciChartLegend.showLegend = (_b = options === null || options === void 0 ? void 0 : options.showLegend) !== null && _b !== void 0 ? _b : this.sciChartLegend.showLegend;
        this.sciChartLegend.showCheckboxes = (_c = options === null || options === void 0 ? void 0 : options.showCheckboxes) !== null && _c !== void 0 ? _c : this.sciChartLegend.showCheckboxes;
        this.sciChartLegend.showSeriesMarkers = (_d = options === null || options === void 0 ? void 0 : options.showSeriesMarkers) !== null && _d !== void 0 ? _d : this.sciChartLegend.showSeriesMarkers;
        this.sciChartLegend.placement = (_e = options === null || options === void 0 ? void 0 : options.placement) !== null && _e !== void 0 ? _e : this.sciChartLegend.placement;
        this.sciChartLegend.margin = (_f = options === null || options === void 0 ? void 0 : options.margin) !== null && _f !== void 0 ? _f : this.sciChartLegend.margin;
    }
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider) {
        super.applyTheme(themeProvider);
        this.sciChartLegend.applyTheme();
    }
    /**
     * @inheritDoc
     */
    onAttachSeries(rs) {
        super.onAttachSeries(rs);
        this.sciChartLegend.setRenderableSeriesArray(this.parentSurface.renderableSeries.asArray());
        this.sciChartLegend.setInvalidateParentSurface(this.parentSurface.invalidateElement);
    }
    /**
     * @inheritDoc
     */
    onDetachSeries(rs) {
        super.onDetachSeries(rs);
    }
    /**
     * @inheritDoc
     */
    onParentSurfaceRendered() {
        super.onParentSurfaceRendered();
        this.sciChartLegend.setSeriesViewRect(this.parentSurface.seriesViewRect);
        this.sciChartLegend.update();
    }
    /**
     * @inheritDoc
     */
    onAttach() {
        super.onAttach();
        this.sciChartLegend.setRootDiv(this.parentSurface.domDivContainer);
        this.sciChartLegend.setRenderableSeriesArray(this.parentSurface.renderableSeries.asArray());
        this.sciChartLegend.setInvalidateParentSurface(this.parentSurface.invalidateElement);
        this.sciChartLegend.setParentSurface(this.parentSurface);
    }
}
exports.LegendModifier = LegendModifier;
