"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.YAxisDragModifier = void 0;
const CursorStyle_1 = require("../../types/CursorStyle");
const DragMode_1 = require("../../types/DragMode");
const translate_1 = require("../../utils/translate");
const AxisBase2D_1 = require("../Visuals/Axis/AxisBase2D");
const ChartModifierBase2D_1 = require("./ChartModifierBase2D");
const ChartModifierBase2D_2 = require("./ChartModifierBase2D");
const ChartModifierBase2D_3 = require("./ChartModifierBase2D");
/**
 * The YAxisDragModifier provides scaling/panning behavior for Y axis {@link AxisBase2D}
 * within SciChart - High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 *
 * To apply the YAxisDragModifier to a {@link SciChartSurface} and add scaling behavior,
 * use the following code:
 *
 * ```ts
 * sciChartSurface.chartModifiers.add(new YAxisDragModifier());
 * ```
 */
class YAxisDragModifier extends ChartModifierBase2D_1.ChartModifierBase2D {
    /**
     * Creates an instance of a XAxisDragModifier
     * @param options optional parameters to pass to the XAxisDragModifier to configure it upon construction
     */
    constructor(options) {
        var _a;
        super(options);
        this.dragMode = DragMode_1.EDragMode.Scaling;
        this.isClickedOverYAxis = false;
        this.isVerticalChart = false;
        this.dragMode = (_a = options === null || options === void 0 ? void 0 : options.dragMode) !== null && _a !== void 0 ? _a : this.dragMode;
    }
    /**
     * @inheritDoc
     */
    modifierMouseDown(args) {
        super.modifierMouseDown(args);
        if (!this.isAttached) {
            throw new Error("Should not call YAxisDragModifier.modifierMouseDown if not attached");
        }
        if (ChartModifierBase2D_2.testIsOverAxes(this.getVerticalYAxes(), args.mousePoint)) {
            // Horizontal chart
            this.isVerticalChart = false;
            this.startDragging(this.getVerticalYAxes(), args);
        }
        else if (ChartModifierBase2D_2.testIsOverAxes(this.getHorizontalYAxes(), args.mousePoint)) {
            // Vertical chart
            this.isVerticalChart = true;
            this.startDragging(this.getHorizontalYAxes(), args);
        }
    }
    /**
     * @inheritDoc
     */
    modifierMouseMove(args) {
        if (this.isClickedOverYAxis) {
            super.modifierMouseMove(args);
            if (this.pointFrom === undefined) {
                return;
            }
            if (this.dragMode === DragMode_1.EDragMode.Panning) {
                this.doPanning(args.mousePoint);
            }
            else if (this.dragMode === DragMode_1.EDragMode.Scaling) {
                this.doScaling(args.mousePoint);
            }
        }
        else {
            this.updateCursor(args.mousePoint);
        }
    }
    /**
     * @inheritDoc
     */
    modifierMouseUp(args) {
        super.modifierMouseUp(args);
        this.updateCursor(args.mousePoint);
        this.pointFrom = undefined;
        this.isClickedOverYAxis = false;
        args.target.releasePointerCapture(args.pointerId);
    }
    updateCursor(mousePoint) {
        const canvas = this.parentSurface.getMainCanvas();
        if (ChartModifierBase2D_2.testIsOverAxes(this.getVerticalYAxes(), mousePoint)) {
            if (this.cursorStyle !== CursorStyle_1.ECursorStyle.NS) {
                canvas.style.cursor = CursorStyle_1.ECursorStyle.NS;
                this.cursorStyle = CursorStyle_1.ECursorStyle.NS;
            }
        }
        else if (ChartModifierBase2D_2.testIsOverAxes(this.getHorizontalYAxes(), mousePoint)) {
            if (this.cursorStyle !== CursorStyle_1.ECursorStyle.EW) {
                canvas.style.cursor = CursorStyle_1.ECursorStyle.EW;
                this.cursorStyle = CursorStyle_1.ECursorStyle.EW;
            }
        }
        else {
            if (this.cursorStyle !== CursorStyle_1.ECursorStyle.Defalut) {
                canvas.style.cursor = CursorStyle_1.ECursorStyle.Defalut;
                this.cursorStyle = CursorStyle_1.ECursorStyle.Defalut;
            }
        }
    }
    doPanning(mousePoint) {
        const pointTo = mousePoint;
        if (this.isVerticalChart) {
            const xDelta = pointTo.x - this.pointFrom.x;
            this.activeAxes.forEach(y => {
                const delta = y.flippedCoordinates ? xDelta : -xDelta;
                y.scroll(delta, AxisBase2D_1.EClipMode.None);
            });
        }
        else {
            const yDelta = pointTo.y - this.pointFrom.y;
            this.activeAxes.forEach(y => {
                const delta = y.flippedCoordinates ? yDelta : -yDelta;
                y.scroll(delta, AxisBase2D_1.EClipMode.None);
            });
        }
        this.pointFrom = pointTo;
    }
    doScaling(pointTo) {
        const { seriesViewRect } = this.parentSurface;
        if (this.isVerticalChart) {
            const xFromTrans = translate_1.translateFromCanvasToSeriesViewRectX(this.pointFrom.x, seriesViewRect);
            const isMoreThanHalf = xFromTrans <= seriesViewRect.width / 2;
            const xDelta = -(pointTo.x - this.pointFrom.x) / seriesViewRect.width;
            ChartModifierBase2D_3.scaleAxes(this.activeAxes, this.initialVisibleRanges, xDelta, isMoreThanHalf);
        }
        else {
            const yFromTrans = translate_1.translateFromCanvasToSeriesViewRectY(this.pointFrom.y, seriesViewRect);
            const isMoreThanHalf = yFromTrans <= seriesViewRect.height / 2;
            const yDelta = -(pointTo.y - this.pointFrom.y) / seriesViewRect.height;
            ChartModifierBase2D_3.scaleAxes(this.activeAxes, this.initialVisibleRanges, yDelta, isMoreThanHalf);
        }
    }
    getVerticalYAxes() {
        return this.parentSurface.yAxes.asArray().filter(el => !el.isHorizontalAxis);
    }
    getHorizontalYAxes() {
        return this.parentSurface.yAxes.asArray().filter(el => el.isHorizontalAxis);
    }
    startDragging(axes, args) {
        this.isClickedOverYAxis = true;
        const activeAxes = ChartModifierBase2D_1.getActiveAxes(axes, args.mousePoint);
        const initialVisibleRanges = [];
        activeAxes.forEach(el => {
            initialVisibleRanges.push(el.visibleRange);
        });
        this.activeAxes = activeAxes;
        this.initialVisibleRanges = initialVisibleRanges;
        this.pointFrom = args.mousePoint;
        args.handled = true;
        args.target.setPointerCapture(args.pointerId);
    }
}
exports.YAxisDragModifier = YAxisDragModifier;
