import { NumberRange } from "../../Core/NumberRange";
import { Point } from "../../Core/Point";
import { EExecuteOn } from "../../types/ExecuteOn";
import { EXyDirection } from "../../types/XyDirection";
import { AxisBase2D } from "../Visuals/Axis/AxisBase2D";
import { SciChartSurface } from "../Visuals/SciChartSurface";
import { ChartModifierBase, EModifierType } from "./ChartModifierBase";
/**
 * Options for passing to the constructor of {@link ChartModifierBase2D} derived types
 */
export interface IChartModifierBaseOptions {
    /**
     * Defines the operation that modifier should respond to
     */
    executeOn?: EExecuteOn;
    /**
     * Defines the {@link EXyDirection | Xy Direction} - whether the modifier works in X, Y or XY or neither direction
     */
    xyDirection?: EXyDirection;
    /**
     * Defines the Modifier Group string - a grouping by ID for sharing mouse events across charts
     */
    modifierGroup?: string;
}
/**
 * Defines a base class to a ChartModifier2D - a class which provides Zoom, Pan, Tooltip or interaction behavior
 * to SciChart - High Performance Realtime {@link https://www.scichart.com/javascript-chart-features | 2D JavaScript Charts}
 */
export declare abstract class ChartModifierBase2D extends ChartModifierBase<SciChartSurface> {
    xyDirection: EXyDirection;
    protected changedPropertiesList: string[];
    /**
     * Creates an instance of the {@link ChartModifierBase2D}
     * @param options optional parameters via {@link IChartModifierBaseOptions} which can be passed to configure the modifier
     */
    constructor(options?: IChartModifierBaseOptions);
    /**
     * @inheritDoc
     */
    get modifierType(): EModifierType;
    protected testPropertyChanged(propertyName: string): boolean;
    protected notifyPropertyChanged(propertyName: string): void;
}
export declare const testIsOverAxes: (xAxisArr: AxisBase2D[], mousePoint: Point) => boolean;
export declare const getActiveAxes: (xAxisArr: AxisBase2D[], mousePoint: Point) => AxisBase2D[];
export declare const scaleAxes: (axes: AxisBase2D[], initialVisibleRanges: NumberRange[], delta: number, isMoreThanHalf: boolean) => void;
