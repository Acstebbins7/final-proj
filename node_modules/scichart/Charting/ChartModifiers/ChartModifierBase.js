"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChartModifierBase = exports.EModifierType = void 0;
const ExecuteOn_1 = require("../../types/ExecuteOn");
const SciChartSurfaceBase_1 = require("../Visuals/SciChartSurfaceBase");
const constants_1 = require("./constants");
var EModifierType;
(function (EModifierType) {
    EModifierType["Chart2DModifier"] = "2D Chart Modifier";
    EModifierType["Chart3DModifier"] = "3D Chart Modifier";
})(EModifierType = exports.EModifierType || (exports.EModifierType = {}));
/**
 * Defines a base class to a Chart Modifier - a class which provides Zoom, Pan, Tooltip or interaction behavior
 * to SciChart - High Performance Realtime {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 */
class ChartModifierBase {
    constructor() {
        this.isEnabledProperty = true;
        this.executeOnProperty = ExecuteOn_1.EExecuteOn.MouseLeftButton;
    }
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider) {
        // TODO: override to apply theme
    }
    /**
     * @inheritDoc
     */
    get parentSurface() {
        return this.parentSurfaceProperty;
    }
    /**
     * @inheritDoc
     */
    get isEnabled() {
        return this.isEnabledProperty;
    }
    /**
     * @inheritDoc
     */
    set isEnabled(isEnabled) {
        this.isEnabledProperty = isEnabled;
        this.notifyPropertyChanged(constants_1.PROPERTY.IS_ENABLED);
    }
    /**
     * @inheritDoc
     */
    get isAttached() {
        return this.isAttachedProperty;
    }
    /**
     * @inheritDoc
     */
    get receiveHandledEvents() {
        return this.receiveHandledEventsProperty;
    }
    /**
     * @inheritDoc
     */
    set receiveHandledEvents(receiveHandledEvents) {
        this.receiveHandledEventsProperty = receiveHandledEvents;
        this.notifyPropertyChanged(constants_1.PROPERTY.RECEIVE_HANDLED_EVENTS);
    }
    /**
     * @inheritDoc
     */
    get executeOn() {
        return this.executeOnProperty;
    }
    /**
     * @inheritDoc
     */
    set executeOn(operationType) {
        this.executeOnProperty = operationType;
        this.notifyPropertyChanged(constants_1.PROPERTY.EXECUTE_ON);
    }
    /**
     * @inheritDoc
     */
    get canReceiveMouseEvents() {
        return this.isEnabled && this.isAttached && this.parentSurfaceProperty !== undefined;
    }
    /**
     * @inheritDoc
     */
    onAttach() {
        // Override in derived class to be notified of attached
    }
    /**
     * @inheritDoc
     */
    onDetach() {
        // Override in derived class to be notified of detached
    }
    /**
     * @inheritDoc
     */
    onAttachSeries(rs) {
        // Override in derived class to be notified of attached
    }
    /**
     * @inheritDoc
     */
    onDetachSeries(rs) {
        // Override in derived class to be notified of detached
    }
    /**
     * @inheritDoc
     */
    onParentSurfaceRendered() {
        // Override in derived class to be notified when render pass is finished
    }
    /**
     * @inheritDoc
     */
    modifierMouseDown(args) {
        // Override in derived class to be notified of mouse down
    }
    /**
     * @inheritDoc
     */
    modifierMouseMove(args) {
        this.mousePoint = args.mousePoint;
        // Override in derived class to be notified of mouse move
    }
    /**
     * @inheritDoc
     */
    modifierMouseUp(args) {
        // Override in derived class to be notified of mouse up
    }
    /**
     * @inheritDoc
     */
    modifierMouseWheel(args) {
        // Override in derived class to be notified of mouse wheel
    }
    /**
     * @inheritDoc
     */
    modifierDoubleClick(args) {
        // Override in derived class to be notified of mouse double click
    }
    /**
     * @inheritDoc
     */
    modifierMouseEnter(args) {
        // Override in derived class to be notified of mouse enter
    }
    /**
     * @inheritDoc
     */
    modifierMouseLeave(args) {
        // Override in derived class to be notified of mouse leave
    }
    /**
     * @inheritDoc
     */
    modifierPointerCancel(args) {
        // Override in derived class to be notified of mouse leave
    }
    /**
     * @inheritDoc
     */
    setParentSurface(parentSurface) {
        if (!parentSurface) {
            this.parentSurfaceProperty = undefined;
        }
        else {
            if (parentSurface.surfaceType === SciChartSurfaceBase_1.ESurfaceType.SciChartSurfaceType &&
                this.modifierType === EModifierType.Chart3DModifier) {
                throw new Error("A 3D Chart Modifier cannot be added to a 2D SciChartSurface. Please check surfaceType and ModifierType properties for modifierType");
            }
            if (parentSurface.surfaceType === SciChartSurfaceBase_1.ESurfaceType.SciChart3DSurfaceType &&
                this.modifierType === EModifierType.Chart2DModifier) {
                throw new Error("A 2D Chart Modifier cannot be added to a 3D SciChartSurface. Please check surfaceType and ModifierType properties for modifierType");
            }
            this.parentSurfaceProperty = parentSurface;
        }
        this.isAttachedProperty = this.parentSurfaceProperty !== undefined;
        this.notifyPropertyChanged(constants_1.PROPERTY.PARENT_SURFACE);
    }
    /**
     * Notifies the parent surface that a property has changed by calling {@link invalidateParentCallback}
     * @param propertyName the property name which has changed
     */
    notifyPropertyChanged(propertyName) {
        if (this.invalidateParentCallback) {
            this.invalidateParentCallback();
        }
    }
}
exports.ChartModifierBase = ChartModifierBase;
