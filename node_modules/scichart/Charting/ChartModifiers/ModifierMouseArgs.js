"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModifierMouseArgs = void 0;
const Guard_1 = require("../../Core/Guard");
const Point_1 = require("../../Core/Point");
const ModifierArgsBase_1 = require("./ModifierArgsBase");
/**
 * Mouse arguments passed to {@link ChartModifierBase} methods
 */
class ModifierMouseArgs extends ModifierArgsBase_1.ModifierArgsBase {
    /**
     * Creates an instance of {@link ModifierMouseArgs}
     * @param mousePoint the mouse point as an X,Y location
     * @param options optional parameters to configure the args
     */
    constructor(mousePoint, options) {
        var _a;
        super();
        this.mousePoint = mousePoint;
        this.button = options === null || options === void 0 ? void 0 : options.button;
        this.mouseWheelDelta = (_a = options === null || options === void 0 ? void 0 : options.mouseWheelDelta) !== null && _a !== void 0 ? _a : 0;
        this.pointerId = options === null || options === void 0 ? void 0 : options.pointerId;
        this.pointerType = options === null || options === void 0 ? void 0 : options.pointerType;
        this.target = options === null || options === void 0 ? void 0 : options.target;
        this.isMaster = options === null || options === void 0 ? void 0 : options.isMaster;
        this.modifierGroup = options === null || options === void 0 ? void 0 : options.modifierGroup;
    }
    /**
     * Creates a {@link ModifierMouseArgs} instance from Javascript {@link MouseEvent}
     * @param mouseEvent the Javascript {@link MouseEvent}
     */
    static fromMouseEvent(mouseEvent) {
        Guard_1.Guard.notNull(mouseEvent, "mouseEvent");
        const mousePoint = new Point_1.Point(mouseEvent.offsetX, mouseEvent.offsetY);
        const options = {
            target: mouseEvent.target,
            isMaster: true
        };
        return new ModifierMouseArgs(mousePoint, options);
    }
    /**
     * Creates a {@link ModifierMouseArgs} instance from Javascript {@link WheelEvent}
     * @param mouseEvent the Javascript {@link WheelEvent}
     */
    static fromWheelEvent(wheelEvent) {
        Guard_1.Guard.notNull(wheelEvent, "wheelEvent");
        const mousePoint = new Point_1.Point(wheelEvent.offsetX, wheelEvent.offsetY);
        const options = {
            mouseWheelDelta: wheelEvent.deltaY,
            target: wheelEvent.target,
            isMaster: true
        };
        return new ModifierMouseArgs(mousePoint, options);
    }
    /**
     * Creates a {@link ModifierMouseArgs} instance from Javascript {@link PointerEvent}
     * @param mouseEvent the Javascript {@link PointerEvent}
     */
    static fromPointerEvent(pointerEvent) {
        Guard_1.Guard.notNull(pointerEvent, "pointerEvent");
        const mousePoint = new Point_1.Point(pointerEvent.offsetX, pointerEvent.offsetY);
        const options = {
            button: pointerEvent.button,
            pointerId: pointerEvent.pointerId,
            pointerType: pointerEvent.pointerType,
            target: pointerEvent.target,
            isMaster: true
        };
        return new ModifierMouseArgs(mousePoint, options);
    }
    /**
     * Copies or clones a {@link ModifierMouseArgs}
     * @param args the {@link ModifierMouseArgs} instance
     * @param modifierGroup the Modifier Group / string ID for sharing mouse events
     * @param masterViewport the master viewport or parent chart issuing mouse events
     * @param slaveViewport the slave viewport or child chart receiving mouse events
     */
    static copy(args, modifierGroup, masterViewport, slaveViewport) {
        let mousePoint = args.mousePoint;
        if (masterViewport && slaveViewport) {
            const scaleX = slaveViewport.width / masterViewport.width;
            const scaleY = slaveViewport.height / masterViewport.height;
            mousePoint = new Point_1.Point(args.mousePoint.x * scaleX, args.mousePoint.y * scaleY);
        }
        return Object.assign(Object.assign({}, args), { isMaster: false, handled: false, modifierGroup,
            mousePoint });
    }
}
exports.ModifierMouseArgs = ModifierMouseArgs;
