import { Point } from "../../Core/Point";
import { EExecuteOn } from "../../types/ExecuteOn";
import { IThemeable } from "../Themes/IThemeable";
import { IThemeProvider } from "../Themes/IThemeProvider";
import { IRenderableSeries } from "../Visuals/RenderableSeries/IRenderableSeries";
import { SciChartSurfaceBase } from "../Visuals/SciChartSurfaceBase";
import { ModifierMouseArgs } from "./ModifierMouseArgs";
export declare enum EModifierType {
    Chart2DModifier = "2D Chart Modifier",
    Chart3DModifier = "3D Chart Modifier"
}
/**
 * Defines the interface to a {@link ChartModifierBase | Chart Modifier} - a class which provides Zoom, Pan, Tooltip or interaction behavior
 * to SciChart - High Performance Realtime {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 */
export interface IChartModifierBase extends IThemeable {
    /**
     * A callback to invalidate the parent {@link SciChartSurfaceBase}
     */
    invalidateParentCallback: () => void;
    /**
     * The type of Chart Modifier, see {@link EModifierType} for a list of values
     */
    modifierType: EModifierType;
    /**
     * The operation that modifier should respond to
     */
    executeOn: EExecuteOn;
    /**
     * When true, the modifier is enabled
     */
    isEnabled: boolean;
    /**
     * When true, the modifier is attached to a {@link SciChartSurfaceBase}
     * @remarks Set internally by SciChart on attaching to a parent surface
     */
    isAttached: boolean;
    /**
     * When true, this modifier should receive events which have been handled by modifiers
     * higher up in the call hierachy.
     * @remarks Use this property to solve issues related to events being consumed by modifiers and not passed down
     */
    receiveHandledEvents: boolean;
    /**
     * When true, this modifier can receive mouse events
     */
    canReceiveMouseEvents: boolean;
    /**
     * Specifies a string ID to group modifiers.
     * @remarks When one receives a mouse event, all modifiers in the same group receive the event.
     */
    modifierGroup: string;
    /**
     * Called when the modifier is attached to a parent {@link SciChartSurfaceBase}
     */
    onAttach(): void;
    /**
     * Called when the modifier is detached from a parent {@link SciChartSurfaceBase}
     */
    onDetach(): void;
    /**
     * Called when a {@link IRenderableSeries | RenderableSeries} is attached to this modifier
     */
    onAttachSeries(rs: IRenderableSeries): void;
    /**
     * Called when a {@link IRenderableSeries | RenderableSeries} is detached from this modifier
     */
    onDetachSeries(rs: IRenderableSeries): void;
    /**
     * Called when the parent {@link SciChartSurfaceBase} is rendered
     */
    onParentSurfaceRendered(): void;
    /**
     * Method called when mouse-down or touch-down occurs on the parent {@link SciChartSurfaceBase}
     * @param args the {@link ModifierMouseArgs} containing data about the mouse event
     */
    modifierMouseDown(args: ModifierMouseArgs): void;
    /**
     * Method called when mouse-move or touch-move occurs on the parent {@link SciChartSurfaceBase}
     * @param args the {@link ModifierMouseArgs} containing data about the mouse event
     */
    modifierMouseMove(args: ModifierMouseArgs): void;
    /**
     * Method called when mouse-up or touch-up occurs on the parent {@link SciChartSurfaceBase}
     * @param args the {@link ModifierMouseArgs} containing data about the mouse event
     */
    modifierMouseUp(args: ModifierMouseArgs): void;
    /**
     * Method called when mouse-wheel scroll occurs on the parent {@link SciChartSurfaceBase}
     * @param args the {@link ModifierMouseArgs} containing data about the mouse event
     */
    modifierMouseWheel(args: ModifierMouseArgs): void;
    /**
     * Method called when mouse double-click or touch double-tap occurs on the parent {@link SciChartSurfaceBase}
     * @param args the {@link ModifierMouseArgs} containing data about the mouse event
     */
    modifierDoubleClick(args: ModifierMouseArgs): void;
    /**
     * Method called when mouse leaves the parent {@link SciChartSurfaceBase}
     * @param args the {@link ModifierMouseArgs} containing data about the mouse event
     */
    modifierMouseLeave(args: ModifierMouseArgs): void;
    /**
     * Method called when mouse enters the parent {@link SciChartSurfaceBase}
     * @param args the {@link ModifierMouseArgs} containing data about the mouse event
     */
    modifierMouseEnter(args: ModifierMouseArgs): void;
    /**
     * Method called when pointer event is canceled {@link SciChartSurfaceBase}
     * @param args the {@link ModifierMouseArgs} containing data about the pointer event
     */
    modifierPointerCancel(args: ModifierMouseArgs): void;
    /**
     * Sets the parent {@link SciChartSurfaceBase} on this modifier
     * @param parentSurface
     */
    setParentSurface(parentSurface: SciChartSurfaceBase): void;
}
/**
 * Defines a base class to a Chart Modifier - a class which provides Zoom, Pan, Tooltip or interaction behavior
 * to SciChart - High Performance Realtime {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 */
export declare abstract class ChartModifierBase<TSurfaceType extends SciChartSurfaceBase> implements IChartModifierBase {
    /**
     * @inheritDoc
     */
    modifierGroup: string;
    /**
     * @inheritDoc
     */
    invalidateParentCallback: () => void;
    protected isEnabledProperty: boolean;
    protected isAttachedProperty: boolean;
    protected receiveHandledEventsProperty: boolean;
    protected mousePoint: Point;
    private executeOnProperty;
    private parentSurfaceProperty;
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * @inheritDoc
     */
    get parentSurface(): TSurfaceType;
    /**
     * @inheritDoc
     */
    abstract get modifierType(): EModifierType;
    /**
     * @inheritDoc
     */
    get isEnabled(): boolean;
    /**
     * @inheritDoc
     */
    set isEnabled(isEnabled: boolean);
    /**
     * @inheritDoc
     */
    get isAttached(): boolean;
    /**
     * @inheritDoc
     */
    get receiveHandledEvents(): boolean;
    /**
     * @inheritDoc
     */
    set receiveHandledEvents(receiveHandledEvents: boolean);
    /**
     * @inheritDoc
     */
    get executeOn(): EExecuteOn;
    /**
     * @inheritDoc
     */
    set executeOn(operationType: EExecuteOn);
    /**
     * @inheritDoc
     */
    get canReceiveMouseEvents(): boolean;
    /**
     * @inheritDoc
     */
    onAttach(): void;
    /**
     * @inheritDoc
     */
    onDetach(): void;
    /**
     * @inheritDoc
     */
    onAttachSeries(rs: IRenderableSeries): void;
    /**
     * @inheritDoc
     */
    onDetachSeries(rs: IRenderableSeries): void;
    /**
     * @inheritDoc
     */
    onParentSurfaceRendered(): void;
    /**
     * @inheritDoc
     */
    modifierMouseDown(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierMouseMove(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierMouseUp(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierMouseWheel(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierDoubleClick(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierMouseEnter(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierMouseLeave(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    modifierPointerCancel(args: ModifierMouseArgs): void;
    /**
     * @inheritDoc
     */
    setParentSurface(parentSurface: SciChartSurfaceBase): void;
    /**
     * Notifies the parent surface that a property has changed by calling {@link invalidateParentCallback}
     * @param propertyName the property name which has changed
     */
    protected notifyPropertyChanged(propertyName: string): void;
}
