"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZoomExtentsModifier = void 0;
const EasingFunctions_1 = require("../../Core/Animations/EasingFunctions");
const ZoomState_1 = require("../../types/ZoomState");
const ChartModifierBase2D_1 = require("./ChartModifierBase2D");
/**
 * The ZoomExtentsModifier provides double-tap or double-click to zoom-to-fit (Zoom Extents) behavior
 * on a 2D {@link SciChartSurface} within SciChart - High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 *
 * To apply the ZoomExtentsModifier to a {@link SciChartSurface} and add drag to zoom behavior,
 * use the following code:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * sciChartSurface.chartModifiers.add(new ZoomExtentsModifier());
 * ```
 *
 * Animation of the zoom extents be controlled via the {@link ZoomExtentsModifier.isAnimated},
 * {@link ZoomExtentsModifier.animationDuration} and {@link ZoomExtentsModifier.easingFunction} properties.
 */
class ZoomExtentsModifier extends ChartModifierBase2D_1.ChartModifierBase2D {
    constructor(options) {
        var _a, _b, _c;
        super(options);
        /**
         * When true, the Zoom operations are animated. See also {@link animationDuration} and {@link easingFunction}
         */
        this.isAnimated = true;
        /**
         * Defines the duration of animations when zooming in milliseconds
         */
        this.animationDuration = 400;
        /**
         * Defines the easing function for animation. See {@link TEasing} for a range of functions
         */
        this.easingFunction = EasingFunctions_1.easing.outExpo;
        this.isAnimated = (_a = options === null || options === void 0 ? void 0 : options.isAnimated) !== null && _a !== void 0 ? _a : true;
        this.animationDuration = (_b = options === null || options === void 0 ? void 0 : options.animationDuration) !== null && _b !== void 0 ? _b : 400;
        this.easingFunction = (_c = options === null || options === void 0 ? void 0 : options.easingFunction) !== null && _c !== void 0 ? _c : EasingFunctions_1.easing.outExpo;
    }
    /**
     * @inheritDoc
     */
    modifierDoubleClick(args) {
        const scs = this.parentSurface;
        if (scs !== undefined) {
            const animationDuration = this.isAnimated ? this.animationDuration : 0;
            scs.zoomExtents(animationDuration, this.easingFunction, () => scs.setZoomState(ZoomState_1.EZoomState.AtExtents));
            args.handled = true;
        }
    }
}
exports.ZoomExtentsModifier = ZoomExtentsModifier;
