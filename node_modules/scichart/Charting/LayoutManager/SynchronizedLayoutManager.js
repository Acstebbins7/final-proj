"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SynchronizedLayoutManager = void 0;
const guid_1 = require("../../utils/guid");
const LayoutManager_1 = require("./LayoutManager");
/**
 * @ignore
 */
class SynchronizedLayoutManager extends LayoutManager_1.LayoutManager {
    constructor(sciChartSurface, verticalGroup) {
        super(sciChartSurface);
        this.id = guid_1.generateGuid();
        this.verticalGroup = verticalGroup;
    }
    layoutChart(viewportSize) {
        const size = super.layoutChart(viewportSize);
        this.verticalGroup.synchronizeAxisSizes();
        return size;
    }
    trySynchronizeLayouts() {
        if (this.lastLeftOuterAreaSize !== this.verticalGroup.groupLeftSize ||
            this.lastRightOuterAreaSize !== this.verticalGroup.groupRightSize) {
            this.sciChartSurface.invalidateElement();
        }
    }
    measureLeftOuterAxes() {
        super.measureLeftOuterAxes();
        this.verticalGroup.onLeftSizeChanged(this.id, this.chartLayoutState.leftOuterAreaSize);
        const newSize = Math.max(this.chartLayoutState.leftOuterAreaSize, this.verticalGroup.groupLeftSize);
        this.chartLayoutState.leftOuterAreaSize = newSize;
        this.lastLeftOuterAreaSize = newSize;
    }
    measureRightOuterAxes() {
        super.measureRightOuterAxes();
        this.verticalGroup.onRightSizeChanged(this.id, this.chartLayoutState.rightOuterAreaSize);
        const newSize = Math.max(this.chartLayoutState.rightOuterAreaSize, this.verticalGroup.groupRightSize);
        this.chartLayoutState.rightOuterAreaSize = newSize;
        this.lastRightOuterAreaSize = newSize;
    }
}
exports.SynchronizedLayoutManager = SynchronizedLayoutManager;
