"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SciChartVerticalGroup = void 0;
const Size_1 = require("../../types/Size");
const SynchronizedLayoutManager_1 = require("./SynchronizedLayoutManager");
class SciChartVerticalGroup {
    constructor() {
        this.groupRightSize = 0;
        this.groupLeftSize = 0;
        this.layoutManagers = [];
        this.leftOuterLayoutSizes = {};
        this.rightOuterLayoutSizes = {};
    }
    addSurfaceToGroup(sciChartSurface) {
        const syncLayoutManager = new SynchronizedLayoutManager_1.SynchronizedLayoutManager(sciChartSurface, this);
        this.layoutManagers.push(syncLayoutManager);
        sciChartSurface.setLayoutManager(syncLayoutManager);
        const { width, height } = sciChartSurface.domCanvas2D;
        sciChartSurface.layoutManager.layoutChart(new Size_1.Size(width, height));
        this.synchronizeAxisSizes();
    }
    synchronizeAxisSizes() {
        this.layoutManagers.forEach(lm => {
            lm.trySynchronizeLayouts();
        });
    }
    onLeftSizeChanged(key, value) {
        this.leftOuterLayoutSizes[key] = value;
        this.groupLeftSize = calculateMaxGroupSize(this.leftOuterLayoutSizes);
    }
    onRightSizeChanged(key, value) {
        this.rightOuterLayoutSizes[key] = value;
        this.groupRightSize = calculateMaxGroupSize(this.rightOuterLayoutSizes);
    }
}
exports.SciChartVerticalGroup = SciChartVerticalGroup;
const calculateMaxGroupSize = (outerLayoutSizes) => {
    let areaWidth = 0;
    Object.keys(outerLayoutSizes).forEach(key => {
        areaWidth = Math.max(areaWidth, outerLayoutSizes[key]);
    });
    return areaWidth;
};
