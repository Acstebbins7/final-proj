"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.licenseManager = exports.updateLicenseDisplay = exports.getLicenseInfo = exports.applyLicense = exports.getLicenseCookie = exports.setCallbacks3D = exports.setLicenseWizardPort = exports.getLicenseWizardPort = exports.setUseLicenseWizard = exports.setRuntimeLicenseKey = exports.setLicenseCallback = exports.setDependencies = void 0;
const Dictionary_1 = require("../../Core/Dictionary");
const Color_1 = require("../../types/Color");
const licensingClasses_1 = require("../../types/licensingClasses");
const cookie_1 = require("../../utils/cookie");
const app_1 = require("../../constants/app");
let licenseDependencies = {
    fetchFromWizard: (url) => fetch(url),
    setCookie: (name, val, validDays) => cookie_1.setCookie(name, val, validDays),
    getCookie: (name) => cookie_1.getCookie(name),
    fetchForChallenge: (url) => fetch(url),
    updateLicenseDisplay: (licenseInfo, sciChartSurface, is2D, applyToOther) => updateLicenseDisplayInternal(licenseInfo, sciChartSurface, is2D, applyToOther),
    debug: (message) => console.log(message)
};
exports.setDependencies = (dependencies) => (licenseDependencies = dependencies);
let isDebug = null;
const debug = (message) => {
    if (isDebug === null) {
        isDebug = typeof (localStorage) !== "undefined" && localStorage.getItem("LICENSE_DEBUG") === "1";
    }
    if (app_1.IS_TEST_ENV || isDebug) {
        licenseDependencies.debug(message);
    }
};
// tslint:disable: no-console
let licenseCallback;
exports.setLicenseCallback = (callback) => {
    licenseCallback = callback;
};
let runtimeLicenseKey = "";
const getRuntimeLicenseKey = () => runtimeLicenseKey;
exports.setRuntimeLicenseKey = (value) => {
    const prev = runtimeLicenseKey;
    runtimeLicenseKey = value;
    if (runtimeLicenseKey !== prev && runtimeLicenseKey !== "") {
        if (licenseContext2D !== undefined) {
            exports.applyLicense(licenseContext2D);
        }
    }
};
let useLicenseWizard = true;
exports.setUseLicenseWizard = (value) => {
    useLicenseWizard = value;
};
const retryTime = app_1.IS_TEST_ENV ? 0.1 : 5;
const maxretries = app_1.IS_TEST_ENV ? 12 : 2;
let licenseWizardPort = "24278";
exports.getLicenseWizardPort = () => licenseWizardPort;
exports.setLicenseWizardPort = (value) => {
    licenseWizardPort = value;
};
let serverLicenseEndpoint = "api/license";
const getServerLicenseEndpoint = () => serverLicenseEndpoint;
const setServerLicenseEndpoint = (value) => {
    serverLicenseEndpoint = value;
};
let getLicenseFailCounts = 0;
let wizardTimer;
let callbacks3D = {
    getLicenseChallenge3D: () => undefined,
    setChallengeResponse3D: (token) => undefined,
    setNewLicense3D: (keyCode) => undefined,
    updateLicenseDisplay3D: () => undefined
};
exports.setCallbacks3D = (callbacks) => (callbacks3D = callbacks);
const getlicenseFromWizard = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        if (checkStatus !== licensingClasses_1.LicenseCheckStatus.LookingForLicenseWizard &&
            checkStatus !== licensingClasses_1.LicenseCheckStatus.NoLicenseInWizard)
            return;
        debug(`Trying to get license from local license wizard`);
        let response;
        const wizardUrl = "http://localhost:" + licenseWizardPort + "/license";
        response = yield licenseDependencies.fetchFromWizard(wizardUrl);
        if (response.ok) {
            // console.log("Got license from " + response.url);
            const keyCode = yield response.text();
            const { requiresValidation, trialExpired } = setNewLicense(keyCode);
            if (requiresValidation) {
                checkStatus = licensingClasses_1.LicenseCheckStatus.ValidatingDeveloperLicense;
                dolicenseChallenge();
            }
            else if (trialExpired) {
                checkStatus = licensingClasses_1.LicenseCheckStatus.NoLicenseInWizard;
                debug(`No valid license available in licensing wizard. Trying again in ${retryTime} seconds`);
                wizardTimer = setTimeout(() => getlicenseFromWizard(), retryTime * 1000);
            }
            else {
                checkStatus = licensingClasses_1.LicenseCheckStatus.LicenseOK;
            }
        }
        else {
            checkStatus = licensingClasses_1.LicenseCheckStatus.NoLicenseInWizard;
            debug(`No license available in licensing wizard. Trying again in ${retryTime} seconds`);
            wizardTimer = setTimeout(() => getlicenseFromWizard(), retryTime * 1000);
            // Wizard is avalable, so no need to give up.  Just keep trying until we get a license.
        }
    }
    catch (err) {
        // Failed to connect.  Retry
        getLicenseFailCounts += 1;
        if (getLicenseFailCounts < maxretries) {
            debug(`Could not find licensing wizard. Trying again in ${retryTime} seconds`);
            setTimeout(() => getlicenseFromWizard(), retryTime * 1000);
        }
        else {
            // give up.
            console.log("Failed to connect to licensing wizard. Refresh page to retry.");
            getLicenseFailCounts = 0;
            checkStatus = licensingClasses_1.LicenseCheckStatus.FailedToFindLicenseWizard;
        }
    }
    if (licenseContext2D !== undefined) {
        exports.updateLicenseDisplay(exports.getLicenseInfo(licenseContext2D), sciChartSurface2D, true, true);
    }
    callbacks3D.updateLicenseDisplay3D();
});
const setLicenseCookie = (key, token, expirySeconds, lastValidated) => {
    let cookieVal = `${key},${token},${expirySeconds},${lastValidated}`;
    return licenseDependencies.setCookie("scLicense", cookieVal, 365);
};
exports.getLicenseCookie = () => {
    let cookie;
    cookie = licenseDependencies.getCookie("scLicense");
    const parts = cookie.split(",");
    if (parts.length === 4)
        /// TODO worry about UTC here
        return {
            key: parts[0],
            token: parts[1],
            expiry: new Date(Number.parseInt(parts[2], 10) * 1000),
            lastValidated: new Date(Number.parseInt(parts[3], 10) * 1000)
        };
    else
        return { key: parts[0], token: null, expiry: null, lastValidated: null };
};
const refreshLicense = () => {
    cookie_1.deleteCookie("scLicense");
    exports.applyLicense(licenseContext2D);
};
const setChallengeResponse = (token) => {
    let expirySeconds = -1;
    if (licenseContext2D !== undefined) {
        expirySeconds = licenseContext2D.SCRTCredentials.ApplyLicenseResponse(token);
    }
    const expirySeconds3D = callbacks3D.setChallengeResponse3D(token);
    if (expirySeconds3D !== undefined)
        return expirySeconds3D;
    return expirySeconds;
};
let challengeFailCounts = 0;
const dolicenseChallenge = () => __awaiter(void 0, void 0, void 0, function* () {
    const server = isDev ? "license wizard" : "server";
    try {
        if (checkStatus !== licensingClasses_1.LicenseCheckStatus.ValidatingDeveloperLicense)
            return;
        debug(`Attempting to validate license with ${server}`);
        let challenge;
        let orderId;
        if (licenseContext2D !== undefined) {
            challenge = licenseContext2D.SCRTCredentials.GetLicenseChallenge();
            orderId = licenseContext2D.SCRTCredentials.GetOrderId();
        }
        else {
            ({ challenge, orderId } = callbacks3D.getLicenseChallenge3D());
        }
        let response;
        const queryString = `orderid=${orderId}&challenge=${challenge}`;
        if (isDev) {
            const url = `http://localhost:${licenseWizardPort}/validate?${queryString}`;
            response = yield licenseDependencies.fetchForChallenge(url);
        }
        else if (typeof licenseCallback !== "undefined") {
            response = yield licenseCallback(queryString);
        }
        else {
            const url = "/" + serverLicenseEndpoint + (serverLicenseEndpoint.indexOf("?") > 0 ? "&" : "?") + queryString;
            response = yield licenseDependencies.fetchForChallenge(url);
        }
        if (response.ok) {
            const token = yield response.text();
            if (!token.startsWith("Error")) {
                const expirySeconds = setChallengeResponse(token);
                if (expirySeconds > 0) {
                    const key = exports.getLicenseCookie().key;
                    const timeNow = Math.floor(new Date().getTime() / 1000);
                    setLicenseCookie(key, token, expirySeconds, timeNow);
                    checkStatus = licensingClasses_1.LicenseCheckStatus.LicenseOK;
                    // Set up another call before expiry.
                    const timeToExpiry = expirySeconds - timeNow;
                    challengeFailCounts = 0;
                    setTimeout(() => dolicenseChallenge(), Math.floor(timeToExpiry * 0.95 * 1000)); // Allow 5%
                }
                else {
                    // Something went wrong with the apply
                    console.log("license challenge response was invalid: " + token);
                    checkStatus = licensingClasses_1.LicenseCheckStatus.FailedToValidateDeveloperLicense;
                }
            }
            else {
                // Challenge rejected by server
                console.log("Server rejected the license challenge: " + token);
                checkStatus = licensingClasses_1.LicenseCheckStatus.FailedToValidateDeveloperLicense;
            }
        }
        else {
            // Server error or network failure
            console.log("Error during license validation: " + response.statusText);
            checkStatus = licensingClasses_1.LicenseCheckStatus.FailedToValidateDeveloperLicense;
        }
    }
    catch (err) {
        // Failed to connect.  Retry
        challengeFailCounts += 1;
        if (challengeFailCounts < maxretries) {
            debug(`Could not find ${server}/${serverLicenseEndpoint}. Trying again in ${retryTime} seconds`);
            setTimeout(() => dolicenseChallenge(), retryTime * 1000);
        }
        else {
            // give up.
            const expiry = exports.getLicenseCookie().expiry;
            const msg = isDev ? "Please run the license wizard, ensure your license is activated, then refresh page to retry." : "Please check that the endpoint is configured correctly.";
            console.error(`Failed to connect to ${server}/${serverLicenseEndpoint}.  License must be revalidated before ${expiry.toLocaleString()}. ${msg}`);
            challengeFailCounts = 0;
            // Only actually show failure message if token has expired
            if (new Date() > expiry)
                checkStatus = licensingClasses_1.LicenseCheckStatus.FailedToFindLicenseWizard;
        }
    }
    if (licenseContext2D !== undefined) {
        exports.updateLicenseDisplay(exports.getLicenseInfo(licenseContext2D), sciChartSurface2D, true, true);
    }
    callbacks3D.updateLicenseDisplay3D();
});
let shouldApplyLicense2D = true;
let checkStatus = licensingClasses_1.LicenseCheckStatus.NoLicense;
let licenseContext2D;
let sciChartSurface2D;
let isRuntimeKey = false;
let isDev = false;
const applyLicense2D = (licenseContext, sciChartSurface, isSingle) => {
    debug(`applyLicense 2D`);
    if (isSingle || shouldApplyLicense2D) {
        licenseContext2D = licenseContext;
        sciChartSurface2D = sciChartSurface;
        exports.applyLicense(licenseContext);
    }
    if (!isSingle)
        shouldApplyLicense2D = false;
};
exports.applyLicense = (licenseContext) => {
    debug("applyLicense running");
    let licenseKey = "";
    // Get from cookie store
    let licenseCookie = exports.getLicenseCookie();
    let lt = licenseContext.SCRTLicenseType.LICENSE_TYPE_NO_LICENSE;
    if (licenseCookie !== null && licenseCookie.key !== "") {
        debug("Found license in cookie.");
        licenseKey = licenseCookie.key;
        licenseContext.SCRTCredentials.SetRuntimeLicenseKeyW(licenseKey);
        lt = licenseContext.SCRTCredentials.GetLicenseType();
        // if the license in cookie is bad, remove it
        if (!(lt === licenseContext.SCRTLicenseType.LICENSE_TYPE_FULL ||
            lt === licenseContext.SCRTLicenseType.LICENSE_TYPE_TRIAL ||
            lt === licenseContext.SCRTLicenseType.LICENSE_TYPE_REQUIRES_VALIDATION)) {
            debug("License cookie is invalid. Removing");
            cookie_1.deleteCookie("scLicense");
            licenseKey = "";
            lt = licenseContext.SCRTLicenseType.LICENSE_TYPE_NO_LICENSE;
        }
    }
    if (licenseKey === "" && checkStatus === licensingClasses_1.LicenseCheckStatus.NoLicense) {
        debug("No valid license in cookie");
        // Get from global store
        const runtimelicense = getRuntimeLicenseKey();
        // if exists, set
        if (runtimelicense != null && runtimelicense !== "") {
            if (debug)
                console.log("runtime license found");
            const sep = runtimelicense.indexOf(";");
            if (sep > 0) {
                const timeNow = Math.floor(new Date().getTime() / 1000);
                licenseKey = runtimelicense.substr(0, sep);
                const token = runtimelicense.substring(sep + 1);
                setLicenseCookie(licenseKey, token, timeNow + 60, timeNow);
                licenseCookie = exports.getLicenseCookie();
            }
            else {
                isRuntimeKey = true;
                setLicenseCookie(runtimelicense, null, null, null);
                licenseKey = runtimelicense;
            }
        }
    }
    else if (checkStatus === licensingClasses_1.LicenseCheckStatus.FetchingFromServer) {
        checkStatus = licensingClasses_1.LicenseCheckStatus.NoLicense;
    }
    if (licenseKey !== "") {
        if (lt === licenseContext.SCRTLicenseType.LICENSE_TYPE_NO_LICENSE) {
            // Set the license if we haven't already
            licenseContext.SCRTCredentials.SetRuntimeLicenseKeyW(licenseKey);
            lt = licenseContext.SCRTCredentials.GetLicenseType();
        }
        isDev = licenseContext.SCRTCredentials.GetAllowDebugging();
        if (lt === licenseContext.SCRTLicenseType.LICENSE_TYPE_FULL ||
            lt === licenseContext.SCRTLicenseType.LICENSE_TYPE_TRIAL) {
            checkStatus = licensingClasses_1.LicenseCheckStatus.LicenseOK;
            debug("license ok");
        }
        else if (licenseContext.SCRTCredentials.RequiresValidation()) {
            debug("license requires validation");
            if (isRuntimeKey && isDev) {
                // clear key
                licenseContext.SCRTCredentials.ResetRuntimeLicense();
                cookie_1.deleteCookie("scLicense");
                checkStatus = licensingClasses_1.LicenseCheckStatus.DevKeyInRuntimeKey;
            }
            else if (licenseCookie.expiry > new Date()) {
                debug("current token in cookie");
                const expirySeconds = setChallengeResponse(licenseCookie.token);
                lt = licenseContext.SCRTCredentials.GetLicenseType();
                if (lt === licenseContext.SCRTLicenseType.LICENSE_TYPE_FULL ||
                    lt === licenseContext.SCRTLicenseType.LICENSE_TYPE_TRIAL) {
                    checkStatus = licensingClasses_1.LicenseCheckStatus.LicenseOK;
                }
                const timeNow = Math.floor(new Date().getTime() / 1000);
                if ((expirySeconds * 1000) > licenseCookie.expiry.getTime()) {
                    setLicenseCookie(licenseKey, licenseCookie.token, expirySeconds, timeNow);
                }
                const validationInterval = 60 * 60 * 24; // Once a day
                const secondsSinceValidated = (new Date().getTime() - licenseCookie.lastValidated.getTime()) / 1000;
                debug(`License expires in ${expirySeconds - timeNow} seconds.  Last validated ${secondsSinceValidated} seconds ago`);
                if (secondsSinceValidated > validationInterval && checkStatus !== licensingClasses_1.LicenseCheckStatus.ValidatingDeveloperLicense) {
                    checkStatus = licensingClasses_1.LicenseCheckStatus.ValidatingDeveloperLicense;
                    dolicenseChallenge();
                }
            }
            else if (checkStatus === licensingClasses_1.LicenseCheckStatus.NoLicense) {
                checkStatus = licensingClasses_1.LicenseCheckStatus.ValidatingDeveloperLicense;
                dolicenseChallenge();
            }
        }
        else {
            debug("license is invalid: " + licenseContext.SCRTCredentials.GetLicenseErrors());
        }
    }
    debug("checkstatus: " + licensingClasses_1.LicenseCheckStatus[checkStatus]);
    if (checkStatus === licensingClasses_1.LicenseCheckStatus.NoLicense && useLicenseWizard) {
        if (wizardTimer === undefined) {
            checkStatus = licensingClasses_1.LicenseCheckStatus.LookingForLicenseWizard;
            isDev = true;
            getlicenseFromWizard();
        }
    }
    if (licenseContext2D !== undefined) {
        exports.updateLicenseDisplay(exports.getLicenseInfo(licenseContext2D), sciChartSurface2D, true, false);
    }
    callbacks3D.updateLicenseDisplay3D();
};
let licenseModal;
let openLicenseModal = () => {
    console.error("Modal not initialized");
};
const setNewLicense = (keyCode) => {
    let requiresValidation = false;
    let trialExpired;
    licenseModal.style.display = "none";
    setLicenseCookie(keyCode, null, null, null);
    if (licenseContext2D !== undefined) {
        licenseContext2D.SCRTCredentials.SetRuntimeLicenseKeyW(keyCode);
        requiresValidation = licenseContext2D.SCRTCredentials.RequiresValidation();
        trialExpired =
            licenseContext2D.SCRTCredentials.GetLicenseType() ===
                licenseContext2D.SCRTLicenseType.LICENSE_TYPE_TRIAL_EXPIRED;
        exports.updateLicenseDisplay(exports.getLicenseInfo(licenseContext2D), sciChartSurface2D, true, true);
    }
    const result3D = callbacks3D.setNewLicense3D(keyCode);
    if (result3D !== undefined) {
        requiresValidation = result3D.requiresValidation;
        trialExpired = result3D.trialExpired;
    }
    return { requiresValidation, trialExpired };
};
const insertedRules = new Dictionary_1.Dictionary();
const insertStyleSheetRule = (ruleName, ruleText) => {
    if (insertedRules.containsKey(ruleName))
        return;
    const sheets = document.styleSheets;
    if (sheets.length === 0) {
        const style = document.createElement("style");
        style.appendChild(document.createTextNode(""));
        document.head.appendChild(style);
    }
    const sheet = sheets[sheets.length - 1];
    // @ts-ignore
    const index = sheet.insertRule(ruleText, sheet.cssRules.length);
    insertedRules.add(ruleName, index);
};
const createCloseDivStyles = () => {
    insertStyleSheetRule("licenseModalClose", `.licenseModalClose {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
      }`);
    insertStyleSheetRule("licenseModalClose:hover", `.licenseModalClose:hover {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }`);
    insertStyleSheetRule("licenseModalClose:focus", `.licenseModalClose:focus {
        color: black;
        text-decoration: none;
        cursor: pointer;
      }`);
};
const createLicenseModal = (message, postFormMessage) => {
    licenseModal = document.createElement("div");
    licenseModal.id = "scichartLicenseModal";
    licenseModal.style.display = "none"; /* Hidden by default */
    licenseModal.style.position = "fixed"; /* Stay in place */
    licenseModal.style.zIndex = "100"; /* Sit on top */
    licenseModal.style.left = "0";
    licenseModal.style.top = "0";
    licenseModal.style.width = "100%"; /* Full width */
    licenseModal.style.height = "100%"; /* Full height */
    licenseModal.style.overflow = "auto"; /* Enable scroll if needed */
    licenseModal.style.backgroundColor = "rgb(0,0,0)"; /* Fallback color */
    licenseModal.style.backgroundColor = "rgba(0,0,0,0.4)"; /* Black w/ opacity */
    const modalContent = document.createElement("div");
    modalContent.style.backgroundColor = "#fefefe";
    modalContent.style.position = "absolute";
    modalContent.style.left = "50%";
    modalContent.style.top = "50%";
    modalContent.style.transform = "translate(-50%, -50%)";
    modalContent.style.borderRadius = "4px";
    modalContent.style.padding = "20px";
    modalContent.style.maxWidth = "460px";
    licenseModal.appendChild(modalContent);
    const modalContentForm = document.createElement("div");
    modalContentForm.style.display = "block";
    modalContent.appendChild(modalContentForm);
    const modalContentMessage = document.createElement("div");
    modalContentMessage.style.display = "none";
    modalContent.appendChild(modalContentMessage);
    openLicenseModal = () => {
        licenseModal.style.display = "block";
        modalContentForm.style.display = "block";
        modalContentMessage.style.display = "none";
    };
    const modalHeader = document.createElement("div");
    modalHeader.style.display = "flex";
    modalHeader.style.padding = "8px 16px";
    modalHeader.style.backgroundColor = "#5cb85c";
    modalHeader.style.color = "white";
    modalContentForm.appendChild(modalHeader);
    const modalHeaderTitle = document.createElement("div");
    modalHeaderTitle.style.flexGrow = "1";
    modalHeaderTitle.innerHTML = message;
    modalHeader.appendChild(modalHeaderTitle);
    createCloseDivStyles();
    const closeDiv = document.createElement("span");
    closeDiv.innerHTML = "&times;";
    closeDiv.className = "licenseModalClose";
    modalHeader.appendChild(closeDiv);
    const modalInfo = document.createElement("div");
    modalInfo.style.padding = "10px 26px 10px 16px";
    modalInfo.innerHTML = `<ol><li>If you have not done so already, download the SciChart Cross Platform Licensing Wizard for
    <a href="https://github.com/ABTSoftware/SciChart.LicenseWizard/releases/latest/download/SciChart-Licensing-Wizard.exe" download> Windows</a> or
    <a href="https://github.com/ABTSoftware/SciChart.LicenseWizard/releases/latest/download/SciChart-Licensing-Wizard.dmg" download> macOS</a></li>
    <li>Install it and sign in with your SciChart username and password</li>
    <li>Start a trial for SciChart Web</li>
    <li>This web page should pick up your license from the wizard in a few seconds, or refresh the page</li>`;
    modalContentForm.appendChild(modalInfo);
    const modalFooter = document.createElement("div");
    modalFooter.innerHTML = postFormMessage;
    modalFooter.style.padding = "8px 16px";
    modalFooter.style.backgroundColor = "#5cb85c";
    modalFooter.style.color = "white";
    modalContentForm.appendChild(modalFooter);
    // When the user clicks anywhere outside of the modal, close it
    window.onclick = (event) => {
        if (event.target === licenseModal) {
            licenseModal.style.display = "none";
        }
    };
    const oldModal = document.getElementById(licenseModal.id);
    if (oldModal == null)
        document.body.appendChild(licenseModal);
    else
        document.body.replaceChild(licenseModal, oldModal);
    // When the user clicks on <div> (x), close the modal
    closeDiv.onclick = () => {
        licenseModal.style.display = "none";
    };
    return licenseModal;
};
const LICENSE_MSG_CLASS = "licenseMessage";
const LICENSE_MSG_CLASS_CHILD = "licenseMessageChild";
let licenseMessageDiv = null;
let licenseMessageDivChild = null;
const updateLicenseMessageDOM = (divContainer, licenseMsgDiv) => {
    const msgCloneOther = licenseMsgDiv.cloneNode(true);
    const lms = divContainer.getElementsByClassName(LICENSE_MSG_CLASS);
    if (lms.length > 0) {
        const lm = lms[0];
        divContainer.replaceChild(msgCloneOther, lm);
    }
    else {
        divContainer.appendChild(msgCloneOther);
    }
    if (useLicenseWizard)
        msgCloneOther.onclick = openLicenseModal;
};
exports.getLicenseInfo = (licenseContext) => {
    const sclt = licenseContext.SCRTCredentials.GetLicenseType();
    let licenseType = licensingClasses_1.LicenseType.NoLicense;
    switch (sclt) {
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_NO_LICENSE: {
            licenseType = licensingClasses_1.LicenseType.NoLicense;
            break;
        }
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_TRIAL: {
            licenseType = licensingClasses_1.LicenseType.Trial;
            break;
        }
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_FULL: {
            licenseType = licensingClasses_1.LicenseType.Full;
            break;
        }
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_FULL_EXPIRED: {
            licenseType = licensingClasses_1.LicenseType.Full_Expired;
            break;
        }
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_TRIAL_EXPIRED: {
            licenseType = licensingClasses_1.LicenseType.Trial_Expired;
            break;
        }
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_SUBSCRIPTION_EXPIRED: {
            licenseType = licensingClasses_1.LicenseType.Subscription_Expired;
            break;
        }
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_INVALID_DEVELOPER_LICENSE: {
            licenseType = licensingClasses_1.LicenseType.Invalid_Developer;
            break;
        }
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_REQUIRES_VALIDATION: {
            licenseType = licensingClasses_1.LicenseType.Requres_Validation;
            break;
        }
        case licenseContext.SCRTLicenseType.LICENSE_TYPE_INVALID_LICENSE: {
            licenseType = licensingClasses_1.LicenseType.Invalid;
            break;
        }
    }
    const daysRemaining = licenseContext.SCRTCredentials.GetLicenseDaysRemaining();
    debug(licenseContext.SCRTCredentials.Dump());
    debug("If this is not the license you were expecting, clear cookies and reload");
    const error = licenseContext.SCRTCredentials.GetLicenseErrors();
    return { licenseType, daysRemaining, error };
};
let licenseType2D;
let licenseType3D;
let previousCheckStatus;
const updateLicenseDisplayInternal = (licenseInfo, sciChartSurface, is2D, applyToOther) => {
    if (licenseMessageDiv == null) {
        licenseMessageDiv = document.createElement("div");
        licenseMessageDiv.className = LICENSE_MSG_CLASS;
        licenseMessageDivChild = document.createElement("div");
        licenseMessageDivChild.className = LICENSE_MSG_CLASS_CHILD;
        licenseMessageDivChild.innerHTML = "";
        licenseMessageDiv.appendChild(licenseMessageDivChild);
    }
    let premsg = "";
    let chartmsg = "";
    let postMsg = "";
    const { licenseType, daysRemaining, error } = licenseInfo;
    if ((is2D && licenseType !== licenseType2D) ||
        (!is2D && licenseType !== licenseType3D) ||
        checkStatus !== previousCheckStatus) {
        previousCheckStatus = checkStatus;
        if (is2D)
            licenseType2D = licenseType;
        else
            licenseType3D = licenseType;
        // if (licenseType === LicenseType.Trial || licenseType === LicenseType.Full)
        //    checkStatus = LicenseCheckStatus.LicenseOK;
        debug(`${is2D ? "2D" : "3D"} license status changed`);
        sciChartSurface.invalidateElement();
        sciChartSurface.otherSurfaces.map(s => s.invalidateElement());
        // Update license message text
        const licensingLink = `<a href="https://www.scichart.com/licensing-scichart"  target="_blank" style="color: white">www.scichart.com/licensing-scichart</a>`;
        const contactSupportLink = `<a href="https://www.scichart.com/contact-us/"  target="_blank" style="color: orange">contact support</a>`;
        if (licenseType === licensingClasses_1.LicenseType.NoLicense) {
            premsg = `You need to have a license to use SciChart.  `;
            postMsg = `Instructions can be seen at ${licensingLink}`;
        }
        else if (licenseType === licensingClasses_1.LicenseType.Invalid) {
            if (error.startsWith("License is not valid for this domain"))
                premsg = `Sorry! Your license key is invalid for this domain</br>Please ${contactSupportLink} with your OrderID if you believe this to be incorrect.`;
            else
                premsg = `Sorry! Your license key appears to be invalid</br>Please ${contactSupportLink} with your OrderID if you believe this to be incorrect.`;
            postMsg = `Instructions can be seen at ${licensingLink}`;
        }
        else if (licenseType === licensingClasses_1.LicenseType.Invalid_Developer) {
            premsg = `Sorry! You need a developer license to use SciChart on a domain not included in your runtime key.`;
            postMsg = `Instructions can be seen at ${licensingLink}</br>
                    Please ${contactSupportLink} with your OrderID if you are experiencing issues.`;
        }
        else if (licenseType === licensingClasses_1.LicenseType.Requres_Validation) {
            if (isDev) {
                premsg = `Your developer license must be validated by the SciChart Licensing Wizard running locally`;
            }
            else {
                premsg = `This runtime key must be validated by a server side key.`;
            }
            postMsg = `Instructions can be seen at ${licensingLink}</br>
                    Please ${contactSupportLink} with your OrderID if you are experiencing issues.`;
        }
        else if (licenseType === licensingClasses_1.LicenseType.Subscription_Expired) {
            premsg = "Sorry! Your support subscription has expired.<br>";
            postMsg = `Please ${contactSupportLink} us if you would like to renew your subscription.`;
        }
        else if (licenseType === licensingClasses_1.LicenseType.Trial_Expired) {
            premsg = `Sorry! Your trial has expired.`;
            postMsg = `Please ${contactSupportLink} if you require an extension.`;
        }
        else if (licenseType === licensingClasses_1.LicenseType.Trial && daysRemaining <= 7) {
            premsg = `You have ${daysRemaining} day${daysRemaining === 1 ? "" : "s"} remaining of the trial.`;
        }
        else if (licenseType === licensingClasses_1.LicenseType.Full || (licenseType === licensingClasses_1.LicenseType.Trial && daysRemaining > 7)) {
            licenseMessageDiv.style.display = "none";
            licenseMessageDivChild.innerHTML = "";
        }
        if (checkStatus !== licensingClasses_1.LicenseCheckStatus.LicenseOK) {
            if (checkStatus === licensingClasses_1.LicenseCheckStatus.FetchingFromServer)
                chartmsg = `<br>Fetching license from server...`;
            if (checkStatus === licensingClasses_1.LicenseCheckStatus.LookingForLicenseWizard)
                chartmsg = `<br>Looking for Licensing Wizard...  <u>Please run it or click for download and installation instructions</u>.`;
            else if (checkStatus === licensingClasses_1.LicenseCheckStatus.FailedToFindLicenseWizard)
                if (isDev) {
                    chartmsg = `<br><u>Could not connect to the Licensing Wizard.  Please run it or click for download and installation instructions, then reload this page.</u>`;
                }
                else {
                    chartmsg = `<br><u>Could not connect to the server licensing endpoint</u>`;
                }
            else if (checkStatus === licensingClasses_1.LicenseCheckStatus.ValidatingDeveloperLicense)
                if (isDev) {
                    chartmsg = `<br><u>Trying to validate your license...  Please run the Licensing Wizard or click for download and installation instructions</u>.`;
                }
                else {
                    chartmsg = `<br><u>Trying to validate your license with the server...</u>.`;
                }
            else if (checkStatus === licensingClasses_1.LicenseCheckStatus.FailedToValidateDeveloperLicense)
                if (isDev) {
                    chartmsg = `<br><u>Failed to validate your developer license with the Licensing Wizard.  If you have changed your activated license, try clearing your cookies for this site.</u>.`;
                }
                else {
                    chartmsg = `<br><u>Failed to validate the runtime license with the server</u>.`;
                }
            else if (checkStatus === licensingClasses_1.LicenseCheckStatus.NoLicenseInWizard && licenseType === licensingClasses_1.LicenseType.NoLicense)
                chartmsg = `<br><u>Please use the Licensing wizard to start a trial or activate a serial key.  Click for more information</u>.`;
            else if (checkStatus === licensingClasses_1.LicenseCheckStatus.DevKeyInRuntimeKey)
                chartmsg = `<br><u>You have set a developer key as a runtime key, which will not work on any other machine.  Click for more information</u>`;
            // tslint:disable-next-line: max-line-length
            else if (checkStatus === licensingClasses_1.LicenseCheckStatus.NoLicenseInWizard &&
                licenseType === licensingClasses_1.LicenseType.Trial_Expired) {
                chartmsg = `<br><u>Please activate a serial key in the Licensing Wizard, or contact sales for an extension.  Click for more information</u>.`;
            }
            if (premsg) {
                licenseMessageDiv.style.width = "100%";
                licenseMessageDiv.style.height = "100%";
                licenseMessageDiv.style.position = "absolute";
                licenseMessageDiv.style.pointerEvents = "auto";
                licenseMessageDiv.style.cursor = "pointer";
                licenseMessageDiv.style.background = Color_1.EColor.BackgroundColor;
                licenseMessageDiv.style.zIndex = "10";
                licenseMessageDivChild.style.display = "block";
                licenseMessageDivChild.style.color = "orange";
                licenseMessageDivChild.style.width = "80%";
                licenseMessageDivChild.style.position = "absolute";
                licenseMessageDivChild.style.left = "50%";
                licenseMessageDivChild.style.top = "50%";
                licenseMessageDivChild.style.transform = "translate(-50%, -50%)";
                licenseMessageDivChild.style.textAlign = "center";
                licenseMessageDivChild.style.pointerEvents = "auto";
                if (useLicenseWizard) {
                    licenseMessageDivChild.innerHTML = premsg + chartmsg;
                    createLicenseModal(premsg, postMsg);
                }
                else {
                    licenseMessageDivChild.innerHTML = premsg + `<br><a href="https://github.com/ABTSoftware/SciChart.JS.Examples/blob/master/README-BetaTesters.md"  target="_blank" style="color: white">Click here for a beta trial key and instructions</a>`;
                }
            }
        }
    }
    updateLicenseMessageDOM(sciChartSurface.domDivContainer, licenseMessageDiv);
    if (applyToOther) {
        sciChartSurface.otherSurfaces.forEach(element => {
            updateLicenseMessageDOM(element.domDivContainer, licenseMessageDiv);
        });
    }
};
exports.updateLicenseDisplay = (licenseInfo, sciChartSurface, is2D, applyToOther) => licenseDependencies.updateLicenseDisplay(licenseInfo, sciChartSurface, is2D, applyToOther);
exports.licenseManager = {
    setRuntimeLicenseKey: (value) => exports.setRuntimeLicenseKey(value),
    setLicenseCallback: (callback) => exports.setLicenseCallback(callback),
    setServerLicenseEndpoint: (value) => setServerLicenseEndpoint(value),
    applyLicense2D: (licenseContext, sciChartSurface, isSingle) => applyLicense2D(licenseContext, sciChartSurface, isSingle)
};
