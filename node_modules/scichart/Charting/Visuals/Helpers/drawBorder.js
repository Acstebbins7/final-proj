"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.drawBorder = void 0;
const createNativeRect_1 = require("./createNativeRect");
exports.drawBorder = (renderContext, webAssemblyContext2D, solidBrushCacheBorder, borderRect, leftBorder, topBorder, rightBorder, bottomBorder, color) => {
    if (bottomBorder === 0 && topBorder === 0 && leftBorder === 0 && rightBorder === 0) {
        return;
    }
    const solidBrush = solidBrushCacheBorder.newBrush(color, true);
    const vecRects = new webAssemblyContext2D.VectorRectVertex();
    vecRects.push_back(createNativeRect_1.createNativeRect(webAssemblyContext2D, borderRect.x, borderRect.y - topBorder, borderRect.x + borderRect.width + rightBorder, borderRect.y));
    vecRects.push_back(createNativeRect_1.createNativeRect(webAssemblyContext2D, borderRect.x + borderRect.width, borderRect.y, borderRect.x + borderRect.width + rightBorder, borderRect.y + borderRect.height + bottomBorder));
    vecRects.push_back(createNativeRect_1.createNativeRect(webAssemblyContext2D, borderRect.x - leftBorder, borderRect.y + borderRect.height, borderRect.x + borderRect.width, borderRect.y + borderRect.height + bottomBorder));
    vecRects.push_back(createNativeRect_1.createNativeRect(webAssemblyContext2D, borderRect.x - leftBorder, borderRect.y - topBorder, borderRect.x, borderRect.y + borderRect.height));
    renderContext.drawRects(vecRects, solidBrush, 0, 0);
    vecRects.delete();
};
