import { EventHandler } from "../../Core/EventHandler";
import { IDeletable } from "../../Core/IDeletable";
import { MouseManager } from "../../Core/Mouse/MouseManager";
import { ObservableArray } from "../../Core/ObservableArray";
import { PropertyChangedEventArgs } from "../../Core/PropertyChangedEventArgs";
import { Rect } from "../../Core/Rect";
import { TSciChart } from "../../types/TSciChart";
import { TSciChart3D } from "../../types/TSciChart3D";
import { TSciChartSurfaceCanvases } from "../../types/TSciChartSurfaceCanvases";
import { IChartModifierBase } from "../ChartModifiers/ChartModifierBase";
import { ChartModifierBase2D } from "../ChartModifiers/ChartModifierBase2D";
import { IThemeable } from "../Themes/IThemeable";
import { IThemeProvider } from "../Themes/IThemeProvider";
import { ISuspendable, IUpdateSuspender } from "./UpdateSuspender";
export declare type TSciChartDestination = {
    canvasElementId: string;
    width: number;
    height: number;
    sciChartSurface: SciChartSurfaceBase;
};
export declare type TSciChartConfig = {
    wasmUrl?: string;
    dataUrl?: string;
};
/**
 * @summary Defines the interface to a 2D Cartesian {@link SciChartSurface} or 3D Cartesian  {@link SciChart3DSurface} within SciChart -
 * High Performance Realtime {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * See derived types {@link SciChartSurface} (2D Charts) and {@link SciChart3DSurface} (3D Charts) for more specific instructions on how
 * to use the SciChartSurface and create a 2D or 3D {@link https://www.scichart.com/javascript-chart-features | JavaScript Chart}
 */
export interface ISciChartSurfaceBase extends IDeletable, IThemeable {
    readonly domCanvas2D: HTMLCanvasElement;
    readonly themeProvider: IThemeProvider;
    /**
     * Changes the Viewport Size of the {@link SciChartSurfaceBase}
     * @param width
     * @param height
     */
    changeViewportSize(width: number, height: number): void;
}
/**
 * Enum constants to specify SciChartSurface type
 */
export declare enum ESurfaceType {
    /**
     * A 2D Cartesian {@link SciChartSurface}
     */
    SciChartSurfaceType = "SciChartSurfaceType",
    /**
     * A 3D Cartesian {@link SciChart3DSurface}
     */
    SciChart3DSurfaceType = "SciChart3DSurfaceType"
}
/**
 * @summary The base class for a 2D Cartesian {@link SciChartSurface} or 3D Cartesian {@link SciChart3DSurface} within SciChart -
 * High Performance Realtime {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * See derived types {@link SciChartSurface} (2D Charts) and {@link SciChart3DSurface} (3D Charts) for more specific instructions on how
 * to use the SciChartSurface and create a 2D or 3D {@link https://www.scichart.com/javascript-chart-features | JavaScript Chart}
 */
export declare abstract class SciChartSurfaceBase implements ISciChartSurfaceBase, ISuspendable {
    /**
     * Sets the runtime license key.  Use for full licenses or trials only, not developer licenses.
     * @param keyCode
     */
    static setRuntimeLicenseKey(keyCode: string): void;
    /**
     * Sets the endpoint for validating a runtime license key with the server.  Must be a relative path.
     * @default api/license
     * @param endpoint
     */
    static setServerLicenseEndpoint(endpoint: string): void;
    /**
     * Sets function that will be called by the framework to validate a runtime license from the server,
     * if you need to add additional handling, such as custom authentication.
     * The request sent to the server must include the queryString section passed in, which does not come with a leading ?
     * @param callback
     */
    static setLicenseCallback(callback: (queryString: string) => Promise<Response>): void;
    /**
     * A propertyChanged EventHandler. See {@link EventHandler} for how to subscribe to and be
     * notified when a property changes on the {@link SciChartSurfaceBase}
     */
    readonly propertyChanged: EventHandler<PropertyChangedEventArgs>;
    /**
     * An {@link ObservableArray} of {@link IChartModifierBase} derived types. Chart Modifiers provide behavior such as zooming, panning,
     * tooltips, legends and more in SciChart's High Performance Realtime
     * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}.
     * You can use our built in modifiers (see derived types of {@link ChartModifierBase}, or create your own for custom interaction behavior.
     */
    readonly chartModifiers: ObservableArray<IChartModifierBase>;
    /**
     * The {@link HTMLDivElement} which is the dom chart root
     */
    readonly domChartRoot: HTMLDivElement;
    /**
     * The {@link HTMLCanvasElement} which is the WebGL canvas that SciChart draws to
     */
    readonly domCanvasWebGL: HTMLCanvasElement;
    /**
     * The {@link HTMLCanvasElement} which is the HTML5 canvas which SciChart draws overlays (cursors, tooltips) to
     */
    readonly domCanvas2D: HTMLCanvasElement;
    /**
     * The {@link SVGSVGElement} which is the SVG canvas which SciChart adds elements (tooltips, annotations) to
     */
    readonly domSvgContainer: SVGSVGElement;
    /**
     * The {@link SVGSVGElement} which is the SVG adorner layer canvas, is used for annotation adorners
     */
    readonly domSvgAdornerLayer: SVGSVGElement;
    /**
     * The inner {@link HTMLDivElement} div element
     */
    readonly domDivContainer: HTMLDivElement;
    /**
     * The master WebGL canvas
     */
    readonly domMasterCanvas: HTMLCanvasElement;
    /**
     * The {@link MouseManager} subscribes to mouse events on the {@link domChartRoot} and routes them to components within SciChart
     */
    readonly mouseManager: MouseManager;
    /**
     * The {@link IThemeProvider} provides colors, brushes and theme information for the current {@link SciChartSurfaceBase}
     */
    protected destinations: TSciChartDestination[];
    protected themeProviderProperty: IThemeProvider;
    protected previousThemeProviderProperty: IThemeProvider;
    protected isInitializedProperty: boolean;
    protected isDeletedProperty: boolean;
    protected backgroundProperty: string;
    private readonly sharedWasmContext;
    private readonly suspendableIdProperty;
    private seriesViewRectProperty;
    private isAlphaEnabledProperty;
    /**
     * Creates an instance of a SciChartSurfaceBase
     * @param webAssemblyContext  The {@link TSciChart | SciChart 2D WebAssembly Context} or {@link TSciChart | SciChart 3D WebAssembly Context}
     * containing native methods and access to our WebGL2 WebAssembly Rendering Engine
     * @param canvases A list of {@link TSciChartSurfaceCanvases} to draw to
     * @param masterCanvasId The master canvas id
     */
    protected constructor(webAssemblyContext: TSciChart | TSciChart3D, canvases: TSciChartSurfaceCanvases, masterCanvasId: string);
    /**
     * Gets or sets the SciChartSurface Background as an HTML color code
     */
    get background(): string;
    /**
     * Gets or sets the SciChartSurface Background as an HTML color code
     */
    set background(background: string);
    /**
     * Used internally, updates background ater switching beetween different SciChartSurfaces
     */
    updateBackground(): void;
    /**
     * Gets or sets the SciChartSurface Chart Background with Alpha value
     */
    get backgroundCompletelyTransparentEnabled(): boolean;
    /**
     * Gets or sets the SciChartSurface Chart Background with Alpha value
     */
    set backgroundCompletelyTransparentEnabled(alphaEnabled: boolean);
    /**
     * Gets the Surface Type. See {@link ESurfaceType} for list of values
     */
    abstract get surfaceType(): ESurfaceType;
    get isCopyCanvasSurface(): HTMLCanvasElement;
    /**
     * Gets the Series View {@link Rect}, a rectangle relative to the entire size of the {@link SciChartSurfaceBase}
     */
    get seriesViewRect(): Rect;
    /**
     * Used internally - gets other SciChartSurfaces
     */
    get otherSurfaces(): SciChartSurfaceBase[];
    /**
     * Used internally - gets isInitialized flag
     */
    get isInitialized(): boolean;
    /**
     * Used internally - gets isDeleted flag
     */
    get isDeleted(): boolean;
    /**
     * @inheritDoc
     */
    get isSuspended(): boolean;
    /**
     * @inheritDoc
     */
    get suspendableId(): string;
    /**
     * @inheritDoc
     */
    decrementSuspend(): void;
    /**
     * @inheritDoc
     */
    resumeUpdates(suspender: IUpdateSuspender): void;
    /**
     * @inheritDoc
     */
    suspendUpdates(): IUpdateSuspender;
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * Used internally - gets the previous {@link IThemeProvider}
     */
    get themeProvider(): IThemeProvider;
    /**
     * Used internally - gets the previous {@link IThemeProvider}
     */
    get previousThemeProvider(): IThemeProvider;
    /**
     * @inheritDoc
     */
    delete(): void;
    /**
     * Call invalidateElement() to trigger a redraw of the {@link SciChartSurfaceBase}. SciChart's WebGL WebAssembly rendering
     * engine will schedule a redraw a the next time the renderer is free.
     */
    abstract invalidateElement(): void;
    getMainCanvas(): HTMLCanvasElement;
    /**
     * Sets the Series View {@link Rect}, a rectangle relative to the entire size of the {@link SciChartSurfaceBase}
     * @param seriesViewRect a {@link Rect} which defines the portion of the view for drawing series
     */
    setSeriesViewRect(seriesViewRect: Rect): void;
    /**
     * Changes the Viewport Size of the {@link SciChartSurfaceBase}
     * @param width
     * @param height
     */
    abstract changeViewportSize(width: number, height: number): void;
    /**
     * Used internally - sets destinations
     */
    setDestinations(destinations: TSciChartDestination[]): void;
    /**
     * Used internally, the flag is set after {@link SciChartSurfaceBase} is initialized
     */
    setIsInitialized(): void;
    /**
     * Used internally - updates watermark
     */
    abstract updateWatermark(left: number, bottom: number): void;
    /**
     * Detaches a {@link ChartModifierBase2D} from the {@link SciChartSurfaceBase}
     * @param chartModifier
     */
    protected detachChartModifier(chartModifier: ChartModifierBase2D): void;
    /**
     * Attaches a {@link ChartModifierBase2D} to the {@link SciChartSurfaceBase}
     * @param chartModifier
     */
    protected attachChartModifier(chartModifier: IChartModifierBase): void;
    /**
     * @summary Notifies subscribers of {@link SciChartSurfaceBase.propertyChanged} that a property has changed and the chart requires redrawing
     * @description SciChart provides fully reactive components, changing any property or changing data will cause the {@link SciChartSurfaceBase} to
     * redraw where necessary. This method notifies subscribers of the {@link SciChartSurfaceBase.propertyChanged} {@link EventHandler}
     * that a property has changed.
     * @param propertyName The name of the property which has changed
     */
    protected notifyPropertyChanged(propertyName: string): void;
    /**
     * When overridden in a derived type, applies an HTML color code to surface background
     * @param htmlColor The HTML color code
     * @param alphaEnabled
     */
    protected abstract applySciChartBackground(htmlColor: string, alphaEnabled?: boolean): void;
    /**
     * Changes the size of the DOM element where the {@link SciChartSurfaceBase} resides.
     * @param width
     * @param height
     */
    protected changeDomViewportSize(width: number, height: number): void;
    protected changeMasterCanvasViewportSize(width: number, height: number): void;
}
export declare const createChartDestination: (canvasId: string) => {
    canvas: HTMLCanvasElement;
    GetHeight(): any;
    GetWidth(): any;
    GetID(): any;
};
export declare const getMasterCanvas: (canvasElementId: string) => HTMLCanvasElement;
export declare const copyToCanvas: (masterCanasId: string) => (destinationId: string) => void;
/** @ignore */
export declare const getLocateFile: (sciChartConfig: TSciChartConfig) => (path: string, prefix: string) => string;
