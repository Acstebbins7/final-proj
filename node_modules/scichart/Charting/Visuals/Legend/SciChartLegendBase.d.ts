import { IDeletable } from "../../../Core/IDeletable";
import { Rect } from "../../../Core/Rect";
import { ISciChartSurfaceBase } from "../SciChartSurfaceBase";
/**
 * Enumeration constants to define legend orientation
 */
export declare enum ELegendOrientation {
    Vertical = 0,
    Horizontal = 1
}
/**
 * Enumeration constants to define legend placement
 */
export declare enum ELegendPlacement {
    TopLeft = 0,
    TopRight = 1,
    BottomLeft = 2,
    BottomRight = 3
}
/**
 * Base class for legends in the SciChart library
 */
export declare abstract class SciChartLegendBase implements IDeletable {
    protected rootDiv: HTMLDivElement;
    protected div: HTMLDivElement;
    protected seriesViewRect: Rect;
    protected invalidateParentSurface: () => void;
    protected orientationProperty: ELegendOrientation;
    protected showLegendProperty: boolean;
    protected placementProperty: ELegendPlacement;
    protected marginProperty: number;
    protected isDirty: boolean;
    protected parentSurfaceProperty: ISciChartSurfaceBase;
    /**
     * @inheritDoc
     */
    abstract applyTheme(): void;
    setInvalidateParentSurface(value: () => void): void;
    /**
     * Set the root div in HTML where the legend will be placed
     * @param rootDivProperty
     */
    setRootDiv(rootDivProperty: HTMLDivElement): void;
    /**
     * Set the series view rect - a rectangle defining where on the parent chart the legend is shown
     * @param seriesViewRect
     */
    setSeriesViewRect(seriesViewRect: Rect): void;
    /**
     * Sets the parent {@link ISciChartSurfaceBase}
     */
    setParentSurface(scs: ISciChartSurfaceBase): void;
    /**
     * Update the legend
     */
    update(): void;
    /**
     * Invalidate the legend, hinting a redraw is needed
     */
    invalidateLegend(): void;
    /**
     * Gets and sets the legend orientation. See {@link ELegendOrientation} for a list of values
     */
    get orientation(): ELegendOrientation;
    /**
     * Gets and sets the legend orientation. See {@link ELegendOrientation} for a list of values
     */
    set orientation(orientation: ELegendOrientation);
    /**
     * When true, the legend is shown, else it is hidden
     */
    get showLegend(): boolean;
    /**
     * When true, the legend is shown, else it is hidden
     */
    set showLegend(value: boolean);
    /**
     * Gets or sets the legend placement. See {@link ELegendPlacement} for a list of values
     */
    get placement(): ELegendPlacement;
    /**
     * Gets or sets the legend placement. See {@link ELegendPlacement} for a list of values
     */
    set placement(value: ELegendPlacement);
    /**
     * Gets or sets the margin in pixels
     */
    get margin(): number;
    /**
     * Gets or sets the margin in pixels
     */
    set margin(value: number);
    /**
     * @inheritDoc
     */
    delete(): void;
    /**
     * Notifies listeners of {@link invalidateParentSurface} that a property has changed
     */
    protected notifyPropertyChanged(): void;
    /**
     * Creates the legend in the DOM
     */
    protected create(): void;
    /**
     * Gets the HTML to place inside the legend, for example could be several rows of series names, markers
     */
    protected abstract getLegendHtml(): string;
    /**
     * When overridden in a derived class, will be called when its time to add event listeners to series
     */
    protected abstract addEventListeners(): void;
}
export declare const calcLegendPosition: (seriesViewRect: Rect, div: Rect, margin: number, placement: ELegendPlacement) => {
    left: number;
    top: number;
};
