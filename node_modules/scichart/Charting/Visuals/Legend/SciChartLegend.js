"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SciChartLegend = void 0;
const SciChartLegendBase_1 = require("./SciChartLegendBase");
/**
 * The SciChartLegend displays a legend on the chart at top,left,bottom,right location and with customisable legend rows
 */
class SciChartLegend extends SciChartLegendBase_1.SciChartLegendBase {
    constructor() {
        super(...arguments);
        this.showCheckboxesProperty = false;
        this.showSeriesMarkersProperty = true;
    }
    /**
     * @inheritDoc
     */
    applyTheme() {
        // TODO: add light theme
    }
    /**
     * Gets or sets whether series visibility checkboxes should be shown
     */
    get showCheckboxes() {
        return this.showCheckboxesProperty;
    }
    /**
     * Gets or sets whether series visibility checkboxes should be shown
     */
    set showCheckboxes(value) {
        this.showCheckboxesProperty = value;
        this.notifyPropertyChanged();
    }
    /**
     * Gets or sets whether series markers should be shown
     */
    get showSeriesMarkers() {
        return this.showSeriesMarkersProperty;
    }
    /**
     * Gets or sets whether series markers should be shown
     */
    set showSeriesMarkers(value) {
        this.showSeriesMarkersProperty = value;
        this.notifyPropertyChanged();
    }
    /**
     * Sets the array of RenderableSeries to display in the legend
     * @param renderableSeriesArray The array of series
     * @remarks see {@link SciChartSurface.renderableSeries} which is the source for this array
     */
    setRenderableSeriesArray(renderableSeriesArray) {
        const regularSeries = renderableSeriesArray.filter(el => !el.isStacked);
        const stackedSeries = renderableSeriesArray.filter(el => el.isStacked);
        const allSeries = regularSeries;
        stackedSeries.forEach(el => {
            el.asArray().forEach(rs => allSeries.push(rs));
        });
        this.renderableSeriesArray = allSeries;
        this.invalidateLegend();
    }
    /**
     * @inheritDoc
     */
    addEventListeners() {
        this.renderableSeriesArray.forEach(rs => addEventListenerToSeries(rs));
    }
    /**
     * @inheritDoc
     */
    getLegendHtml() {
        let htmlString = "";
        this.renderableSeriesArray.forEach((rs, index) => {
            // TODO: Stocked charts
            const name = rs.getDataSeriesName() || `Series ${index + 1}`;
            const id = rs.id;
            let str = `<div style="display: flex; margin-right: 4px;">`;
            if (this.showCheckboxes) {
                str += `<input ${rs.isVisible ? "checked" : ""} type="checkbox" id="${id}" name="${name}" value="${name}">`;
            }
            if (this.showSeriesMarkers) {
                const color = rs.isStacked ? rs.fill : rs.stroke;
                str += `<label for="${id}" style="width: 30px; background-color: ${color}; margin: 4px"></label>`;
            }
            str += `<label for="${id}" style="margin-left: 4px">${name}</label></div>`;
            htmlString += str;
        });
        return htmlString;
    }
}
exports.SciChartLegend = SciChartLegend;
/** @ignore */
const addEventListenerToSeries = (rs) => {
    const el = document.getElementById(rs.id);
    if (el) {
        // @ts-ignore
        el.addEventListener("change", e => (rs.isVisible = e.target.checked));
    }
};
/** @ignore */
const removeEventListenerFromSeries = (renderableSeriesId) => {
    // TODO: to think about how to remove event listeners when removing series
};
