"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SciChartPieLegend = void 0;
const SciChartPieSurface_1 = require("../SciChartPieSurface/SciChartPieSurface");
const SciChartLegendBase_1 = require("./SciChartLegendBase");
/**
 * A legend specific to pie and donut chart types. Inherits {@link SciChartLegendBase}
 */
class SciChartPieLegend extends SciChartLegendBase_1.SciChartLegendBase {
    constructor() {
        super(...arguments);
        this.animate = true;
        this.showCheckboxesProperty = false;
        this.showSeriesMarkersProperty = true;
    }
    /**
     * Gets or sets whether series visibility checkboxes should be shown
     */
    get showCheckboxes() {
        return this.showCheckboxesProperty;
    }
    /**
     * Gets or sets whether series visibility checkboxes should be shown
     */
    set showCheckboxes(value) {
        this.showCheckboxesProperty = value;
        this.notifyPropertyChanged();
    }
    /**
     * Gets or sets whether series markers should be shown
     */
    get showSeriesMarkers() {
        return this.showSeriesMarkersProperty;
    }
    /**
     * Gets or sets whether series markers should be shown
     */
    set showSeriesMarkers(value) {
        this.showSeriesMarkersProperty = value;
        this.notifyPropertyChanged();
    }
    /**
     * @inheritDoc
     */
    applyTheme() {
        // TODO: add light theme
    }
    /**
     * Sets the array of pie segments to display in the legend
     * @param pieSegmentArray The Pie segment array
     * @remarks See {@link SciChartPieSurface.pieSegments} which is the source for this array
     */
    setPieSegmentArray(pieSegmentArray) {
        this.pieSegmentArray = pieSegmentArray;
    }
    /**
     * @inheritDoc
     */
    update() {
        if (this.div) {
            this.delete();
        }
        if (this.showLegend) {
            this.create();
        }
    }
    /**
     * @inheritDoc
     */
    addEventListeners() {
        this.pieSegmentArray.forEach(ps => {
            const el = document.getElementById(getCheckboxId(ps.id));
            SciChartPieSurface_1.addEventListenerToPieSegment(ps, el, this.animate);
        });
    }
    /**
     * @inheritDoc
     */
    getLegendHtml() {
        let htmlString = "";
        this.pieSegmentArray.forEach((ps, index) => {
            const name = ps.text || `Segment ${index + 1}`;
            const checkboxId = getCheckboxId(ps.id);
            let str = `<div style="display: flex; margin-right: 4px;">`;
            if (this.showCheckboxes) {
                str += `<input ${ps.isSelected ? "checked" : ""} type="checkbox" id="${checkboxId}" name="${name}" value="${name}">`;
            }
            if (this.showSeriesMarkers) {
                const hasGradient = !!ps.colorLinearGradient;
                if (hasGradient) {
                    let colorsStr = "";
                    ps.colorLinearGradient.gradientStops.forEach(s => {
                        colorsStr += `,${s.color}`;
                    });
                    str += `<label for="${checkboxId}" style="width: 30px; background-image: linear-gradient(to right${colorsStr}); margin: 4px"></label>`;
                }
                else {
                    str += `<label for="${checkboxId}" style="width: 30px; background-color: ${ps.color}; margin: 4px"></label>`;
                }
            }
            str += `<label for="${checkboxId}" style="margin-left: 4px">${name}</label></div>`;
            htmlString += str;
        });
        return htmlString;
    }
}
exports.SciChartPieLegend = SciChartPieLegend;
/** @ignore */
const getCheckboxId = (pieSegmentId) => `check${pieSegmentId}`;
/** @ignore */
const removeEventListenerFromSeries = (renderableSeriesId) => {
    // TODO: to think about how to remove event listeners when removing series
};
