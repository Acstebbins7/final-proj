import { TEasing } from "../../../Core/Animations/EasingFunctions";
import { Dictionary } from "../../../Core/Dictionary";
import { NumberRange } from "../../../Core/NumberRange";
import { Rect } from "../../../Core/Rect";
import { EAxisAlignment } from "../../../types/AxisAlignment";
import { TBorder } from "../../../types/TBorder";
import { SCRTPen, SCRTSolidBrush, TSciChart } from "../../../types/TSciChart";
import { WebGlRenderContext2D } from "../../Drawing/WebGlRenderContext2D";
import { IThemeable } from "../../Themes/IThemeable";
import { IThemeProvider } from "../../Themes/IThemeProvider";
import { SciChartSurface } from "../SciChartSurface";
import { AxisCore, TTextStyle } from "./AxisCore";
import { AxisLayoutState } from "./AxisLayoutState";
import { AxisRenderer } from "./AxisRenderer";
import { AxisTitleRenderer } from "./AxisTitleRenderer";
import { IAxisCoreOptions } from "./IAxisCoreOptions";
/**
 * Defines the clipping mode for scrolling operations found on {@link AxisBase2D.scroll}
 */
export declare enum EClipMode {
    /**
     * Do not clip when scrolling the Axis
     * @remarks
     * Use this to resolve issues such as scaling or stretching
     * when the user pans or scrolls outside of the range of the data.
     */
    None = 0,
    /**
     * Stretch the {@link AxisBase2D.visibleRange} when scrolling past the extents of the data.
     */
    StretchAtExtents = 1,
    /**
     * Clips the {@link AxisBase2D.visibleRange} to not allow scrolling past the minimum of the Axis range
     */
    ClipAtMin = 2,
    /**
     * Clips the {@link AxisBase2D.visibleRange} to not allow scrolling past the maximum of the Axis range
     */
    ClipAtMax = 3,
    /**
     * Clips the {@link AxisBase2D.visibleRange} to not allow scrolling past the minimum or maximum of the Axis range
     */
    ClipAtExtents = 4
}
/**
 * A type which contains info about major, minor tick coordinates, labels and values. Used when drawing the axis gridlines
 */
export declare type TTickObject = {
    /**
     * The major tick numeric values
     */
    majorTicks: number[];
    /**
     * The major tick label strings
     */
    majorTickLabels: string[];
    /**
     * The major tick coordinates
     */
    majorTickCoords: number[];
    /**
     * The minor tick numeric values
     */
    minorTicks: number[];
    /**
     * The minor tick coordinates
     */
    minorTickCoords: number[];
};
export interface IAxisBase2dOptions extends IAxisCoreOptions {
    visibleRangeLimit?: NumberRange;
    axisAlignment?: EAxisAlignment;
    labelStyle?: TTextStyle;
    axisBorder?: TBorder;
}
/**
 * The base class for 2D Chart Axis within SciChart - High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}.
 * @description
 * AxisBase2D is a base class for both 2D Axis types in SciChart. Concrete types include:
 *
 *  - {@link NumericAxis}: a Numeric 2D value-axis
 *  - {@link CategoryAxis}: A category 2D axis used for stock chart applications
 *
 *  Set axis on the {@link SciChartSurface.xAxes} or {@link SciChartSurface.yAxes} collections in 2D Charts.
 */
export declare abstract class AxisBase2D extends AxisCore implements IThemeable {
    /**
     * Gets the parent {@link SciChartSurface} that this axis is attached to
     */
    parentSurface: SciChartSurface;
    /**
     * Gets the {@link AxisRenderer} instance responsible for drawing the axis
     */
    readonly axisRenderer: AxisRenderer;
    /**
     * Gets the {@link AxisTitleRenderer} instance responsible for drawing the axis title
     */
    readonly axisTitleRenderer: AxisTitleRenderer;
    /**
     * Gets the {@link AxisLayoutState} class which manages layout
     */
    readonly axisLayoutState: AxisLayoutState;
    /**
     * Gets the {@link Rect | ViewRect} - a rectangle defining the location of the axis within the parent {@link SciChartSurface}
     */
    viewRect: Rect;
    /**
     * The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     */
    protected readonly webAssemblyContext2D: TSciChart;
    protected labelStyleProperty: TTextStyle;
    private axisAlignmentProperty;
    private isCenterAxisProperty;
    private visibleRangeLimitProperty;
    private isPrimaryAxisProperty;
    private penCacheForMajorGridLines;
    private penCacheForMinorGridLines;
    private penCacheForMajorTickLines;
    private penCacheForMinorTickLines;
    private solidBrushCacheAxisBands;
    private axisBorderProperty;
    private solidBrushCacheBorder;
    /**
     * Creates an instance of the {@link AxisBase2D}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IAxisBase2dOptions} used to configure the axis at instantiation time
     */
    protected constructor(webAssemblyContext: TSciChart, options?: IAxisBase2dOptions);
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * Gets whether the axis is currently horizontal or not
     */
    get isHorizontalAxis(): boolean;
    /**
     * Gets whether the axis is flipped or not
     */
    get isAxisFlipped(): boolean;
    /**
     * Gets or sets the Axis Alignment. See {@link EAxisAlignment} for a list of values
     * @remarks use this property to set whether the axis is on the Left, Right, Bottom Top of the chart.
     * SciChart also supports XAxis on the left and YAxis on the top to rotate / create vertical charts.
     */
    get axisAlignment(): EAxisAlignment;
    /**
     * Gets or sets the Axis Alignment. See {@link EAxisAlignment} for a list of values
     * @remarks use this property to set whether the axis is on the Left, Right, Bottom Top of the chart.
     * SciChart also supports XAxis on the left and YAxis on the top to rotate / create vertical charts.
     */
    set axisAlignment(axisAlignment: EAxisAlignment);
    /**
     * Gets or sets a property which limits {@link AxisCore.visibleRange}, meaning the chart cannot autorange outside that range
     */
    get visibleRangeLimit(): NumberRange;
    /**
     * Gets or sets a property which limits {@link AxisCore.visibleRange}, meaning the chart cannot autorange outside that range
     */
    set visibleRangeLimit(visibleRangeLimit: NumberRange);
    /**
     * Gets or sets whether this axis is the Primary axis on the chart
     * @remarks In SciChart 2D Charts, multiple X,Y Axis are supported, but only one can draw gridlines.
     * The primary axis is the one which draws the gridlines. By default, this is the first axis in the collection
     */
    get isPrimaryAxis(): boolean;
    /**
     * Gets or sets whether this axis is the Primary axis on the chart
     * @remarks In SciChart 2D Charts, multiple X,Y Axis are supported, but only one can draw gridlines.
     * The primary axis is the one which draws the gridlines. By default, this is the first axis in the collection
     */
    set isPrimaryAxis(value: boolean);
    /**
     * Gets whether the parent {@link SciChartSurface} is a vertical chart, when the XAxis is on the Left or Right,
     * and YAxis is on the Top or Bottom
     */
    get isVerticalChart(): boolean;
    /**
     * Gets or sets a {@link TTextStyle} object for styling axis labels
     */
    get labelStyle(): TTextStyle;
    /**
     * Gets or sets a {@link TTextStyle} object for styling axis labels
     */
    set labelStyle(textStyle: TTextStyle);
    /**
     * Gets or sets the Axis Border properties
     */
    get axisBorder(): TBorder;
    /**
     * Gets or sets the Axis Border properties
     */
    set axisBorder(border: TBorder);
    /**
     * Called internally - measures the axis as part of the layout phase
     */
    measure(): void;
    /**
     * Called internally - prepares render data before a draw operation
     */
    prepareRenderData(): void;
    /**
     * Called internally - draws the current axis using the {@link WebGL2RenderingContext}
     */
    draw(renderContext: WebGlRenderContext2D): void;
    /**
     * Function to draw axis areas with red color
     * @param renderContext
     */
    drawDebug(renderContext: WebGlRenderContext2D): void;
    /**
     * @inheritDoc
     */
    getDefaultNonZeroRange(): NumberRange;
    /**
     * @Summary Part of AutoRanging - Gets the maximum range on this axis
     * @description The getMaximumRange function computes the {@link visibleRange} min and max that this axis must
     * have to display all the data in the chart.
     */
    getMaximumRange(): NumberRange;
    /**
     * @summary Part of AutoRanging - gets the windowed maximum range for Y-Axes
     * @description Returns the max range only for that axis (by the data-series on it),
     * based on associated XAxis visible range of series on the same axis
     * @param xRanges (optional) if provided, we use previously calculated XAxis ranges
     * keyed by AxisId rather than calculate them again
     */
    getWindowedYRange(xRanges: Dictionary<NumberRange>): NumberRange;
    /**
     * Programmatically scrolls the axis by a number of pixels
     * @param pixelsToScroll The number of pixels to scroll
     * @param clipMode The clipping mode. See {@link EClipMode} for a list of values
     */
    scroll(pixelsToScroll: number, clipMode: EClipMode): boolean;
    /**
     * Programmatically zooms the axis by a min and max fraction
     * @param minFraction The Min fraction, e.g. 0.1 will zoom the lower part of the range 10%
     * @param maxFraction The Max fraction, e.g. 0.1 will zoom the upper part of the range 10%
     */
    zoomBy(minFraction: number, maxFraction: number): void;
    /**
     * @summary Programmatically zooms the axis with a from and to coordinate
     * @description Used by the {@link RubberBandXyZoomModifier}, which allows the user to draw a rectangle on the chart
     * to zoom in. The from / too coordinate are the x or y components of the rectangle corners used to zoom in
     * @param fromCoord a pixel coordinate to zoom from
     * @param toCoord a pixel coordinate to zoom to
     * @param duration The duration of animation in milliseconds. Pass 0 for no animation.
     * @param easingFunction An optional easing function passed to specify animation easing. See {@link TEasing} for a list of values
     */
    zoom(fromCoord: number, toCoord: number, duration?: number, easingFunction?: TEasing): void;
    /**
     * @inheritDoc
     */
    delete(): void;
    /**
     * Returns the max size for major/minor ticks. Used in layout and passed to AxisRenderer
     * @protected
     */
    protected getTicksMaxSize(): number;
    /**
     * When true, the axis is valid for drawing
     */
    protected getIsValidForDrawing(): boolean;
    /**
     * Called internally - draws the Axis Bands and Gridlines
     * @param renderContext The {@link WebGL2RenderingContext} used for drawing
     * @param tickObject The {@link TTickObject} contains the major, minor tick numeric values, coordinates and labels for drawing
     * @param penForMinorGridLines The {@link SCRTPen} for drawing minor gridlines in our WebGL graphics engine
     * @param penForMajorGridLines The {@link SCRTPen} for drawing major gridlines in our WebGL graphics engine
     */
    protected drawAxisBandsAndGridLines(renderContext: WebGlRenderContext2D, tickObject: TTickObject, penForMinorGridLines: SCRTPen, penForMajorGridLines: SCRTPen): void;
    /**
     * Called internally - draws the Axis Bands
     * @param renderContext The {@link WebGL2RenderingContext} used for drawing
     * @param ticks An array of tick numeric values
     * @param tickCoords An array of tick coordinates
     * @param brush The {@link SCRTSolidBrush} used to fill the axis band area in our WebGL graphics engine
     */
    protected drawAxisBands(renderContext: WebGlRenderContext2D, ticks: number[], tickCoords: number[], brush: SCRTSolidBrush): void;
    /**
     * Called internally - draws the Axis Grid Lines
     * @param renderContext The {@link WebGL2RenderingContext} used for drawing
     * @param tickCoords An array of tick coordinates
     * @param linesPen The {@link SCRTPen} used to draw the axis gridlines in our WebGL graphics engine
     */
    protected drawGridLines(renderContext: WebGlRenderContext2D, tickCoords: number[], linesPen: SCRTPen): void;
    protected getXVisibleRange(xAxisId: string): NumberRange;
    protected getIsXCategoryAxis(xAxisId: string): boolean;
    /**
     * Returns an array of label strings for an array of major tick numeric values
     * @param majorTicks The major tick numeric values
     */
    protected getLabels(majorTicks: number[]): string[];
    /**
     * Gets the total range on the XAxis required to display all the series zoomed to fit on this axis
     */
    protected getXDataRange(): NumberRange;
    /**
     * @inheritDoc
     */
    protected notifyPropertyChanged(propertyName: string): void;
    private getMajorTickIndex;
    private getMaxXRange;
    private getTicks;
    private getTickCoordsAndLabels;
}
