"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumericAxis = void 0;
const AxisType_1 = require("../../../types/AxisType");
const NumericFormat_1 = require("../../../types/NumericFormat");
const FlippedNumericCoordinateCalculator_1 = require("../../Numerics/CoordinateCalculators/FlippedNumericCoordinateCalculator");
const NumericCoordinateCalculator_1 = require("../../Numerics/CoordinateCalculators/NumericCoordinateCalculator");
const NumericTickProvider_1 = require("../../Numerics/TickProviders/NumericTickProvider");
const AxisBase2D_1 = require("./AxisBase2D");
const NumericDeltaCalculator_1 = require("./DeltaCalculator/NumericDeltaCalculator");
const NumericLabelProvider_1 = require("./LabelProvider/NumericLabelProvider");
/**
 * @summary A 2D Chart Numeric / Value Axis type
 * @description A Numeric axis uses the X-value to measure data-points on the XAxis.
 * This is contrary to a {@link CategoryAxis} which uses X-index.
 * @remarks
 * Set a {@link NumericAxis} on the {@link SciChartSurface.xAxes} or {@link SciChartSurface.yAxes} property.
 */
class NumericAxis extends AxisBase2D_1.AxisBase2D {
    /**
     * Creates an instance of a {@link NumericAxis}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link INumericAxisOptions} used to configure the axis at instantiation time
     */
    constructor(webAssemblyContext, options) {
        var _a;
        super(webAssemblyContext, options);
        this.type = AxisType_1.EAxisType.NumericAxis;
        this.tickProvider = new NumericTickProvider_1.NumericTickProvider(this.webAssemblyContext2D);
        this.labelProvider = new NumericLabelProvider_1.NumericLabelProvider(NumericFormat_1.ENumericFormat.Decimal_1);
        this.deltaCalculator = new NumericDeltaCalculator_1.NumericDeltaCalculator(this.webAssemblyContext2D);
        this.labelProvider.numericFormat = (_a = options === null || options === void 0 ? void 0 : options.labelFormat) !== null && _a !== void 0 ? _a : this.labelProvider.numericFormat;
    }
    /**
     * @inheritDoc
     */
    getCurrentCoordinateCalculatorInternal() {
        const { seriesViewRect } = this.parentSurface;
        const min = this.visibleRange.min;
        const max = this.visibleRange.max;
        const size = this.isHorizontalAxis ? seriesViewRect.width : seriesViewRect.height;
        const shouldFlip = this.isXAxis !== this.flippedCoordinatesProperty;
        return shouldFlip
            ? new FlippedNumericCoordinateCalculator_1.FlippedNumericCoordinateCalculator(this.webAssemblyContext2D, size, min, max)
            : new NumericCoordinateCalculator_1.NumericCoordinateCalculator(this.webAssemblyContext2D, size, min, max);
    }
}
exports.NumericAxis = NumericAxis;
