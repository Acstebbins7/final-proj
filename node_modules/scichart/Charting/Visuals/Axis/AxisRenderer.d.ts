import { Rect } from "../../../Core/Rect";
import { EAxisAlignment } from "../../../types/AxisAlignment";
import { SCRTPen, TSciChart } from "../../../types/TSciChart";
import { WebGlRenderContext2D } from "../../Drawing/WebGlRenderContext2D";
import { TTextStyle, TTickLineStyle } from "./AxisCore";
import { NumericLabelProvider } from "./LabelProvider/NumericLabelProvider";
import { Thickness } from "../../../Core/Thickness";
/**
 * Draws an axis using our WebGL Rendering engine
 */
export declare class AxisRenderer {
    viewRect: Rect;
    private webAssemblyContext;
    private desiredLabelsSize;
    private desiredTicksSize;
    private desiredHeightProperty;
    private desiredWidthProperty;
    private textureManager;
    private measureTextCanvas;
    constructor(webAssemblyContext: TSciChart);
    measure(isHorizontalAxis: boolean, labelStyle: TTextStyle, majorTicks: number[], ticksSize: number, labelsPadding: Thickness, labelProvider: NumericLabelProvider, drawLabels: boolean, drawTicks: boolean): void;
    get desiredHeight(): number;
    set desiredHeight(height: number);
    get desiredWidth(): number;
    set desiredWidth(width: number);
    layout(rect: Rect): void;
    drawLabels(renderContext: WebGlRenderContext2D, axisAlignment: EAxisAlignment, ticksLabels: string[], tickCoords: number[], labelStyle: TTextStyle, isVerticalChart: boolean, isFlippedCoordinates: boolean): void;
    drawTicks(renderContext: WebGlRenderContext2D, axisAlignment: EAxisAlignment, tickCoords: number[], pen: SCRTPen, tickStyle: TTickLineStyle): void;
    drawModifiersAxisLabel(renderContext: WebGlRenderContext2D, displayValue: string, coord: number, axisAlignment: EAxisAlignment, textStyle: TTextStyle, fill: string): void;
    createAxisMarker(axisAlignment: EAxisAlignment, text: string, textStyle: TTextStyle, backgroundColor?: string, opacity?: number): {
        bitmapTexture: import("../../../types/TSciChart").TSRTexture;
        textureWidth: number;
        textureHeight: number;
    };
    createAnnotationLabelTexture(text: string, textStyle: TTextStyle, backgroundColor?: string, displayVertically?: boolean, displayMirrored?: boolean, opacity?: number): {
        bitmapTexture: import("../../../types/TSciChart").TSRTexture;
        textureWidth: number;
        textureHeight: number;
    };
}
