import { CoordinateCalculatorBase } from "../../Numerics/CoordinateCalculators/CoordinateCalculatorBase";
import { EAnnotationType } from "./IAnnotation";
import { ISvgAnnotationBaseOptions, SvgAnnotationBase } from "./SvgAnnotationBase";
/**
 * Optional parameters passed to an {@link TextAnnotation} during construction
 */
export interface ITextAnnotationOptions extends ISvgAnnotationBaseOptions {
    /**
     * text provided by the user
     */
    text?: string;
    /**
     * text color provided by the user
     */
    textColor?: string;
    /**
     * font size provided by the user
     */
    fontSize?: number;
    /**
     * font family provided by the user
     */
    fontFamily?: string;
    /**
     * Font weight provided by the user
     */
    fontWeight?: string;
}
/**
 * A TextAnnotation presents text information over the chart at specific {@link X1}, {@link Y1} coordinates
 */
export declare class TextAnnotation extends SvgAnnotationBase {
    /** @inheritDoc */
    readonly type = EAnnotationType.SVGTextAnnotation;
    protected textProperty: string;
    protected textColorProperty: string;
    protected fontSizeProperty?: number;
    protected fontFamilyProperty?: string;
    protected fontWeightProperty?: string;
    protected isDirty: boolean;
    /**
     * Creates an instance of the {@link CustomAnnotation}
     * @param options The {@link ITextAnnotationOptions} which contain optional parameters
     */
    constructor(options?: ITextAnnotationOptions);
    /**
     * text provided by the user
     */
    get text(): string;
    set text(text: string);
    /**
     * text color provided by the user
     */
    get textColor(): string;
    set textColor(textColor: string);
    /**
     * font size provided by the user
     */
    get fontSize(): number;
    set fontSize(fontSize: number);
    /**
     * font family provided by the user
     */
    get fontFamily(): string;
    set fontFamily(fontFamily: string);
    /**
     * font weight provided by the user
     */
    get fontWeight(): string;
    set fontWeight(fontWeight: string);
    /**
     * Notifies listeners of {@link invalidateParentCallback} that a property has changed
     */
    protected notifyPropertyChanged(): void;
    /**
     * @inheritDoc
     */
    protected create(xCalc: CoordinateCalculatorBase, yCalc: CoordinateCalculatorBase): void;
}
