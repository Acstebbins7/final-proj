"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxisMarkerAnnotation = void 0;
const Guard_1 = require("../../../Core/Guard");
const AxisAlignment_1 = require("../../../types/AxisAlignment");
const drawLabel_1 = require("../Helpers/drawLabel");
const IAnnotation_1 = require("./IAnnotation");
const constants_1 = require("./constants");
const RenderContextAnnotationBase_1 = require("./RenderContextAnnotationBase");
/**
 * @summary The {@link AxisMarkerAnnotation} provides an {@link AnnotationBase | Annotation} which draws a marker at
 * specified value on the axis over the {@link SciChartSurface}
 * @description
 * To add a {@link AxisMarkerAnnotation} to a {@link SciChartSurface}, use the following code:
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const AxisMarkerAnnotation = new AxisMarkerAnnotation( { y1: 3, backgroundColor: "#FF000077", color: "#FF0000"});
 * sciChartSurface.annotations.add(AxisMarkerAnnotation);
 * ```
 * @remarks Uses the fast WebGL/WebAssembly {@link WebGL2RenderingContext} for rendering
 */
class AxisMarkerAnnotation extends RenderContextAnnotationBase_1.RenderContextAnnotationBase {
    /**
     * Create an instance of a AxisMarkerAnnotation
     * @param options Optional parameters of type {@link IAxisMarkerAnnotationOptions} which configure the annotation upon construction
     */
    constructor(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        super(options);
        this.fontSizeProperty = 14;
        this.fontFamilyProperty = "Arial";
        this.fontWeightProperty = "Normal";
        this.fontStyleProperty = "Normal";
        this.colorProperty = "#FFFFFF";
        this.backgroundColorProperty = "#b36200";
        /**@inheritDoc */
        this.type = IAnnotation_1.EAnnotationType.RenderContextAxisMarkerAnnotation;
        this.fontSizeProperty = (_a = options === null || options === void 0 ? void 0 : options.fontSize) !== null && _a !== void 0 ? _a : this.fontSizeProperty;
        this.fontFamilyProperty = (_b = options === null || options === void 0 ? void 0 : options.fontFamily) !== null && _b !== void 0 ? _b : this.fontFamilyProperty;
        this.fontWeightProperty = (_c = options === null || options === void 0 ? void 0 : options.fontWeight) !== null && _c !== void 0 ? _c : this.fontWeightProperty;
        this.fontStyleProperty = (_d = options === null || options === void 0 ? void 0 : options.fontStyle) !== null && _d !== void 0 ? _d : this.fontStyleProperty;
        this.colorProperty = (_e = options === null || options === void 0 ? void 0 : options.color) !== null && _e !== void 0 ? _e : this.colorProperty;
        this.paddingProperty = (_f = options === null || options === void 0 ? void 0 : options.padding) !== null && _f !== void 0 ? _f : this.paddingProperty;
        this.backgroundColorProperty = (_g = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _g !== void 0 ? _g : this.backgroundColorProperty;
        this.formattedValueProperty = (_h = options === null || options === void 0 ? void 0 : options.formattedValue) !== null && _h !== void 0 ? _h : this.formattedValueProperty;
        if (options === null || options === void 0 ? void 0 : options.x1) {
            this.x1 = options.x1;
        }
        if (options === null || options === void 0 ? void 0 : options.x2) {
            this.x2 = options.x2;
        }
        if (options === null || options === void 0 ? void 0 : options.y2) {
            this.y2 = options.y2;
        }
    }
    /** @inheritDoc */
    delete() { }
    /**
     * y2 property is not supported for AxisMarkerAnnotation
     */
    get y2() {
        throw Error("y2 property is not supported for AxisMarkerAnnotation");
    }
    /**
     * y2 property is not supported for AxisMarkerAnnotation
     */
    set y2(y2) {
        throw Error("y2 property is not supported for AxisMarkerAnnotation");
    }
    /**
     * x2 property is not supported for AxisMarkerAnnotation
     */
    get x2() {
        throw Error("x2 property is not supported for AxisMarkerAnnotation");
    }
    /**
     * x2 property is not supported for AxisMarkerAnnotation
     */
    set x2(x2) {
        throw Error("x2 property is not supported for AxisMarkerAnnotation");
    }
    /**
     * Gets the color of the background of the {@link AxisMarkerAnnotation} as an HTML Color code
     */
    get backgroundColor() {
        return this.backgroundColorProperty;
    }
    /**
     * Sets the color of the background of the {@link AxisMarkerAnnotation} as an HTML Color code
     */
    set backgroundColor(value) {
        this.backgroundColorProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.BACKGROUND_COLOR);
    }
    /**
     * Gets the color of the {@link AxisMarkerAnnotation} as an HTML Color code
     */
    get color() {
        return this.colorProperty;
    }
    /**
     * Sets the color of the {@link AxisMarkerAnnotation} as an HTML Color code
     */
    set color(value) {
        this.colorProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.COLOR);
    }
    /**
     * Gets the fontSize of the {@link AxisMarkerAnnotation}
     */
    get fontSize() {
        return this.fontSizeProperty;
    }
    /**
     * Sets the fontSize of the {@link AxisMarkerAnnotation}
     */
    set fontSize(value) {
        this.fontSizeProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.FONT_SIZE);
    }
    /**
     * Gets the fontFamily of the {@link AxisMarkerAnnotation}
     */
    get fontFamily() {
        return this.fontFamilyProperty;
    }
    /**
     * Sets the fontFamily of the {@link AxisMarkerAnnotation}
     */
    set fontFamily(value) {
        this.fontFamilyProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.FONT_FAMILY);
    }
    /**
     * Gets the fontWeight of the {@link AxisMarkerAnnotation}
     */
    get fontWeight() {
        return this.fontWeightProperty;
    }
    /**
     * Sets the fontWeight of the {@link AxisMarkerAnnotation}
     */
    set fontWeight(value) {
        this.fontWeightProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.FONT_WEIGHT);
    }
    /**
     * Gets the fontStyle of the {@link AxisMarkerAnnotation}
     */
    get fontStyle() {
        return this.fontStyleProperty;
    }
    /**
     * Sets the fontStyle of the {@link AxisMarkerAnnotation}
     */
    set fontStyle(value) {
        this.fontStyleProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.FONT_STYLE);
    }
    /**
     * Gets the padding of the {@link AxisMarkerAnnotation}
     */
    get padding() {
        return this.paddingProperty;
    }
    /**
     * Sets the padding of the {@link AxisMarkerAnnotation}
     */
    set padding(value) {
        this.paddingProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.PADDING);
    }
    /**
     * Gets the formattedValue of the {@link AxisMarkerAnnotation}
     */
    get formattedValue() {
        return this.formattedValueProperty;
    }
    /**
     * Sets the formattedValue of the {@link AxisMarkerAnnotation}
     */
    set formattedValue(value) {
        this.formattedValueProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.FORMATTED_VALUE);
    }
    isPointWithinBounds(args) {
        return false;
    }
    /** @inheritDoc */
    drawWithContext(renderContext, xCalc, yCalc, viewRect) {
        if (this.isHidden) {
            return;
        }
        Guard_1.Guard.notNull(renderContext, "renderContext");
        Guard_1.Guard.notNull(xCalc, "xCalc");
        Guard_1.Guard.notNull(yCalc, "yCalc");
        let x1Coord = this.getX1Coordinate(xCalc, yCalc);
        let y1Coord = this.getY1Coordinate(xCalc, yCalc);
        const isNil = (obj) => obj === undefined || obj === null;
        const isX1CoordinateDefined = isNil(this.x1);
        const markerCoordinate = isX1CoordinateDefined ? this.y1 : this.x1;
        const markerCoordinateValue = isX1CoordinateDefined ? y1Coord : x1Coord;
        Guard_1.Guard.argumentIsRealNumber(markerCoordinate, "x1 or y1");
        const xAxisId = this.xAxisId;
        const xAxis = this.parentSurface.getXAxisById(xAxisId);
        const yAxisId = this.yAxisId;
        const yAxis = this.parentSurface.getYAxisById(yAxisId);
        const axisWithMarker = isX1CoordinateDefined ? yAxis : xAxis;
        const coordinateMode = isX1CoordinateDefined ? this.yCoordinateMode : this.xCoordinateMode;
        const coordinateCalculator = isX1CoordinateDefined ? yCalc : xCalc;
        const horizontalAxis = this.isVerticalChart ? yAxis : xAxis;
        const verticalAxis = this.isVerticalChart ? xAxis : yAxis;
        const isHorizontalAxisAlignmentReversed = horizontalAxis.axisAlignment === AxisAlignment_1.EAxisAlignment.Top;
        const isVerticalAxisAlignmentReversed = verticalAxis.axisAlignment === AxisAlignment_1.EAxisAlignment.Left;
        if (this.isVerticalChart) {
            if (isX1CoordinateDefined) {
                y1Coord = isHorizontalAxisAlignmentReversed ? 0 : viewRect.height;
            }
            else {
                x1Coord = isVerticalAxisAlignmentReversed ? 0 : viewRect.width;
            }
        }
        else {
            if (isX1CoordinateDefined) {
                x1Coord = isHorizontalAxisAlignmentReversed ? 0 : viewRect.width;
            }
            else {
                y1Coord = isVerticalAxisAlignmentReversed ? 0 : viewRect.height;
            }
        }
        const annotationCoordValue = this.getValue(markerCoordinate, coordinateCalculator, coordinateMode);
        const isAxisLabelInVisibleRange = annotationCoordValue >= axisWithMarker.visibleRange.min
            && annotationCoordValue <= axisWithMarker.visibleRange.max;
        if (isAxisLabelInVisibleRange) {
            const textStyle = {
                fontFamily: this.fontFamilyProperty,
                fontSize: this.fontSizeProperty,
                fontStyle: this.fontStyleProperty,
                color: this.colorProperty,
            };
            drawLabel_1.drawAxisMarkerAnnotation(axisWithMarker, renderContext, this.formattedValueProperty, markerCoordinateValue, x1Coord, y1Coord, textStyle, this.backgroundColorProperty, this.opacity);
        }
    }
}
exports.AxisMarkerAnnotation = AxisMarkerAnnotation;
