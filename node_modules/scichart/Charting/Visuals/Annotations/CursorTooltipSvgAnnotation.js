"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CursorTooltipSvgAnnotation = void 0;
const constants_1 = require("./constants");
const IAnnotation_1 = require("./IAnnotation");
const SvgAnnotationBase_1 = require("./SvgAnnotationBase");
/**
 * A Tooltip Annotation which provides an SVG tooltip over the chart. Used by the {@link RolloverModifier}
 */
class CursorTooltipSvgAnnotation extends SvgAnnotationBase_1.SvgAnnotationBase {
    /**
     * Creates an instance of the {@link TooltipSvgAnnotation}
     * @param options
     */
    constructor(options) {
        var _a, _b, _c, _d, _e;
        super(options);
        /** @inheritDoc */
        this.type = IAnnotation_1.EAnnotationType.SVG;
        this.seriesInfosProperty = [];
        this.isHidden = true;
        this.titleProperty = (_a = options === null || options === void 0 ? void 0 : options.title) !== null && _a !== void 0 ? _a : this.titleProperty;
        this.tooltipSvgTemplateProperty = (_b = options === null || options === void 0 ? void 0 : options.tooltipSvgTemplate) !== null && _b !== void 0 ? _b : this.tooltipSvgTemplateProperty;
        this.seriesInfosProperty = (_c = options === null || options === void 0 ? void 0 : options.seriesInfos) !== null && _c !== void 0 ? _c : this.seriesInfosProperty;
        this.containerBackgroundProperty = (_d = options === null || options === void 0 ? void 0 : options.containerBackground) !== null && _d !== void 0 ? _d : this.containerBackgroundProperty;
        this.textStrokeProperty = (_e = options === null || options === void 0 ? void 0 : options.textStroke) !== null && _e !== void 0 ? _e : this.textStrokeProperty;
    }
    /**
     * Gets or sets seriesInfos {@link SeriesInfo} value on the tooltip
     */
    get seriesInfos() {
        return this.seriesInfosProperty;
    }
    /**
     * Gets or sets seriesInfos {@link SeriesInfo} value on the tooltip
     */
    set seriesInfos(value) {
        this.seriesInfosProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.SERIES_INFOS);
    }
    get title() {
        return this.titleProperty;
    }
    set title(value) {
        this.titleProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.TITLE);
    }
    get tooltipSvgTemplate() {
        return this.tooltipSvgTemplateProperty;
    }
    set tooltipSvgTemplate(value) {
        this.tooltipSvgTemplateProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.TOOLTIP_SVG_TEMPLATE);
    }
    get containerBackground() {
        return this.containerBackgroundProperty;
    }
    set containerBackground(value) {
        this.containerBackgroundProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.CONTAINER_BACKGROUND);
    }
    get textStroke() {
        return this.textStrokeProperty;
    }
    set textStroke(value) {
        this.textStrokeProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.TEXT_STROKE);
    }
    /**
     * @inheritDoc
     */
    update(xCalc, yCalc) {
        var _a, _b, _c, _d;
        if (this.svg) {
            this.delete();
        }
        this.create(xCalc, yCalc);
        const shiftX = (_a = this.xCoordShift) !== null && _a !== void 0 ? _a : 0;
        const shiftY = (_b = this.yCoordShift) !== null && _b !== void 0 ? _b : 0;
        this.svg.style.display = this.isHidden ? "none" : "block";
        const mousePointX = (_c = this.x1) !== null && _c !== void 0 ? _c : 0;
        const mousePointY = (_d = this.y1) !== null && _d !== void 0 ? _d : 0;
        const x1Coord = shiftX + mousePointX;
        const y1Coord = shiftY + mousePointY;
        if (isNaN(x1Coord) || isNaN(y1Coord)) {
            this.svg.style.display = "none";
        }
        else {
            this.svg.setAttribute("x", x1Coord.toString());
            this.svg.setAttribute("y", y1Coord.toString());
        }
    }
    /**
     * @inheritDoc
     */
    create(xCalc, yCalc) {
        if (!this.tooltipSvgTemplate)
            throw Error("Please provide a tooltipSvgTemplate for CursorTooltipSvgAnnotation");
        const svgString = this.tooltipSvgTemplate(this.seriesInfos, this);
        const svgNode = document.createRange().createContextualFragment(svgString);
        this.svgRoot.appendChild(svgNode);
        this.svg = this.svgRoot.lastChild;
    }
}
exports.CursorTooltipSvgAnnotation = CursorTooltipSvgAnnotation;
