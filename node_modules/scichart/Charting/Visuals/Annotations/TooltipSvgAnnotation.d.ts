import { ESeriesType } from "../../../types/SeriesType";
import { SeriesInfo } from "../../Model/ChartData/SeriesInfo";
import { CoordinateCalculatorBase } from "../../Numerics/CoordinateCalculators/CoordinateCalculatorBase";
import { RolloverModifierRenderableSeriesProps } from "../RenderableSeries/RolloverModifier/RolloverModifierRenderableSeriesProps";
import { EAnnotationType } from "./IAnnotation";
import { ISvgAnnotationBaseOptions, SvgAnnotationBase } from "./SvgAnnotationBase";
export interface ITooltipSvgAnnotationOptions extends ISvgAnnotationBaseOptions {
    height?: number;
    seriesType?: ESeriesType;
}
/**
 * A Tooltip Annotation which provides an SVG tooltip over the chart. Used by the {@link RolloverModifier}
 */
export declare class TooltipSvgAnnotation extends SvgAnnotationBase {
    /** @inheritDoc */
    readonly type = EAnnotationType.SVG;
    width: number;
    height: number;
    private tooltipProps;
    private svgLegend;
    private seriesInfoProperty;
    /**
     * Creates an instance of the {@link TooltipSvgAnnotation}
     * @param renderableSeriesProps The {@link RolloverModifierRenderableSeriesProps | props} pass
     * @param options
     */
    constructor(renderableSeriesProps: RolloverModifierRenderableSeriesProps, options?: ITooltipSvgAnnotationOptions);
    /**
     * Gets or sets seriesInfo {@link SeriesInfo} value on the tooltip
     */
    get seriesInfo(): SeriesInfo;
    /**
     * Gets or sets seriesInfo {@link SeriesInfo} value on the tooltip
     */
    set seriesInfo(value: SeriesInfo);
    /**
     * @inheritDoc
     */
    delete(): void;
    /**
     * @inheritDoc
     */
    update(xCalc: CoordinateCalculatorBase, yCalc: CoordinateCalculatorBase): void;
    /**
     * @inheritDoc
     */
    protected create(xCalc: CoordinateCalculatorBase, yCalc: CoordinateCalculatorBase): void;
    private updateLegendTooltip;
    private updateSize;
}
