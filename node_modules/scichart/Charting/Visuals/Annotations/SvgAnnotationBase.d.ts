import { Point } from "../../../Core/Point";
import { EHorizontalAnchorPoint, EVerticalAnchorPoint } from "../../../types/AnchorPoint";
import { ModifierMouseArgs } from "../../ChartModifiers/ModifierMouseArgs";
import { CoordinateCalculatorBase } from "../../Numerics/CoordinateCalculators/CoordinateCalculatorBase";
import { SciChartSurfaceBase } from "../SciChartSurfaceBase";
import { AnnotationBase, IAnnotationBaseOptions } from "./AnnotationBase";
/**
 * Options passed to the constructor of a {@link SvgAnnotationBase}, used to configure it at instantiation time
 */
export interface ISvgAnnotationBaseOptions extends IAnnotationBaseOptions {
    xCoordShift?: number;
    yCoordShift?: number;
    verticalAnchorPoint?: EVerticalAnchorPoint;
    horizontalAnchorPoint?: EHorizontalAnchorPoint;
}
/**
 * The Base class for an {@link AnnotationBase | Annotation} which draws using an HTML5 SVG canvas
 */
export declare abstract class SvgAnnotationBase extends AnnotationBase {
    /**
     * The {@link SVGElement} which will be added to the chart
     */
    protected svg: SVGElement;
    protected xCoordShiftProperty: number;
    protected yCoordShiftProperty: number;
    protected verticalAnchorPointProperty: EVerticalAnchorPoint;
    protected horizontalAnchorPointProperty: EHorizontalAnchorPoint;
    private svgRootProperty;
    protected svgProperties: DOMRect;
    protected prevX1Coordinate: number;
    protected prevY1Coordinate: number;
    /**
     * Creates an instance of an SvgAnnotationbase
     * @param options Optional parameters of type {@link ISvgAnnotationBaseOptions} used to configure the annotation on construction
     */
    protected constructor(options?: ISvgAnnotationBaseOptions);
    /** @inheritDoc */
    onAttach(scs: SciChartSurfaceBase): void;
    /** @inheritDoc */
    onDetach(): void;
    /**
     * Gets or sets an offset to shift X-coordinates
     */
    get xCoordShift(): number;
    /**
     * Gets or sets an offset to shift X-coordinates
     */
    set xCoordShift(value: number);
    /**
     * Gets or sets an offset to shift Y-coordinates
     */
    get yCoordShift(): number;
    /**
     * Gets or sets an offset to shift Y-coordinates
     */
    set yCoordShift(value: number);
    /**
     * Gets or sets vertical anchor point
     */
    get verticalAnchorPoint(): EVerticalAnchorPoint;
    /**
     * Gets or sets vertical anchor point
     */
    set verticalAnchorPoint(value: EVerticalAnchorPoint);
    /**
     * Gets or sets horizontal anchor point
     */
    get horizontalAnchorPoint(): EHorizontalAnchorPoint;
    /**
     * Gets or sets horizontal anchor point
     */
    set horizontalAnchorPoint(value: EHorizontalAnchorPoint);
    /**
     * Updates the annotation position, with the {@link CoordinateCalculatorBase | Coordinate Calculators} passed in
     * @param xCalc The XAxis {@link CoordinateCalculatorBase | CoordinateCalculator} applied to this annotation
     * @param yCalc The YAxis {@link CoordinateCalculatorBase | CoordinateCalculator} applied to this annotation
     */
    update(xCalc: CoordinateCalculatorBase, yCalc: CoordinateCalculatorBase): void;
    —ÅalcDragDistance(xyValues: Point): void;
    onDragStarted(args: ModifierMouseArgs): boolean;
    checkIsClickedOnAnnotation(xyPoint: Point, x1Coord: number, y1Coord: number, x2Coord: number, y2Coord: number): boolean;
    /**
     * @inheritDoc
     */
    delete(): void;
    protected updateAdornerInner(x1Coord: number, y1Coord: number, x2Coord: number, y2Coord: number): void;
    /**
     * Called to create the SVG Dom Element right before it is added to the parent chart
     * @param xCalc The XAxis {@link CoordinateCalculatorBase | CoordinateCalculator} applied to this annotation
     * @param yCalc The YAxis {@link CoordinateCalculatorBase | CoordinateCalculator} applied to this annotation
     */
    protected abstract create(xCalc: CoordinateCalculatorBase, yCalc: CoordinateCalculatorBase): void;
    /**
     * Gets the {@link SVGSVGElement | SVG Element} at the root of this annotation
     */
    protected get svgRoot(): SVGSVGElement;
}
