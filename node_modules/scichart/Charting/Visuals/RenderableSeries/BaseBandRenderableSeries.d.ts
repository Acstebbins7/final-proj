import { DoubleVector, TSciChart } from "../../../types/TSciChart";
import { IThemeProvider } from "../../Themes/IThemeProvider";
import { BaseRenderableSeries } from "./BaseRenderableSeries";
import { IHitTestProvider } from "./HitTest/IHitTestProvider";
import { IBaseRenderableSeriesOptions } from "./IBaseRenderableSeriesOptions";
/**
 * Optional parameters passed to the constructor of {@link BaseBandRenderableSeries}
 */
export interface IBaseBandRenderableSeriesOptions extends IBaseRenderableSeriesOptions {
    /**
     * Gets or sets the stroke color the Y1 values in the data-series.
     * See associated {@link XyyDataSeries} for further information
     */
    strokeY1?: string;
    /**
     * Gets or sets the fill color for when Y is less than Y as an HTML Color code
     */
    fill?: string;
    /**
     * Gets or sets the fill color for when Y1 is less than Y as an HTML Color code
     */
    fillY1?: string;
    /**
     * The StrokeDashArray defines the stroke or dash pattern for the Y0 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    strokeDashArray?: number[];
    /**
     * The StrokeY1DashArray defines the stroke or dash pattern for the Y1 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    strokeY1DashArray?: number[];
}
export declare abstract class BaseBandRenderableSeries extends BaseRenderableSeries {
    /**
     * Y1 values animation vector
     */
    y1AnimationValues: DoubleVector;
    private fillY1Property;
    private strokeY1Property;
    private fillProperty;
    private strokeDashArrayProperty;
    private strokeY1DashArrayProperty;
    constructor(webAssemblyContext: TSciChart, options?: IBaseBandRenderableSeriesOptions);
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * Gets or sets the fill color for when Y is less than Y as an HTML Color code
     */
    get fill(): string;
    /**
     * Gets or sets the fill color for when Y is less than Y1 as an HTML Color code
     */
    set fill(fill: string);
    /**
     * Gets or sets the stroke color the Y1 values in the data-series.
     * See associated {@link XyyDataSeries} for further information
     */
    get strokeY1(): string;
    /**
     * Gets or sets the stroke color the Y1 values in the data-series.
     * See associated {@link XyyDataSeries} for further information
     */
    set strokeY1(strokeY1: string);
    /**
     * Gets or sets the fill color for when Y1 is less than Y as an HTML Color code
     */
    get fillY1(): string;
    /**
     * Gets or sets the fill color for when Y1 is less than Y as an HTML Color code
     */
    set fillY1(fillY1: string);
    /**
     * The StrokeDashArray defines the stroke or dash pattern for the Y0 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    get strokeDashArray(): number[];
    /**
     * The StrokeDashArray defines the stroke or dash pattern for the Y0 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    set strokeDashArray(strokeDashArray: number[]);
    /**
     * The strokeY1DashArray defines the stroke or dash pattern for the Y1 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    get strokeY1DashArray(): number[];
    /**
     * The strokeY1DashArray defines the stroke or dash pattern for the Y1 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    set strokeY1DashArray(strokeY1DashArray: number[]);
    /** @inheritDoc */
    delete(): void;
    /**
     * @inheritDoc
     */
    protected newHitTestProvider(): IHitTestProvider;
}
