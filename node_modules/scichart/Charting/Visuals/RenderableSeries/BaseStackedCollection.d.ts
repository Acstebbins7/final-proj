import { AnimationToken } from "../../../Core/AnimationToken";
import { NumberRange } from "../../../Core/NumberRange";
import { ObservableArray } from "../../../Core/ObservableArray";
import { ESeriesType } from "../../../types/SeriesType";
import { DoubleVector, TSciChart } from "../../../types/TSciChart";
import { ELineDrawMode, WebGlRenderContext2D } from "../../Drawing/WebGlRenderContext2D";
import { IDataSeries } from "../../Model/IDataSeries";
import { IPaletteProvider } from "../../Model/IPaletteProvider";
import { RenderPassData } from "../../Services/RenderPassData";
import { IThemeProvider } from "../../Themes/IThemeProvider";
import { AxisCore } from "../Axis/AxisCore";
import { IPointMarker } from "../PointMarkers/IPointMarker";
import { SciChartSurface } from "../SciChartSurface";
import { BaseAnimation } from "./Animations/BaseAnimation";
import { BaseStackedRenderableSeries } from "./BaseStackedRenderableSeries";
import { ISeriesDrawingProvider } from "./DrawingProviders/ISeriesDrawingProvider";
import { IHitTestProvider } from "./HitTest/IHitTestProvider";
import { IRenderableSeries } from "./IRenderableSeries";
import { RolloverModifierRenderableSeriesProps } from "./RolloverModifier/RolloverModifierRenderableSeriesProps";
import { ShaderEffect } from "./ShaderEffect";
/**
 * A base class for stacked collections, which are used to create stacked mountain or column chart types.
 * Concrete types are {@link StackedColumnCollection} and {@link StackedMountainCollection}
 */
export declare abstract class BaseStackedCollection<T extends BaseStackedRenderableSeries> extends ObservableArray<T> implements IRenderableSeries {
    abstract readonly type: ESeriesType;
    readonly id: string;
    readonly isStacked = true;
    readonly isSpline = false;
    parentSurface: SciChartSurface;
    invalidateParentCallback: () => void;
    /**
     * The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     */
    protected webAssemblyContext: TSciChart;
    protected animationToken: AnimationToken;
    protected accumulatedVector0: DoubleVector;
    protected accumulatedVectorAnimationValues0: DoubleVector;
    protected isAccumulatedVectorDirty: boolean;
    private isVisibleProperty;
    private xAxisIdProperty;
    private yAxisIdProperty;
    private isOneHundredPercentProperty;
    protected animationProperty: BaseAnimation;
    protected isDelayPassed: boolean;
    protected firstAnimationRender: boolean;
    /**
     * Creates an instance of the {@link BaseStackedCollection}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     */
    protected constructor(webAssemblyContext: TSciChart);
    /** @inheritDoc */
    get isDigitalLine(): boolean;
    /** @inheritDoc */
    set isDigitalLine(isDigitalLine: boolean);
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * @inheritDoc
     */
    delete(): void;
    /**
     * @inheritDoc
     */
    abstract draw(renderContext: WebGlRenderContext2D, renderPassData: RenderPassData): void;
    /**
     * @inheritDoc
     */
    notifyPropertyChanged(propertyName: string): void;
    /**
     * @inheritDoc
     */
    getBaseXValues(): number[];
    /**
     * @inheritDoc
     */
    getDataSeriesName(): string;
    /**
     * @inheritDoc
     */
    getDataSeriesValuesCount(): number;
    /**
     * @inheritDoc
     */
    getNativeXValues(): DoubleVector;
    /**
     * @inheritDoc
     */
    abstract getXRange(): NumberRange;
    /**
     * @inheritDoc
     */
    abstract getYRange(xVisibleRange: NumberRange, isXCategoryAxis: boolean): NumberRange;
    /**
     * @inheritDoc
     */
    hasDataSeries(): boolean;
    /**
     * @inheritDoc
     */
    abstract hasDataSeriesValues(): boolean;
    /**
     * @inheritDoc
     */
    hasStrokePaletteProvider(): boolean;
    /**
     * @inheritDoc
     */
    hasFillPaletteProvider(): boolean;
    /**
     * @inheritDoc
     */
    hasPointMarkerPaletteProvider(): boolean;
    /**
     * @inheritDoc
     */
    onAttach(scs: SciChartSurface): void;
    /**
     * @inheritDoc
     */
    onDetach(): void;
    abstract updateAccumulatedVectors(): void;
    /**
     * Gets visible renderable series array
     */
    getVisibleSeries(): T[];
    /**
     * @inheritDoc
     */
    get isVisible(): boolean;
    /**
     * @inheritDoc
     */
    set isVisible(isVisible: boolean);
    /**
     * @inheritDoc
     */
    get xAxis(): AxisCore;
    /**
     * @inheritDoc
     */
    get xAxisId(): string;
    /**
     * @inheritDoc
     */
    set xAxisId(id: string);
    /**
     * @inheritDoc
     */
    get yAxis(): AxisCore;
    /**
     * @inheritDoc
     */
    get yAxisId(): string;
    /**
     * @inheritDoc
     */
    set yAxisId(id: string);
    /**
     * Gets or sets 100% mode. When true, the stacked group becomes a 100% stacked chart
     */
    get isOneHundredPercent(): boolean;
    /**
     * Gets or sets 100% mode. When true, the stacked group becomes a 100% stacked chart
     */
    set isOneHundredPercent(value: boolean);
    /**
     * Gets a start up animation class, a child class for {@link BaseAnimation}
     */
    get animation(): BaseAnimation;
    /**
     * Sets a start up animation class, a child class for {@link BaseAnimation}
     */
    set animation(value: BaseAnimation);
    protected drawDelayTimer(): void;
    /**
     * Starts an animation for {@link IRenderableSeries}
     */
    animate(): void;
    /**
     * gets if the animation is currently running
     */
    get isRunningAnimation(): boolean;
    /**
     * checkIsOutOfDataRange() is not supported for BaseStackedCollection
     * @param xValue
     * @param yValue
     */
    checkIsOutOfDataRange(xValue: number, yValue: number): boolean;
    /**
     * dataSeries property is not supported for BaseStackedCollection
     */
    get dataSeries(): IDataSeries;
    /**
     * dataSeries property is not supported for BaseStackedCollection
     */
    set dataSeries(value: IDataSeries);
    /**
     * drawNaNAs property is not supported for BaseStackedCollection
     */
    get drawNaNAs(): ELineDrawMode;
    /**
     * drawNaNAs property is not supported for BaseStackedCollection
     */
    set drawNaNAs(value: ELineDrawMode);
    /**
     * drawingProviders property is not supported for BaseStackedCollection
     */
    get drawingProviders(): ISeriesDrawingProvider[];
    /**
     * drawingProviders property is not supported for BaseStackedCollection
     */
    set drawingProviders(value: ISeriesDrawingProvider[]);
    /**
     * hitTestProvider property is not supported for BaseStackedCollection
     */
    get hitTestProvider(): IHitTestProvider;
    /**
     * hitTestProvider property is not supported for BaseStackedCollection
     */
    set hitTestProvider(value: IHitTestProvider);
    /**
     * paletteProvider property is not supported for BaseStackedCollection
     */
    get paletteProvider(): IPaletteProvider;
    /**
     * paletteProvider property is not supported for BaseStackedCollection
     */
    set paletteProvider(value: IPaletteProvider);
    /**
     * pointMarker property is not supported for BaseStackedCollection
     */
    get pointMarker(): IPointMarker;
    /**
     * pointMarker property is not supported for BaseStackedCollection
     */
    set pointMarker(value: IPointMarker);
    /**
     * rolloverModifierProps property is not supported for BaseStackedCollection
     */
    get rolloverModifierProps(): RolloverModifierRenderableSeriesProps;
    /**
     * rolloverModifierProps property is not supported for BaseStackedCollection
     */
    set rolloverModifierProps(value: RolloverModifierRenderableSeriesProps);
    /**
     * stroke property is not supported for BaseStackedCollection
     */
    get stroke(): string;
    /**
     * stroke property is not supported for BaseStackedCollection
     */
    set stroke(value: string);
    /**
     * strokeThickness property is not supported for BaseStackedCollection
     */
    get strokeThickness(): number;
    /**
     * strokeThickness property is not supported for BaseStackedCollection
     */
    set strokeThickness(value: number);
    /**
     * effect property is not supported for BaseStackedCollection
     */
    get effect(): ShaderEffect;
    /**
     * effect property is not supported for BaseStackedCollection
     */
    set effect(effect: ShaderEffect);
    /**
     * opacity property is not supported for BaseStackedCollection
     */
    get opacity(): number;
    /**
     * opacity property is not supported for BaseStackedCollection
     */
    set opacity(value: number);
    /**
     * rolloverModifierProps1() is not supported for BaseStackedCollection
     */
    set rolloverModifierProps1(value: RolloverModifierRenderableSeriesProps);
    /**
     * rolloverModifierProps1() is not supported for BaseStackedCollection
     */
    get rolloverModifierProps1(): RolloverModifierRenderableSeriesProps;
    protected isAllDataSeriesSet(): boolean;
    /**
     * notifies listeners to {@link invalidateParentCallback} and redraws the {@link SciChartSurface}
     */
    protected invalidateParent(): void;
    /**
     * Gets the first series in the collection, else undefined
     */
    protected getFirstSeries(): T;
    /**
     * Gets the parent {@link SciChartSurface}
     */
    protected getParentSurface(): SciChartSurface;
    /**
     * Runs before the animation starts
     * @protected
     */
    protected beforeAnimationStart(): void;
    /**
     * Runs after the animation is complete
     * @protected
     */
    protected afterAnimationComplete(): void;
    /**
     * Internal method that runs on each animation tick
     * @param progress The current animation progress, a value from 0 to 1
     * @protected
     */
    protected onAnimate(progress: number): void;
}
