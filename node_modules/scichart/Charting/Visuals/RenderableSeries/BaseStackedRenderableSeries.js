"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseStackedRenderableSeries = void 0;
const Deleter_1 = require("../../../Core/Deleter");
const guid_1 = require("../../../utils/guid");
const WebGlRenderContext2D_1 = require("../../Drawing/WebGlRenderContext2D");
const animationHelper_1 = require("./Animations/animationHelper");
const constants_1 = require("./constants");
const RolloverModifierRenderableSeriesProps_1 = require("./RolloverModifier/RolloverModifierRenderableSeriesProps");
/**
 * Base class for stacked mountain, column series in SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * See derived types {@link StackedMountainRenderableSeries} and {@link StackedColumnRenderableSeries} for
 * details on how to implement stacked column and mountain charts in SciChart
 */
class BaseStackedRenderableSeries {
    /**
     * Creates an instance of a {@link BaseStackedRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     */
    constructor(webAssemblyContext) {
        this.id = guid_1.generateGuid();
        this.isStacked = true;
        this.isSpline = false;
        this.rolloverModifierProps = new RolloverModifierRenderableSeriesProps_1.RolloverModifierRenderableSeriesProps();
        this.drawNaNAsProperty = WebGlRenderContext2D_1.ELineDrawMode.DiscontinuousLine;
        this.isVisibleProperty = true;
        this.strokeThicknessProperty = 2;
        this.strokeProperty = "#b0c4de";
        this.opacityProperty = 1;
        this.opacityOriginalValue = 1;
        this.notifyDataSeriesChanged = this.notifyDataSeriesChanged.bind(this);
        this.notifyPointMarkerChanged = this.notifyPointMarkerChanged.bind(this);
        this.accumulatedVector = new webAssemblyContext.DoubleVector();
        this.accumulatedVectorAnimationValues = new webAssemblyContext.DoubleVector();
        this.webAssemblyContext = webAssemblyContext;
        this.hitTestProvider = this.newHitTestProvider();
    }
    // PUBLIC
    /** @inheritDoc */
    get isDigitalLine() {
        return this.isDigitalLineProperty;
    }
    /** @inheritDoc */
    set isDigitalLine(isDigitalLine) {
        this.isDigitalLineProperty = isDigitalLine;
        this.notifyPropertyChanged(constants_1.PROPERTY.IS_DIGITAL_LINE);
    }
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider) {
        // TODO
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.accumulatedVector = Deleter_1.deleteSafe(this.accumulatedVector);
        this.accumulatedVectorAnimationValues = Deleter_1.deleteSafe(this.accumulatedVectorAnimationValues);
    }
    /**
     * @inheritDoc
     */
    getDataSeriesName() {
        return this.dataSeries.dataSeriesName;
    }
    /**
     * @inheritDoc
     */
    getDataSeriesValuesCount() {
        return this.getNativeXValues().size();
    }
    /**
     * @inheritDoc
     */
    getNativeXValues() {
        return this.dataSeries.getNativeXValues();
    }
    /**
     * Called when the {@link BaseStackedRenderableSeries} is detached from its parent {@link BaseStackedCollection}
     */
    onDetachFromParentCollection() {
        this.parentCollection = undefined;
        this.getParentSurfaceFn = undefined;
        this.notifyParentPropertyChangedFn = undefined;
        this.delete();
    }
    /**
     * @inheritDoc
     */
    notifyPropertyChanged(propertyName) {
        if (this.notifyParentPropertyChangedFn) {
            this.notifyParentPropertyChangedFn(propertyName);
        }
    }
    /** @inheritDoc */
    checkIsOutOfDataRange(xValue, yValue) {
        const length = this.getDataSeriesValuesCount();
        const isCategoryAxis = this.xAxis.getCurrentCoordinateCalculator().isCategoryCoordinateCalculator;
        const min = isCategoryAxis ? 0 : this.getNativeXValues().get(0);
        const max = isCategoryAxis ? length - 1 : this.getNativeXValues().get(length - 1);
        return xValue < min || xValue > max;
    }
    // NOT SUPPORTED METHODS BEGIN
    /**
     * invalidateParentCallback() is not supported for BaseStackedRenderableSeries
     */
    invalidateParentCallback() {
        throw Error("invalidateParentCallback() is not supported for BaseStackedRenderableSeries");
    }
    /**
     * draw() is not supported for BaseStackedRenderableSeries
     */
    draw(renderContext, renderPassData) {
        throw Error("draw() is not supported for BaseStackedRenderableSeries");
    }
    /**
     * getBaseXValues() is not supported for BaseStackedRenderableSeries
     */
    getBaseXValues() {
        throw Error("getBaseXValues() is not supported for BaseStackedRenderableSeries");
    }
    /**
     * getXRange() is not supported for BaseStackedRenderableSeries
     */
    getXRange() {
        throw Error("getXRange() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * getYRange() is not supported for BaseStackedRenderableSeries
     */
    getYRange(xVisibleRange, isXCategoryAxis) {
        throw Error("getYRange() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * hasDataSeries() is not supported for BaseStackedRenderableSeries
     */
    hasDataSeries() {
        throw Error("hasDataSeries() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * hasDataSeriesValues() is not supported for BaseStackedRenderableSeries
     */
    hasDataSeriesValues() {
        throw Error("hasDataSeriesValues() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * hasStrokePaletteProvider() is not supported for BaseStackedRenderableSeries
     */
    hasStrokePaletteProvider() {
        throw Error("hasStrokePaletteProvider() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * hasPointMarkerPaletteProvider() is not supported for BaseStackedRenderableSeries
     */
    hasPointMarkerPaletteProvider() {
        throw Error("hasFillPaletteProvider() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * hasFillPaletteProvider() is not supported for BaseStackedRenderableSeries
     */
    hasFillPaletteProvider() {
        throw Error("hasFillPaletteProvider() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * onAttach() is not supported for BaseStackedRenderableSeries
     */
    onAttach(scs) {
        throw Error("onAttach() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * onDetach() is not supported for BaseStackedRenderableSeries
     */
    onDetach() {
        throw Error("onDetach() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * rolloverModifierProps1() is not supported for BaseStackedRenderableSeries
     */
    set rolloverModifierProps1(value) {
        throw Error("rolloverModifierProps1() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * rolloverModifierProps1() is not supported for BaseStackedRenderableSeries
     */
    get rolloverModifierProps1() {
        throw Error("rolloverModifierProps1() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * animation() is not supported for BaseStackedRenderableSeries
     */
    set animation(value) {
        throw Error("animation() method is not supported for BaseStackedRenderableSeries");
    }
    /**
     * animation() is not supported for BaseStackedRenderableSeries
     */
    get animation() {
        throw Error("animation() method is not supported for BaseStackedRenderableSeries");
    }
    // NOT SUPPORTED METHODS END
    /**
     * @inheritDoc
     */
    get parentSurface() {
        return this.getParentSurfaceFn();
    }
    /**
     * set parentSurface property is not supported for BaseStackedRenderableSeries
     */
    set parentSurface(value) {
        throw Error("set parentSurface property is not supported for BaseStackedRenderableSeries");
    }
    /**
     * @inheritDoc
     */
    get dataSeries() {
        return this.dataSeriesProperty;
    }
    /**
     * @inheritDoc
     */
    set dataSeries(dataSeries) {
        var _a, _b;
        (_a = this.dataSeriesProperty) === null || _a === void 0 ? void 0 : _a.dataChanged.unsubscribe(this.notifyDataSeriesChanged);
        this.dataSeriesProperty = dataSeries;
        (_b = this.dataSeriesProperty) === null || _b === void 0 ? void 0 : _b.dataChanged.subscribe(this.notifyDataSeriesChanged);
        this.notifyDataSeriesChanged();
    }
    /**
     * @inheritDoc
     */
    get drawNaNAs() {
        return this.drawNaNAsProperty;
    }
    /**
     * @inheritDoc
     */
    set drawNaNAs(drawNaNAs) {
        this.drawNaNAsProperty = drawNaNAs;
        this.notifyPropertyChanged(constants_1.PROPERTY.DRAW_NAN_AS);
    }
    /**
     * @inheritDoc
     */
    get isVisible() {
        return this.isVisibleProperty;
    }
    /**
     * @inheritDoc
     */
    set isVisible(value) {
        this.isVisibleProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.IS_VISIBLE);
    }
    /**
     * @inheritDoc
     */
    get paletteProvider() {
        return this.paletteProviderProperty;
    }
    /**
     * @inheritDoc
     */
    set paletteProvider(paletteProvider) {
        // TODO: fix
        // this.paletteProviderProperty?.onDetached();
        // this.paletteProviderProperty = paletteProvider;
        // this.paletteProviderProperty?.onAttached(this);
        this.notifyPropertyChanged(constants_1.PROPERTY.PALETTE_PROVIDER);
    }
    /**
     * @inheritDoc
     */
    get pointMarker() {
        return this.pointMarkerProperty;
    }
    /**
     * @inheritDoc
     */
    set pointMarker(pointMarker) {
        if (this.pointMarkerProperty) {
            this.pointMarkerProperty.invalidateParentCallback = undefined;
        }
        this.pointMarkerProperty = pointMarker;
        this.notifyPointMarkerChanged();
        if (this.pointMarkerProperty) {
            this.pointMarkerProperty.invalidateParentCallback = this.notifyPointMarkerChanged;
        }
    }
    /**
     * @inheritDoc
     */
    get stroke() {
        return this.strokeProperty;
    }
    /**
     * @inheritDoc
     */
    set stroke(htmlColorCode) {
        this.strokeProperty = htmlColorCode;
        this.notifyPropertyChanged(constants_1.PROPERTY.STROKE);
    }
    /**
     * @inheritDoc
     */
    get strokeThickness() {
        return this.strokeThicknessProperty;
    }
    /**
     * @inheritDoc
     */
    set strokeThickness(value) {
        this.strokeThicknessProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.STROKE_THICKNESS);
    }
    /** @inheritDoc */
    get opacity() {
        return this.opacityProperty;
    }
    /** @inheritDoc */
    set opacity(value) {
        this.opacityProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.OPACITY);
    }
    /** @inheritDoc */
    get xAxis() {
        return this.parentCollection.xAxis;
    }
    /** @inheritDoc */
    get yAxis() {
        return this.parentCollection.yAxis;
    }
    /**
     * Internal method that runs on each animation tick
     * @param progress The current animation progress, a value from 0 to 1
     * @param animation
     * @protected
     */
    onAnimate(progress, animation) {
        if (animation.fadeEffect) {
            this.opacity = progress * this.opacityOriginalValue;
        }
        else {
            this.opacity = this.opacityOriginalValue;
        }
        animationHelper_1.calculateAnimationValues(this.webAssemblyContext, this.accumulatedVector, this.accumulatedVectorAnimationValues, animation, progress);
    }
    /**
     * Runs before the animation starts
     * @protected
     */
    beforeAnimationStart() {
        this.opacityOriginalValue = this.opacity;
    }
    /**
     * Runs after the animation is complete
     * @protected
     */
    afterAnimationComplete() {
        this.opacityProperty = this.opacityOriginalValue;
    }
    // NOT SUPPORTED PROPERTIES BEGIN
    /**
     * drawingProviders property is not supported for BaseStackedRenderableSeries
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    get drawingProviders() {
        throw Error("drawingProviders property is not supported for BaseStackedRenderableSeries");
    }
    /**
     * drawingProviders property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    set drawingProviders(value) {
        throw Error("drawingProviders property is not supported for BaseStackedRenderableSeries");
    }
    /**
     * xAxisId property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    get xAxisId() {
        throw Error("xAxisId property is not supported for BaseStackedRenderableSeries");
    }
    /**
     * xAxisId property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    set xAxisId(value) {
        throw Error("xAxisId property is not supported for BaseStackedRenderableSeries");
    }
    /**
     * yAxisId property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    get yAxisId() {
        throw Error("yAxisId property is not supported for BaseStackedRenderableSeries");
    }
    /**
     * yAxisId property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    set yAxisId(value) {
        throw Error("yAxisId property is not supported for BaseStackedRenderableSeries");
    }
    /**
     * effect property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    get effect() {
        throw Error("effect property is not supported for BaseStackedRenderableSeries");
    }
    /**
     * effect property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    set effect(effect) {
        throw Error("effect property is not supported for BaseStackedRenderableSeries");
    }
    // PRIVATE
    notifyDataSeriesChanged() {
        this.notifyPropertyChanged(constants_1.PROPERTY.DATA_SERIES);
    }
    notifyPointMarkerChanged() {
        this.notifyPropertyChanged(constants_1.PROPERTY.POINT_MARKER);
    }
}
exports.BaseStackedRenderableSeries = BaseStackedRenderableSeries;
