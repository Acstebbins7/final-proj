import { NumberRange } from "../../../Core/NumberRange";
import { ESeriesType } from "../../../types/SeriesType";
import { DoubleVector, TSciChart } from "../../../types/TSciChart";
import { IThemeProvider } from "../../Themes/IThemeProvider";
import { BaseRenderableSeries } from "./BaseRenderableSeries";
import { IHitTestProvider } from "./HitTest/IHitTestProvider";
import { IBaseRenderableSeriesOptions } from "./IBaseRenderableSeriesOptions";
export interface IOhlcRenderableSeriesOptions extends IBaseRenderableSeriesOptions {
    strokeUp?: string;
    strokeDown?: string;
    dataPointWidth?: number;
}
/**
 * Defines a JavaScript OHLC stock-chart eries in the SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * To add an OHLC series to a {@link SciChartSurface} you need to declare both the {@link FastOhlcRenderableSeries | RenderableSeries}
 * and a {@link OhlcDataSeries | OhlcDataSeries}. Simplified code sample below:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * // Create and fill the dataseries
 * const dataSeries = new OhlcDataSeries(wasmContext);
 * dataSeries.append(dateValues, openValues, highValues, lowValues, closeValues);
 * // Create the renderableSeries
 * const ohlcSeries = new FastOhlcRenderableSeries(wasmContext);
 * ohlcSeries.dataSeries = dataSeries;
 * // append to the SciChartSurface
 * sciChartSurface.renderableSeries.add(ohlcSeries);
 * ```
 */
export declare class FastOhlcRenderableSeries extends BaseRenderableSeries {
    readonly type = ESeriesType.OhlcSeries;
    /**
     * Open values animation vector
     */
    openAnimationValues: DoubleVector;
    /**
     * High values animation vector
     */
    highAnimationValues: DoubleVector;
    /**
     * Low values animation vector
     */
    lowAnimationValues: DoubleVector;
    private strokeUpProperty;
    private strokeDownProperty;
    private dataPointWidthProperty;
    /**
     * Creates an instance of the {@link FastOhlcRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options optional parameters of type {@link IOhlcRenderableSeriesOptions} applied when constructing the series type
     */
    constructor(webAssemblyContext: TSciChart, options?: IOhlcRenderableSeriesOptions);
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * Gets or sets the stoke when candlestick close is greater than open, as an HTML color code
     */
    get strokeUp(): string;
    /**
     * Gets or sets the stoke when candlestick close is greater than open, as an HTML color code
     */
    set strokeUp(htmlColorCode: string);
    /**
     * Gets or sets the stoke when candlestick close is less than open, as an HTML color code
     */
    get strokeDown(): string;
    /**
     * Gets or sets the stoke when candlestick close is less than open, as an HTML color code
     */
    set strokeDown(htmlColorCode: string);
    /**
     * Gets or sets the width of candles as a fraction of available space. Valid values range from 0.0 - 1.0
     */
    get dataPointWidth(): number;
    /**
     * Gets or sets the width of candles as a fraction of available space. Valid values range from 0.0 - 1.0
     */
    set dataPointWidth(value: number);
    /**
     * @inheritDoc
     */
    notifyPropertyChanged(propertyName: string): void;
    /**
     * @inheritDoc
     */
    getXRange(): NumberRange;
    /** @inheritDoc */
    delete(): void;
    /**
     * @inheritDoc
     */
    protected newHitTestProvider(): IHitTestProvider;
    /**
     * @inheritDoc
     */
    protected onAnimate(progress: number): void;
}
