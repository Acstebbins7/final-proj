"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SplineLineRenderableSeries = void 0;
const Deleter_1 = require("../../../Core/Deleter");
const AxisType_1 = require("../../../types/AxisType");
const SeriesType_1 = require("../../../types/SeriesType");
const animationHelper_1 = require("./Animations/animationHelper");
const BaseLineRenderableSeries_1 = require("./BaseLineRenderableSeries");
const constants_1 = require("./constants");
/**
 * Defines a line-series or line chart type with Cubic Spline interpolation in the SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * To add a line series to a {@link SciChartSurface} you need to declare both the {@link SplineLineRenderableSeries | RenderableSeries}
 * and a {@link XyDataSeries | DataSeries}. Simplified code sample below:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * // Create and fill the dataseries
 * const dataSeries = new XyDataSeries(wasmContext);
 * dataSeries.append(1,2);
 * dataSeries.append(1,2);
 * // Create the renderableSeries
 * const lineSeries = new SplineLineRenderableSeries(wasmContext);
 * lineSeries.dataSeries = dataSeries;
 * // append to the SciChartSurface
 * sciChartSurface.renderableSeries.add(lineSeries);
 * ```
 */
class SplineLineRenderableSeries extends BaseLineRenderableSeries_1.BaseLineRenderableSeries {
    /**
     * Creates an instance of the {@link SplineLineRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options optional parameters of type {@link ISplineLineRenderableSeriesOptions} applied when constructing the series type
     */
    constructor(webAssemblyContext, options) {
        var _a, _b;
        super(webAssemblyContext, options);
        this.type = SeriesType_1.ESeriesType.SplineLineSeries;
        this.interpolationPointsProperty = 0;
        this.recalculateSpline = true;
        this.xSplineValues = new webAssemblyContext.DoubleVector();
        this.ySplineValues = new webAssemblyContext.DoubleVector();
        this.interpolationPointsProperty = (_a = options === null || options === void 0 ? void 0 : options.interpolationPoints) !== null && _a !== void 0 ? _a : this.interpolationPointsProperty;
        // This should be in the end after all DoubleVectors used for animation have been created
        this.animation = (_b = options === null || options === void 0 ? void 0 : options.animation) !== null && _b !== void 0 ? _b : this.animation;
    }
    /**
     * Gets or sets the interpolationPoints being used for the Spline
     */
    get interpolationPoints() {
        return this.interpolationPointsProperty;
    }
    /**
     * Gets or sets the interpolationPoints being used for the Spline
     */
    set interpolationPoints(value) {
        this.interpolationPointsProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.INTERPOLATION_POINTS);
    }
    /** @inheritDoc */
    delete() {
        this.xSplineValues = Deleter_1.deleteSafe(this.xSplineValues);
        this.ySplineValues = Deleter_1.deleteSafe(this.ySplineValues);
        super.delete();
    }
    /**
     * Updates spline values
     */
    updateSplineValues() {
        if (!this.dataSeries || !this.recalculateSpline || !this.parentSurface) {
            return;
        }
        const isCategoryAxis = this.xAxis.type === AxisType_1.EAxisType.CategoryAxis;
        const dataSeries = this.dataSeries;
        const xValues = isCategoryAxis ? dataSeries.getNativeIndexes() : dataSeries.getNativeXValues();
        const yValues = dataSeries.getNativeYValues();
        const initialSize = xValues.size();
        this.webAssemblyContext.SCRTSplineHelperCubicSpline(xValues, yValues, this.xSplineValues, this.ySplineValues, initialSize, this.interpolationPoints, dataSeries.containsNaN);
        this.recalculateSpline = false;
    }
    /**
     * @inheritDoc
     */
    onAnimate(progress) {
        var _a;
        super.onAnimate(progress);
        const dataSeries = this.dataSeries;
        if (!dataSeries) {
            (_a = this.animationToken) === null || _a === void 0 ? void 0 : _a.cancelAnimation();
        }
        else {
            this.updateSplineValues();
            animationHelper_1.calculateAnimationValues(this.webAssemblyContext, this.ySplineValues, this.yAnimationValues, this.animation, progress);
        }
    }
    /**
     * @inheritDoc
     */
    dataSeriesDataChanged() {
        this.recalculateSpline = true;
        super.dataSeriesDataChanged();
    }
    /**
     * @param color The color for palette
     * @param yValue The Y value of the point
     */
    pushPalettedColors(color, palettingState) {
        for (let i = 0; i <= this.interpolationPoints; i++) {
            palettingState.palettedColors.push_back(color);
        }
    }
}
exports.SplineLineRenderableSeries = SplineLineRenderableSeries;
