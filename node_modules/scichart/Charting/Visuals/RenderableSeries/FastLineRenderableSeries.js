"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastLineRenderableSeries = void 0;
const SeriesType_1 = require("../../../types/SeriesType");
const animationHelper_1 = require("./Animations/animationHelper");
const BaseLineRenderableSeries_1 = require("./BaseLineRenderableSeries");
/**
 * Defines a line-series or line chart type in the SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * To add a line series to a {@link SciChartSurface} you need to declare both the {@link FastLineRenderableSeries | RenderableSeries}
 * and a {@link XyDataSeries | DataSeries}. Simplified code sample below:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * // Create and fill the dataseries
 * const dataSeries = new XyDataSeries(wasmContext);
 * dataSeries.append(1,2);
 * dataSeries.append(1,2);
 * // Create the renderableSeries
 * const lineSeries = new FastLineRenderableSeries(wasmContext);
 * lineSeries.dataSeries = dataSeries;
 * // append to the SciChartSurface
 * sciChartSurface.renderableSeries.add(lineSeries);
 * ```
 */
class FastLineRenderableSeries extends BaseLineRenderableSeries_1.BaseLineRenderableSeries {
    /**
     * Creates an instance of the {@link FastLineRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options optional parameters of type {@link IFastLineRenderableSeriesOptions} applied when constructing the series type
     */
    constructor(webAssemblyContext, options) {
        var _a;
        super(webAssemblyContext, options);
        this.type = SeriesType_1.ESeriesType.LineSeries;
        // This should be in the end after all DoubleVectors used for animation have been created
        this.animation = (_a = options === null || options === void 0 ? void 0 : options.animation) !== null && _a !== void 0 ? _a : this.animation;
    }
    /**
     * @inheritDoc
     */
    onAnimate(progress) {
        var _a;
        super.onAnimate(progress);
        const dataSeries = this.dataSeries;
        if (!dataSeries) {
            (_a = this.animationToken) === null || _a === void 0 ? void 0 : _a.cancelAnimation();
        }
        else {
            animationHelper_1.calculateAnimationValues(this.webAssemblyContext, dataSeries.getNativeYValues(), this.yAnimationValues, this.animation, progress);
        }
    }
}
exports.FastLineRenderableSeries = FastLineRenderableSeries;
