"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackedColumnCollection = void 0;
const Deleter_1 = require("../../../Core/Deleter");
const NumberRange_1 = require("../../../Core/NumberRange");
const SeriesType_1 = require("../../../types/SeriesType");
const BaseDataSeries_1 = require("../../Model/BaseDataSeries");
const BaseRenderableSeries_1 = require("./BaseRenderableSeries");
const BaseStackedCollection_1 = require("./BaseStackedCollection");
const constants_1 = require("./constants");
const FastColumnRenderableSeries_1 = require("./FastColumnRenderableSeries");
/**
 * @summary A {@link StackedColumnCollection} allows grouping multiple {@link StackedColumnRenderableSeries}
 * to create a JavaScript Stacked Column, 100 Stacked Column or Stacked Bar chart
 * @description
 * Multiple {@link StackedColumnRenderableSeries} are required to create a stacked column chart type in SciChart.
 * These are grouped with a {@link StackedColumnCollection}, which implements {@link IRenderableSeries} and may be added
 * directly to a {@link SciChartSurface.renderableSeries} collection.
 *
 * Code sample below for stacking above and below (vertical stacking)
 * ```ts
 * const stackedColumn0 = new StackedColumnRenderableSeries(wasmContext);
 * stackedColumn0.stackedGroupId = "group one"; // Same group ID means stack vertically
 * const stackedColumn1 = new StackedColumnRenderableSeries(wasmContext);
 * stackedColumn1.stackedGroupId = "group one"; // Same group ID means stack vertically
 * const stackedColumn2 = new StackedColumnRenderableSeries(wasmContext);
 * stackedColumn2.stackedGroupId = "group one"; // Same group ID means stack vertically
 * const stackedColumnCollection = new StackedColumnCollection(wasmContext);
 * stackedColumnCollection.add(stackedColumn0, stackedColumn1, stackedColumn2);
 *
 * sciChartSurface.renderableSeries.add(stackedColumnCollection);
 * ````
 *
 *  Code sample below for stacking side by side (horizontal stacking)
 * ```ts
 * const stackedColumn0 = new StackedColumnRenderableSeries(wasmContext);
 * stackedColumn0.stackedGroupId = "group one"; // Different group ID means stack horizontally
 * const stackedColumn1 = new StackedColumnRenderableSeries(wasmContext);
 * stackedColumn1.stackedGroupId = "group two"; // Different group ID means stack horizontally
 * const stackedColumn2 = new StackedColumnRenderableSeries(wasmContext);
 * stackedColumn2.stackedGroupId = "group three"; // Different group ID means stack horizontally
 * const stackedColumnCollection = new StackedColumnCollection(wasmContext);
 * stackedColumnCollection.add(stackedColumn0, stackedColumn1, stackedColumn2);
 *
 * sciChartSurface.renderableSeries.add(stackedColumnCollection);
 * ````
 * @remarks This type implements {@link IRenderableSeries} but it is not a renderable series, instead it wraps multiple
 * {@link StackedColumnRenderableSeries} to create a stacked column chart
 */
class StackedColumnCollection extends BaseStackedCollection_1.BaseStackedCollection {
    /**
     * Creates an instance of the {@link StackedColumnCollection}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     */
    constructor(webAssemblyContext) {
        super(webAssemblyContext);
        this.type = SeriesType_1.ESeriesType.VerticallyStackedColumnCollection;
        this.seriesGroups = {};
        this.dataPointWidthProperty = 0.5;
        this.zeroLineYProperty = 0;
        this.getColumnWidth = this.getColumnWidth.bind(this);
        this.detachChildSeries = this.detachChildSeries.bind(this);
        this.attachChildSeries = this.attachChildSeries.bind(this);
        this.collectionChanged.subscribe(arg => {
            var _a, _b;
            (_a = arg.getOldItems()) === null || _a === void 0 ? void 0 : _a.forEach(this.detachChildSeries);
            (_b = arg.getNewItems()) === null || _b === void 0 ? void 0 : _b.forEach(this.attachChildSeries);
        });
        // TODO: IStackedColumnCollectionOptions
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.nativeDrawingProvider = Deleter_1.deleteSafe(this.nativeDrawingProvider);
        super.delete();
    }
    /**
     * @inheritDoc
     */
    updateAccumulatedVectors() {
        const dataValuesCount = this.getDataSeriesValuesCount();
        if (!this.isAccumulatedVectorDirty || !dataValuesCount) {
            return;
        }
        this.checkXValuesCorrect();
        this.isAccumulatedVectorDirty = false;
        this.clearAccumulatedVectors(dataValuesCount);
        // GROUP SERIES BY STACKED_GROUP_ID
        this.updateGroups();
        const seriesGroups = this.seriesGroups;
        const seriesGroupsCount = this.getGroupsCount();
        Object.keys(seriesGroups).forEach((key, groupIndex) => {
            const seriesList = seriesGroups[key];
            seriesList.forEach(rs => {
                rs.setGroupsCount(seriesGroupsCount);
                rs.setGroupIndex(groupIndex);
            });
        });
        for (let i = 0; i < dataValuesCount; i++) {
            this.accumulatedVector0.push_back(this.zeroLineY);
            Object.keys(seriesGroups).forEach(key => {
                const seriesList = seriesGroups[key];
                let sum;
                if (this.isOneHundredPercent) {
                    sum = seriesList.reduce((prev, cur) => prev + cur.dataSeries.getNativeYValues().get(i), 0);
                }
                let previous = 0;
                seriesList.forEach(rs => {
                    let currentY = rs.dataSeries.getNativeYValues().get(i);
                    if (this.isOneHundredPercent) {
                        currentY = (currentY * 100) / sum;
                    }
                    const current = previous + currentY;
                    rs.accumulatedVector.push_back(current);
                    previous = current;
                });
            });
        }
    }
    /**
     * @inheritDoc
     */
    draw(renderContext, renderPassData) {
        let canDraw = true;
        if (this.animationProperty) {
            this.drawDelayTimer();
            canDraw = this.isDelayPassed;
        }
        if (canDraw) {
            this.updateHitTestProviders(renderPassData);
            if (!this.isEnoughDataToDraw()) {
                return;
            }
            this.updateAccumulatedVectors();
            const isCategoryAxis = renderPassData.xCoordinateCalculator.isCategoryCoordinateCalculator;
            const firstDataSeries = this.getFirstSeries().dataSeries;
            const viewRect = this.parentSurface.seriesViewRect;
            const { isVerticalChart, xCoordinateCalculator, yCoordinateCalculator } = renderPassData;
            const xValues = isCategoryAxis ? firstDataSeries.getNativeIndexes() : firstDataSeries.getNativeXValues();
            const seriesGroups = this.seriesGroups;
            const stackedColumnsCount = this.getGroupsCount();
            const columnWidth = this.getColumnWidth(xCoordinateCalculator);
            Object.keys(seriesGroups).forEach((key, groupIndex) => {
                const seriesArray = seriesGroups[key];
                let previousEl;
                seriesArray.forEach((el, seriesIndex) => {
                    let bottomVector;
                    if (seriesIndex === 0) {
                        bottomVector = this.isRunningAnimation
                            ? this.accumulatedVectorAnimationValues0
                            : this.accumulatedVector0;
                    }
                    else {
                        bottomVector = this.isRunningAnimation
                            ? previousEl.accumulatedVectorAnimationValues
                            : previousEl.accumulatedVector;
                    }
                    const topVector = this.isRunningAnimation
                        ? el.accumulatedVectorAnimationValues
                        : el.accumulatedVector;
                    const spacing = 0;
                    drawColumns(this.webAssemblyContext, renderContext, xCoordinateCalculator, yCoordinateCalculator, isVerticalChart, this.nativeDrawingProvider, xValues, bottomVector, topVector, el.getFillBrush(), el.getStrokePen(), viewRect, columnWidth, spacing, stackedColumnsCount, groupIndex);
                    previousEl = el;
                });
            });
        }
    }
    /**
     * @inheritDoc
     */
    getXRange() {
        if (!this.isEnoughDataToDraw()) {
            return new NumberRange_1.NumberRange();
        }
        const range = this.getFirstSeries().dataSeries.xRange;
        const count = this.getFirstSeries().dataSeries.count();
        return FastColumnRenderableSeries_1.getXRange(range, count, this.dataPointWidth);
    }
    /**
     * @inheritDoc
     */
    getYRange(xVisibleRange, isXCategoryAxis) {
        if (!this.isEnoughDataToDraw()) {
            return new NumberRange_1.NumberRange();
        }
        const lastSeriesAccumVector = this.getLastVisibleSeries().accumulatedVector;
        if (lastSeriesAccumVector.size() !== this.getNativeXValues().size()) {
            return new NumberRange_1.NumberRange();
        }
        // TODO: calc isSorted flag
        const range = BaseDataSeries_1.getWindowedYRange(this.webAssemblyContext, this.getNativeXValues(), lastSeriesAccumVector, xVisibleRange, true, isXCategoryAxis, true);
        return new NumberRange_1.NumberRange(0, range.max);
    }
    /**
     * @inheritDoc
     */
    onAttach(scs) {
        super.onAttach(scs);
        this.nativeDrawingProvider = new this.webAssemblyContext.SCRTStackedColumnSeriesDrawingProvider();
    }
    /**
     * @inheritDoc
     */
    notifyPropertyChanged(propertyName) {
        super.notifyPropertyChanged(propertyName);
        if (propertyName === constants_1.PROPERTY.DATA_SERIES ||
            propertyName === constants_1.PROPERTY.IS_VISIBLE ||
            propertyName === constants_1.PROPERTY.IS_ONE_HUNDRED_PERCENT ||
            propertyName === constants_1.PROPERTY.STACKED_GROUP_ID) {
            this.isAccumulatedVectorDirty = true;
        }
    }
    /**
     * @inheritDoc
     */
    hasDataSeriesValues() {
        return this.isEnoughDataToDraw();
    }
    /**
     * Called internally - gets the column width in pixels
     * @param xCoordinateCalculator The current XAxis {@link CoordinateCalculatorBase}
     */
    getColumnWidth(xCoordinateCalculator) {
        const widthFraction = this.dataPointWidth;
        const firstDataSeries = this.getFirstSeries().dataSeries;
        const isCategoryAxis = xCoordinateCalculator.isCategoryCoordinateCalculator;
        const xValues = isCategoryAxis ? firstDataSeries.getNativeIndexes() : firstDataSeries.getNativeXValues();
        const viewRect = this.parentSurface.seriesViewRect;
        const stackedColumnsCount = this.getGroupsCount();
        return (BaseRenderableSeries_1.getDataPointWidth(xValues, xCoordinateCalculator, viewRect.width, widthFraction, isCategoryAxis) /
            stackedColumnsCount);
    }
    // PROPERTIES
    /**
     * Gets or sets the Datapoint width, as a fraction of available space from 0.0 - 1.0
     */
    get dataPointWidth() {
        return this.dataPointWidthProperty;
    }
    /**
     * Gets or sets the Datapoint width, as a fraction of available space from 0.0 - 1.0
     */
    set dataPointWidth(dataPointWidth) {
        this.dataPointWidthProperty = dataPointWidth;
        this.notifyPropertyChanged(constants_1.PROPERTY.DATA_POINT_WIDTH);
    }
    /**
     * Gets or sets the Zero-line Y, the Y-value where the mountain crosses zero and inverts. Default is 0
     */
    get zeroLineY() {
        return this.zeroLineYProperty;
    }
    /**
     * Gets or sets the Zero-line Y, the Y-value where the mountain crosses zero and inverts. Default is 0
     */
    set zeroLineY(zeroLineY) {
        this.zeroLineYProperty = zeroLineY;
        this.notifyPropertyChanged(constants_1.PROPERTY.ZERO_LINE_Y);
    }
    // PROTECTED
    // PRIVATE
    detachChildSeries(series) {
        series.onDetachFromParentCollection();
        this.invalidateParent();
    }
    attachChildSeries(series) {
        series.onAttachToParentCollection(this, this.getParentSurface, this.notifyPropertyChanged, this.getColumnWidth);
        this.invalidateParent();
    }
    isEnoughDataToDraw() {
        const stackedSeriesCount = this.getVisibleSeries().length;
        if (stackedSeriesCount < 1) {
            return false;
        }
        // All renderableSeries should have dataSeries property
        for (let i = 0; i < stackedSeriesCount; i++) {
            if (!this.get(i).dataSeries) {
                return false;
            }
        }
        // All dataSeries should have some values
        for (let i = 0; i < stackedSeriesCount; i++) {
            if (this.get(i).dataSeries.count() === 0) {
                return false;
            }
        }
        return true;
    }
    checkXValuesCorrect() {
        const length = this.getDataSeriesValuesCount();
        this.getVisibleSeries().forEach(el => {
            if (!(el.dataSeries.count() === length)) {
                throw Error("All stacked series in on collection should have the same amount of X Values");
            }
        });
    }
    /**
     * @param numberOfElements - number of element expected is used for performance to reserve memory
     */
    clearAccumulatedVectors(numberOfElements) {
        this.accumulatedVector0.clear();
        this.accumulatedVector0.reserve(numberOfElements);
        this.asArray().forEach(el => {
            el.accumulatedVector.clear();
            el.accumulatedVector.reserve(numberOfElements);
        });
    }
    getLastVisibleSeries() {
        const [lastItem] = this.getVisibleSeries().slice(-1);
        return lastItem;
    }
    updateHitTestProviders(renderPassData) {
        this.getVisibleSeries().forEach(el => {
            var _a;
            (_a = el.hitTestProvider) === null || _a === void 0 ? void 0 : _a.update(renderPassData);
        });
    }
    /**
     * @description Group series by stackedGroupId
     */
    updateGroups() {
        const seriesGroups = {};
        this.getVisibleSeries().forEach(el => {
            const stackedColumnId = el.stackedGroupId;
            if (!seriesGroups[stackedColumnId]) {
                seriesGroups[stackedColumnId] = [];
            }
            seriesGroups[stackedColumnId].push(el);
        });
        this.seriesGroups = seriesGroups;
    }
    getGroupsCount() {
        return Object.keys(this.seriesGroups).length;
    }
}
exports.StackedColumnCollection = StackedColumnCollection;
/** @ignore */
const drawColumns = (wasmContext, renderContext, xCoordinateCalculator, yCoordinateCalculator, isVerticalChart, nativeDrawingProvider, xValues, yValues, y1Values, fillBrush, strokePen, viewRect, columnWidth, spacing, stackedGroupCount, stackedGroupIndex) => {
    const args = new wasmContext.SCRTStackedColumnDrawingParams();
    args.count = xValues.size();
    args.columnWidth = columnWidth <= 0 ? 1 : columnWidth;
    args.spacing = spacing;
    args.viewportWidth = viewRect.width;
    args.viewportHeight = viewRect.height;
    args.verticalChart = isVerticalChart;
    // TODO: fix stacked group
    args.stackedGroupCount = stackedGroupCount;
    args.stackedGroupIndex = stackedGroupIndex;
    args.forceShaderMethod = true;
    if (strokePen) {
        args.SetLinesPen(strokePen);
    }
    if (fillBrush) {
        args.SetFillBrush(fillBrush);
    }
    const nativeContext = renderContext.getNativeContext();
    nativeContext.PushMatrix();
    nativeContext.PushState();
    nativeContext.Translate(viewRect.x, viewRect.y);
    nativeContext.SetClipRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
    nativeDrawingProvider.DrawPointsVec(nativeContext, xValues, y1Values, yValues, xCoordinateCalculator.nativeCalculator, yCoordinateCalculator.nativeCalculator, args);
    nativeContext.PopMatrix();
    nativeContext.PopState();
    args.delete();
};
