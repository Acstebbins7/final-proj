"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.calculateAnimationValues = void 0;
const AnimationType_1 = require("../../../../types/AnimationType");
/**
 * Runs on start up animation to update animation vectors
 * @param wasmContext
 * @param yValues - initial values
 * @param yAnimationValues - calculated values used for the animation
 * @param animation The animation type, child class for {@link BaseAnimation}
 * @param progress Current animation progress
 * @param zeroZeroLine Sets zeroLine = 0, is used for XyzDataSeries
 */
exports.calculateAnimationValues = (wasmContext, yValues, yAnimationValues, animation, progress, zeroZeroLine = false) => {
    if (animation.type === AnimationType_1.EAnimationType.Wave) {
        const waveAnimation = animation;
        const { pointDurationFraction } = waveAnimation;
        const zeroLine = zeroZeroLine ? 0 : waveAnimation.zeroLine;
        wasmContext.SCRTAnimationHelperWave(yValues, pointDurationFraction, zeroLine, progress, yAnimationValues);
    }
    else if (animation.type === AnimationType_1.EAnimationType.Sweep) {
        wasmContext.SCRTAnimationHelperSweep(yValues, progress, yAnimationValues);
    }
    else if (animation.type === AnimationType_1.EAnimationType.Scale) {
        const scaleAnimation = animation;
        const zeroLine = zeroZeroLine ? 0 : scaleAnimation.zeroLine;
        wasmContext.SCRTAnimationHelperScale(yValues, zeroLine, progress, yAnimationValues);
    }
    else if (animation.type === AnimationType_1.EAnimationType.Fade) {
        wasmContext.SCRTAnimationHelperFade(yValues, progress, yAnimationValues);
    }
};
