import { NumberRange } from "../../../Core/NumberRange";
import { ESeriesType } from "../../../types/SeriesType";
import { DoubleVector, TSciChart } from "../../../types/TSciChart";
import { ELineDrawMode, WebGlRenderContext2D } from "../../Drawing/WebGlRenderContext2D";
import { IDataSeries } from "../../Model/IDataSeries";
import { IPaletteProvider } from "../../Model/IPaletteProvider";
import { RenderPassData } from "../../Services/RenderPassData";
import { IThemeProvider } from "../../Themes/IThemeProvider";
import { AxisCore } from "../Axis/AxisCore";
import { IPointMarker } from "../PointMarkers/IPointMarker";
import { SciChartSurface } from "../SciChartSurface";
import { BaseAnimation } from "./Animations/BaseAnimation";
import { BaseStackedCollection } from "./BaseStackedCollection";
import { ISeriesDrawingProvider } from "./DrawingProviders/ISeriesDrawingProvider";
import { IHitTestProvider } from "./HitTest/IHitTestProvider";
import { IRenderableSeries } from "./IRenderableSeries";
import { RolloverModifierRenderableSeriesProps } from "./RolloverModifier/RolloverModifierRenderableSeriesProps";
import { ShaderEffect } from "./ShaderEffect";
/**
 * Base class for stacked mountain, column series in SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * See derived types {@link StackedMountainRenderableSeries} and {@link StackedColumnRenderableSeries} for
 * details on how to implement stacked column and mountain charts in SciChart
 */
export declare abstract class BaseStackedRenderableSeries implements IRenderableSeries {
    abstract readonly type: ESeriesType;
    readonly id: string;
    readonly isStacked: boolean;
    readonly isSpline: boolean;
    readonly rolloverModifierProps: RolloverModifierRenderableSeriesProps;
    hitTestProvider: IHitTestProvider;
    accumulatedVector: DoubleVector;
    accumulatedVectorAnimationValues: DoubleVector;
    protected webAssemblyContext: TSciChart;
    protected parentCollection: BaseStackedCollection<BaseStackedRenderableSeries>;
    protected notifyParentPropertyChangedFn: (propertyName: string) => void;
    protected getParentSurfaceFn: () => SciChartSurface;
    private dataSeriesProperty;
    private drawNaNAsProperty;
    private isVisibleProperty;
    private paletteProviderProperty;
    private pointMarkerProperty;
    private isDigitalLineProperty;
    private strokeThicknessProperty;
    private strokeProperty;
    private opacityProperty;
    private opacityOriginalValue;
    /**
     * Creates an instance of a {@link BaseStackedRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     */
    protected constructor(webAssemblyContext: TSciChart);
    /** @inheritDoc */
    get isDigitalLine(): boolean;
    /** @inheritDoc */
    set isDigitalLine(isDigitalLine: boolean);
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * @inheritDoc
     */
    delete(): void;
    /**
     * @inheritDoc
     */
    getDataSeriesName(): string;
    /**
     * @inheritDoc
     */
    getDataSeriesValuesCount(): number;
    /**
     * @inheritDoc
     */
    getNativeXValues(): DoubleVector;
    /**
     * Called when the {@link BaseStackedRenderableSeries} is detached from its parent {@link BaseStackedCollection}
     */
    onDetachFromParentCollection(): void;
    /**
     * @inheritDoc
     */
    notifyPropertyChanged(propertyName: string): void;
    /** @inheritDoc */
    checkIsOutOfDataRange(xValue: number, yValue: number): boolean;
    /**
     * invalidateParentCallback() is not supported for BaseStackedRenderableSeries
     */
    invalidateParentCallback(): void;
    /**
     * draw() is not supported for BaseStackedRenderableSeries
     */
    draw(renderContext: WebGlRenderContext2D, renderPassData: RenderPassData): void;
    /**
     * getBaseXValues() is not supported for BaseStackedRenderableSeries
     */
    getBaseXValues(): number[];
    /**
     * getXRange() is not supported for BaseStackedRenderableSeries
     */
    getXRange(): NumberRange;
    /**
     * getYRange() is not supported for BaseStackedRenderableSeries
     */
    getYRange(xVisibleRange: NumberRange, isXCategoryAxis: boolean): NumberRange;
    /**
     * hasDataSeries() is not supported for BaseStackedRenderableSeries
     */
    hasDataSeries(): boolean;
    /**
     * hasDataSeriesValues() is not supported for BaseStackedRenderableSeries
     */
    hasDataSeriesValues(): boolean;
    /**
     * hasStrokePaletteProvider() is not supported for BaseStackedRenderableSeries
     */
    hasStrokePaletteProvider(): boolean;
    /**
     * hasPointMarkerPaletteProvider() is not supported for BaseStackedRenderableSeries
     */
    hasPointMarkerPaletteProvider(): boolean;
    /**
     * hasFillPaletteProvider() is not supported for BaseStackedRenderableSeries
     */
    hasFillPaletteProvider(): boolean;
    /**
     * onAttach() is not supported for BaseStackedRenderableSeries
     */
    onAttach(scs: SciChartSurface): void;
    /**
     * onDetach() is not supported for BaseStackedRenderableSeries
     */
    onDetach(): void;
    /**
     * rolloverModifierProps1() is not supported for BaseStackedRenderableSeries
     */
    set rolloverModifierProps1(value: RolloverModifierRenderableSeriesProps);
    /**
     * rolloverModifierProps1() is not supported for BaseStackedRenderableSeries
     */
    get rolloverModifierProps1(): RolloverModifierRenderableSeriesProps;
    /**
     * animation() is not supported for BaseStackedRenderableSeries
     */
    set animation(value: BaseAnimation);
    /**
     * animation() is not supported for BaseStackedRenderableSeries
     */
    get animation(): BaseAnimation;
    /**
     * @inheritDoc
     */
    get parentSurface(): SciChartSurface;
    /**
     * set parentSurface property is not supported for BaseStackedRenderableSeries
     */
    set parentSurface(value: SciChartSurface);
    /**
     * @inheritDoc
     */
    get dataSeries(): IDataSeries;
    /**
     * @inheritDoc
     */
    set dataSeries(dataSeries: IDataSeries);
    /**
     * @inheritDoc
     */
    get drawNaNAs(): ELineDrawMode;
    /**
     * @inheritDoc
     */
    set drawNaNAs(drawNaNAs: ELineDrawMode);
    /**
     * @inheritDoc
     */
    get isVisible(): boolean;
    /**
     * @inheritDoc
     */
    set isVisible(value: boolean);
    /**
     * @inheritDoc
     */
    get paletteProvider(): IPaletteProvider;
    /**
     * @inheritDoc
     */
    set paletteProvider(paletteProvider: IPaletteProvider);
    /**
     * @inheritDoc
     */
    get pointMarker(): IPointMarker;
    /**
     * @inheritDoc
     */
    set pointMarker(pointMarker: IPointMarker);
    /**
     * @inheritDoc
     */
    get stroke(): string;
    /**
     * @inheritDoc
     */
    set stroke(htmlColorCode: string);
    /**
     * @inheritDoc
     */
    get strokeThickness(): number;
    /**
     * @inheritDoc
     */
    set strokeThickness(value: number);
    /** @inheritDoc */
    get opacity(): number;
    /** @inheritDoc */
    set opacity(value: number);
    /** @inheritDoc */
    get xAxis(): AxisCore;
    /** @inheritDoc */
    get yAxis(): AxisCore;
    /**
     * Internal method that runs on each animation tick
     * @param progress The current animation progress, a value from 0 to 1
     * @param animation
     * @protected
     */
    onAnimate(progress: number, animation: BaseAnimation): void;
    /**
     * Runs before the animation starts
     * @protected
     */
    beforeAnimationStart(): void;
    /**
     * Runs after the animation is complete
     * @protected
     */
    afterAnimationComplete(): void;
    /**
     * drawingProviders property is not supported for BaseStackedRenderableSeries
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    get drawingProviders(): ISeriesDrawingProvider[];
    /**
     * drawingProviders property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    set drawingProviders(value: ISeriesDrawingProvider[]);
    /**
     * xAxisId property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    get xAxisId(): string;
    /**
     * xAxisId property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    set xAxisId(value: string);
    /**
     * yAxisId property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    get yAxisId(): string;
    /**
     * yAxisId property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    set yAxisId(value: string);
    /**
     * effect property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    get effect(): ShaderEffect;
    /**
     * effect property is not supported for BaseStackedRenderableSeries,
     * instead set on the {@link StackedColumnCollection} or {@link StackedMountainCollection}
     */
    set effect(effect: ShaderEffect);
    /**
     * @inheritDoc
     */
    protected abstract newHitTestProvider(): IHitTestProvider;
    private notifyDataSeriesChanged;
    private notifyPointMarkerChanged;
}
