"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RolloverModifierRenderableSeriesProps = void 0;
const Deleter_1 = require("../../../../Core/Deleter");
const defaultThemeColors_1 = require("../../../Themes/defaultThemeColors");
const constants_1 = require("./constants");
class RolloverModifierRenderableSeriesProps {
    constructor() {
        this.tooltipLegendOffsetX = 20;
        this.tooltipLegendOffsetY = 20;
        this.showsRolloverProperty = true;
        this.tooltipColorProperty = defaultThemeColors_1.defaultThemeColors.textAnnotationBackground;
        this.tooltipTextColorProperty = defaultThemeColors_1.defaultThemeColors.textAnnotationForeground;
        this.markerColorProperty = defaultThemeColors_1.defaultThemeColors.textAnnotationBackground;
    }
    setInvalidateParentCallback(callback) {
        this.invalidateParentCallback = callback;
    }
    get showRollover() {
        return this.showsRolloverProperty;
    }
    set showRollover(value) {
        this.showsRolloverProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.SHOWS_ROLLOVER);
    }
    get tooltipColor() {
        return this.tooltipColorProperty;
    }
    set tooltipColor(value) {
        this.tooltipColorProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.TOOLTIP_COLOR);
    }
    get tooltipTextColor() {
        return this.tooltipTextColorProperty;
    }
    set tooltipTextColor(value) {
        this.tooltipTextColorProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.TOOLTIP_TEXT_COLOR);
    }
    get tooltipTitle() {
        return this.tooltipTitleProperty;
    }
    set tooltipTitle(value) {
        this.tooltipTitleProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.TOOLTIP_TITLE);
    }
    get markerColor() {
        return this.markerColorProperty;
    }
    set markerColor(value) {
        this.markerColorProperty = value;
        this.notifyPropertyChanged(constants_1.PROPERTY.MARKER_COLOR);
    }
    delete() {
        this.marker = Deleter_1.deleteSafe(this.marker);
        this.tooltip = Deleter_1.deleteSafe(this.tooltip);
    }
    notifyPropertyChanged(propertyName) {
        if (this.invalidateParentCallback) {
            this.invalidateParentCallback();
        }
    }
}
exports.RolloverModifierRenderableSeriesProps = RolloverModifierRenderableSeriesProps;
