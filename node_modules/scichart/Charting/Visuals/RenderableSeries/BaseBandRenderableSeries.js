"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseBandRenderableSeries = void 0;
const Deleter_1 = require("../../../Core/Deleter");
const defaultThemeColors_1 = require("../../Themes/defaultThemeColors");
const BaseRenderableSeries_1 = require("./BaseRenderableSeries");
const constants_1 = require("./constants");
const BandSeriesDrawingProvider_1 = require("./DrawingProviders/BandSeriesDrawingProvider");
const PointMarkerDrawingProvider_1 = require("./DrawingProviders/PointMarkerDrawingProvider");
const BandSeriesHitTestProvider_1 = require("./HitTest/BandSeriesHitTestProvider");
class BaseBandRenderableSeries extends BaseRenderableSeries_1.BaseRenderableSeries {
    constructor(webAssemblyContext, options) {
        var _a, _b, _c, _d;
        super(webAssemblyContext, options);
        this.stroke = (_a = options === null || options === void 0 ? void 0 : options.stroke) !== null && _a !== void 0 ? _a : defaultThemeColors_1.defaultThemeColors.downBandSeriesLineColor;
        this.strokeY1Property = (_b = options === null || options === void 0 ? void 0 : options.strokeY1) !== null && _b !== void 0 ? _b : defaultThemeColors_1.defaultThemeColors.upBandSeriesLineColor;
        this.fillProperty = (_c = options === null || options === void 0 ? void 0 : options.fill) !== null && _c !== void 0 ? _c : defaultThemeColors_1.defaultThemeColors.upBandSeriesFillColor;
        this.fillY1Property = (_d = options === null || options === void 0 ? void 0 : options.fillY1) !== null && _d !== void 0 ? _d : defaultThemeColors_1.defaultThemeColors.downBandSeriesFillColor;
        this.strokeY1DashArrayProperty = options === null || options === void 0 ? void 0 : options.strokeY1DashArray;
        this.strokeDashArrayProperty = options === null || options === void 0 ? void 0 : options.strokeDashArray;
        this.y1AnimationValues = new webAssemblyContext.DoubleVector();
        this.drawingProviders.push(new BandSeriesDrawingProvider_1.BandSeriesDrawingProvider(webAssemblyContext, this));
        this.drawingProviders.push(new PointMarkerDrawingProvider_1.PointMarkerDrawingProvider(webAssemblyContext, this));
        this.drawingProviders.push(new PointMarkerDrawingProvider_1.PointMarkerDrawingProvider(webAssemblyContext, this, ds => ds.getNativeY1Values(), rs => rs.y1AnimationValues));
    }
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider) {
        super.applyTheme(themeProvider);
        const previousThemeProvider = this.parentSurface.previousThemeProvider;
        if (this.stroke === previousThemeProvider.downBandSeriesLineColor) {
            this.stroke = themeProvider.downBandSeriesLineColor;
        }
        if (this.strokeY1 === previousThemeProvider.upBandSeriesLineColor) {
            this.strokeY1 = themeProvider.upBandSeriesLineColor;
        }
        if (this.fill === previousThemeProvider.upBandSeriesFillColor) {
            this.fill = themeProvider.upBandSeriesFillColor;
        }
        if (this.fillY1 === previousThemeProvider.downBandSeriesFillColor) {
            this.fillY1 = themeProvider.downBandSeriesFillColor;
        }
    }
    /**
     * Gets or sets the fill color for when Y is less than Y as an HTML Color code
     */
    get fill() {
        return this.fillProperty;
    }
    /**
     * Gets or sets the fill color for when Y is less than Y1 as an HTML Color code
     */
    set fill(fill) {
        this.fillProperty = fill;
        this.notifyPropertyChanged(constants_1.PROPERTY.FILL);
    }
    /**
     * Gets or sets the stroke color the Y1 values in the data-series.
     * See associated {@link XyyDataSeries} for further information
     */
    get strokeY1() {
        return this.strokeY1Property;
    }
    /**
     * Gets or sets the stroke color the Y1 values in the data-series.
     * See associated {@link XyyDataSeries} for further information
     */
    set strokeY1(strokeY1) {
        this.strokeY1Property = strokeY1;
        this.notifyPropertyChanged(constants_1.PROPERTY.STROKE_Y1);
    }
    /**
     * Gets or sets the fill color for when Y1 is less than Y as an HTML Color code
     */
    get fillY1() {
        return this.fillY1Property;
    }
    /**
     * Gets or sets the fill color for when Y1 is less than Y as an HTML Color code
     */
    set fillY1(fillY1) {
        this.fillY1Property = fillY1;
        this.notifyPropertyChanged(constants_1.PROPERTY.FILL_Y1);
    }
    /**
     * The StrokeDashArray defines the stroke or dash pattern for the Y0 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    get strokeDashArray() {
        return this.strokeDashArrayProperty;
    }
    /**
     * The StrokeDashArray defines the stroke or dash pattern for the Y0 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    set strokeDashArray(strokeDashArray) {
        this.strokeDashArrayProperty = strokeDashArray;
        this.notifyPropertyChanged(constants_1.PROPERTY.STROKE_DASH_ARRAY);
    }
    /**
     * The strokeY1DashArray defines the stroke or dash pattern for the Y1 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    get strokeY1DashArray() {
        return this.strokeY1DashArrayProperty;
    }
    /**
     * The strokeY1DashArray defines the stroke or dash pattern for the Y1 line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    set strokeY1DashArray(strokeY1DashArray) {
        this.strokeY1DashArrayProperty = strokeY1DashArray;
        this.notifyPropertyChanged(constants_1.PROPERTY.STROKE_Y1_DASH_ARRAY);
    }
    /** @inheritDoc */
    delete() {
        this.y1AnimationValues = Deleter_1.deleteSafe(this.y1AnimationValues);
        super.delete();
    }
    /**
     * @inheritDoc
     */
    newHitTestProvider() {
        return new BandSeriesHitTestProvider_1.BandSeriesHitTestProvider(this);
    }
}
exports.BaseBandRenderableSeries = BaseBandRenderableSeries;
