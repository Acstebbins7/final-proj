"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastCandlestickRenderableSeries = void 0;
const defaultThemeColors_1 = require("../../Themes/defaultThemeColors");
const constants_1 = require("./constants");
const OhlcSeriesDrawingProvider_1 = require("./DrawingProviders/OhlcSeriesDrawingProvider");
const FastOhlcRenderableSeries_1 = require("./FastOhlcRenderableSeries");
/**
 * Defines a JavaScript Candlestick stock-chart series in the SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * To add a Candlestick series to a {@link SciChartSurface} you need to declare both the {@link FastCandlestickRenderableSeries | RenderableSeries}
 * and a {@link OhlcDataSeries | OhlcDataSeries}. Simplified code sample below:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * // Create and fill the dataseries
 * const dataSeries = new OhlcDataSeries(wasmContext);
 * dataSeries.append(dateValues, openValues, highValues, lowValues, closeValues);
 * // Create the renderableSeries
 * const ohlcSeries = new FastCandlestickRenderableSeries(wasmContext);
 * ohlcSeries.dataSeries = dataSeries;
 * // append to the SciChartSurface
 * sciChartSurface.renderableSeries.add(ohlcSeries);
 * ```
 */
class FastCandlestickRenderableSeries extends FastOhlcRenderableSeries_1.FastOhlcRenderableSeries {
    /**
     * Creates an instance of the {@link FastCandlestickRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options optional parameters of type {@link ICandlestickSeriesOptions} applied when constructing the series type
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        this.brushUp = (options === null || options === void 0 ? void 0 : options.brushUp) || defaultThemeColors_1.defaultThemeColors.upBodyBrush;
        this.brushDown = (options === null || options === void 0 ? void 0 : options.brushDown) || defaultThemeColors_1.defaultThemeColors.downBodyBrush;
        this.drawingProviders = [];
        this.drawingProviders.push(new OhlcSeriesDrawingProvider_1.OhlcSeriesDrawingProvider(webAssemblyContext, this, OhlcSeriesDrawingProvider_1.EOhlcDrawingMode.Candles));
    }
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider) {
        super.applyTheme(themeProvider);
        const previousThemeProvider = this.parentSurface.previousThemeProvider;
        if (this.brushUp === previousThemeProvider.upBodyBrush) {
            this.brushUp = themeProvider.upBodyBrush;
        }
        if (this.brushDown === previousThemeProvider.downBodyBrush) {
            this.brushDown = themeProvider.downBodyBrush;
        }
    }
    /**
     * Gets or sets the fill when candlestick close is greater than open, as an HTML color code
     */
    get brushUp() {
        return this.brushUpProperty;
    }
    /**
     * Gets or sets the fill when candlestick close is greater than open, as an HTML color code
     */
    set brushUp(htmlColorCode) {
        this.brushUpProperty = htmlColorCode;
        this.notifyPropertyChanged(constants_1.PROPERTY.BRUSH_UP);
    }
    /**
     * Gets or sets the fill when candlestick close is less than open, as an HTML color code
     */
    get brushDown() {
        return this.brushDownProperty;
    }
    /**
     * Gets or sets the fill when candlestick close is less than open, as an HTML color code
     */
    set brushDown(htmlColorCode) {
        this.brushDownProperty = htmlColorCode;
        this.notifyPropertyChanged(constants_1.PROPERTY.BRUSH_DOWN);
    }
}
exports.FastCandlestickRenderableSeries = FastCandlestickRenderableSeries;
