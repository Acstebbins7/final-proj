import { DoubleVector, TSciChart } from "../../../../types/TSciChart";
import { WebGlRenderContext2D } from "../../../Drawing/WebGlRenderContext2D";
import { IDataSeries } from "../../../Model/IDataSeries";
import { RenderPassData } from "../../../Services/RenderPassData";
import { BaseRenderableSeries } from "../BaseRenderableSeries";
import { IRenderableSeries } from "../IRenderableSeries";
import { BaseSeriesDrawingProvider } from "./BaseSeriesDrawingProvider";
/**
 * Used internally - a drawing provider performs drawing for a {@link IRenderableSeries | Renderable Series} which draw a
 * point-marker using our WebAssembly WebGL rendering engine
 */
export declare class PointMarkerDrawingProvider extends BaseSeriesDrawingProvider<IRenderableSeries> {
    private nativeDrawingProvider;
    private ySelector;
    private yAnimationValuesSelector;
    private yAnimationValuesDP;
    /**
     * Creates an instance of the {@link PointMarkerDrawingProvider}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param parentSeries the parent {@link IRenderableSeries} which this drawing provider is attached to
     * @param ySelector an optional Y-selector for choosing which y-values to use for drawing points
     * @param yAnimationSelector an optional selector for choosing which y-animation values to use for drawing points
     */
    constructor(webAssemblyContext: TSciChart, parentSeries: IRenderableSeries, ySelector?: (ds: IDataSeries) => DoubleVector, yAnimationSelector?: (rs: BaseRenderableSeries) => DoubleVector);
    /**
     * @inheritDoc
     */
    onSeriesPropertyChange(propertyName: string): void;
    /**
     * @inheritDoc
     */
    draw(renderContext: WebGlRenderContext2D, renderPassData: RenderPassData): void;
    /**
     * @inheritDoc
     */
    delete(): void;
    private drawPoints;
    private updateAnimationValues;
}
