import { IDeletable } from "../../../../Core/IDeletable";
import { SCRTBrush, TSciChart, UIntVector } from "../../../../types/TSciChart";
import { PaletteCache } from "../../../Drawing/PaletteCache";
import { WebGlRenderContext2D } from "../../../Drawing/WebGlRenderContext2D";
import { RenderPassData } from "../../../Services/RenderPassData";
import { BaseAnimation } from "../Animations/BaseAnimation";
import { IRenderableSeries } from "../IRenderableSeries";
import { ISeriesDrawingProvider } from "./ISeriesDrawingProvider";
/** @ignore */
export interface ISCRTPen {
    m_bGradient: boolean;
    m_uiColor: number;
}
/** @ignore */
export interface ISCRTBrush {
    GetColor(): number;
    SetColor(uiColor: number): void;
}
/** @ignore */
export interface ISCRTPalette extends IDeletable {
    GetOptimizedIndex(colorIndex: number): number;
}
export declare type TPalettingState = {
    palettedColors: UIntVector;
    palettedColorsHashCode: number;
    gradientPaletting: boolean;
    paletteTextureCache?: PaletteCache;
    originalPenColor?: number;
    originalPenGradient?: boolean;
    originalBrushColor?: number;
};
/**
 * Used internally - a drawing provider performs drawing for a specific chart-type or series using
 * our WebAssembly WebGL rendering engine
 */
export declare abstract class BaseSeriesDrawingProvider<T extends IRenderableSeries> implements ISeriesDrawingProvider {
    /**
     * The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     */
    protected webAssemblyContext: TSciChart;
    /**
     * The Parent {@link IRenderableSeries | RenderableSeries}
     */
    protected parentSeries: T;
    /**
     * The Colour Paletting State object.
     */
    protected palettingState: TPalettingState;
    private parentDataSeries;
    /**
     * Creates an instance of the {@link BaseSeriesDrawingProvider}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param parentSeries the parent {@link IRenderableSeries | Renderable Series} which this drawing provider is attached to
     */
    protected constructor(webAssemblyContext: TSciChart, parentSeries: T);
    /**
     * Helper function to apply color-paletting to a {@link UIntVector} - where each element in the vector
     * is an ARGB color that defines stroke of the series
     * @param strokePen the current pen, as type {@link SCRTPen}
     * @returns the new {@link UIntVector} with ARGB colors
     */
    applyStrokePaletting(strokePen: ISCRTPen): void;
    applyStrokeFillPaletting(stroke: string, strokePen: ISCRTPen, fill: string, fillBrush: ISCRTBrush, opacity: number, usePalette?: boolean, resetPenBrushColors?: boolean): void;
    /**
     * Creates a native {@link SCRTBrush} Solid Color Brush from html color code string passed in
     * @param htmlColorCode The HTML Color code
     * @param opacity The opacity factor
     */
    createSolidBrush(htmlColorCode: string, opacity: number): SCRTBrush;
    /**
     * @inheritDoc
     */
    delete(): void;
    /**
     * @inheritDoc
     */
    abstract draw(renderContext: WebGlRenderContext2D, renderPassData: RenderPassData): void;
    /**
     * @inheritDoc
     */
    onSeriesPropertyChange(propertyName: string): void;
    /**
     * @inheritDoc
     */
    onAttachSeries(): void;
    /**
     * @inheritDoc
     */
    onDetachSeries(): void;
    /**
     * Internal method that runs on each animation tick
     * @param progress The current animation progress, a value from 0 to 1
     * @param animation The current animation type
     */
    onAnimate(progress: number, animation: BaseAnimation): void;
    protected seriesHasDataChanges(): void;
}
