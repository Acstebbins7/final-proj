"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniformContoursDrawingProvider = void 0;
const app_1 = require("../../../../constants/app");
const Deleter_1 = require("../../../../Core/Deleter");
const Guard_1 = require("../../../../Core/Guard");
const parseColor_1 = require("../../../../utils/parseColor");
const TextureCache_1 = require("../../../Drawing/TextureCache");
const CanvasTexture_1 = require("../../TextureManager/CanvasTexture");
const constants_1 = require("../constants");
const UniformHeatmapRenderableSeries_1 = require("../UniformHeatmapRenderableSeries");
const BaseSeriesDrawingProvider_1 = require("./BaseSeriesDrawingProvider");
/**
 * Used internally - a drawing provider performs drawing for a {@link UniformContoursDrawingProvider} using
 * our WebAssembly WebGL rendering engine
 */
class UniformContoursDrawingProvider extends BaseSeriesDrawingProvider_1.BaseSeriesDrawingProvider {
    /**
     * Creates an instance of the {@link UniformContoursRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param parentSeries the parent {@link UniformContoursDrawingProvider} which this drawing provider is attached to
     */
    constructor(webAssemblyContext, parentSeries) {
        super(webAssemblyContext, parentSeries);
        this.heightsTextureCache = new TextureCache_1.TextureCache(webAssemblyContext);
        this.onSeriesPropertyChange(constants_1.PROPERTY.DATA_SERIES);
        this.onSeriesPropertyChange(constants_1.PROPERTY.COLOR_MAP);
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.heightsTextureCache = Deleter_1.deleteSafe(this.heightsTextureCache);
        this.heightData = Deleter_1.deleteSafe(this.heightData);
        this.paletteTexture = Deleter_1.deleteSafe(this.paletteTexture);
        super.delete();
    }
    /**
     * @inheritDoc
     */
    onSeriesPropertyChange(propertyName) {
        const recreatePalette = propertyName === constants_1.PROPERTY.COLOR_MAP || propertyName.includes(UniformHeatmapRenderableSeries_1.COLOR_MAP_PREFIX);
        const recreateHeightmap = propertyName === constants_1.PROPERTY.DATA_SERIES;
        if (recreatePalette) {
            // DrawHeatmapRectWithContours("Delete/recreating paletteTexture");
            this.paletteTexture = Deleter_1.deleteSafe(this.paletteTexture);
            if (this.parentSeries.colorMap && this.parentSeries.colorMap.gradientStops) {
                // create palette texture at size 256x1
                this.paletteTexture = this.createPaletteTexture(256, 1, this.parentSeries.colorMap.gradientStops);
            }
            else {
                this.paletteTexture = this.createPaletteTexture(256, 1, undefined);
            }
        }
        if (recreateHeightmap) {
            // console.log("Delete/recreating heightmap texture");
            const dataSeries = this.parentSeries.dataSeries;
            if (dataSeries) {
                // create heightmap texture at same size as the dataSeries array
                const heightsTexture = this.heightsTextureCache.create(dataSeries.arrayWidth, dataSeries.arrayHeight, this.webAssemblyContext.eTSRTextureFormat.TSR_TEXTUREFORMAT_R32F);
                // Set whether to use interpolation for the Heatmap or not
                this.webAssemblyContext.SCRTSetTextureLinearSamplerEnabled(heightsTexture, true);
            }
        }
    }
    /**
     * @inheritDoc
     */
    draw(renderContext, renderPassData) {
        var _a, _b;
        const heightsTexture = (_a = this.heightsTextureCache) === null || _a === void 0 ? void 0 : _a.value;
        if (heightsTexture) {
            const dataSeries = this.parentSeries.dataSeries;
            this.webAssemblyContext.SCRTFillTextureFloat32(heightsTexture, dataSeries.arrayWidth, dataSeries.arrayHeight, dataSeries.getNormalizedVector((_b = this.parentSeries.colorMap) !== null && _b !== void 0 ? _b : this.getDefaultColorMap(dataSeries)));
            // DEBUG CODE: REMOVE AFTER DEVELOPMENT COMPLETE
            // renderContext.getNativeContext().DrawTexture(this.heightsTexture, 10, 100, 256, 256);
            // renderContext.getNativeContext().DrawTexture(this.paletteTexture.getTexture(), 310, 100, 256, 256);
            // END DEBUG CODE
            const cParams = this.parentSeries.getContourDrawingParams();
            const x = renderPassData.xCoordinateCalculator.getCoordinate(cParams.xMin);
            const y = renderPassData.yCoordinateCalculator.getCoordinate(cParams.yMin);
            const width = renderPassData.xCoordinateCalculator.getCoordinate(cParams.xMax);
            const height = renderPassData.yCoordinateCalculator.getCoordinate(cParams.yMax);
            if (this.parentSeries.minorsPerMajor > 0) {
                this.drawContours(renderContext, x, y, width, height, cParams.zMin, cParams.zMax, cParams.minorStepZ, cParams.minorLineStyle);
            }
            this.drawContours(renderContext, x, y, width, height, cParams.zMin, cParams.zMax, cParams.majorStepZ, cParams.majorLineStyle);
        }
    }
    drawContours(renderContext, x, y, width, height, zMin, zMax, zStep, lineStyle) {
        // Compute params for contours
        const floatParams = new this.webAssemblyContext.TSRVector4(0, 1, 0, 0);
        const contourParams = new this.webAssemblyContext.SCRTContourParams();
        const offset = Math.abs(zMin) < app_1.EPSILON ? 0.5 : 0.01;
        const strokeColor = parseColor_1.parseColorToTArgb(lineStyle.color);
        contourParams.SetColorVector(strokeColor.red / 255, strokeColor.green / 255, strokeColor.blue / 255, strokeColor.opacity / 255);
        contourParams.SetParamsAVector(lineStyle.strokeThickness, zStep / 2, // FOR SHADY should this be 1.0 / cParams.majorStepZ ? seems to have no effect
        offset, 0);
        contourParams.SetParamsBVector(zMin, zMax, 0, 0);
        // Draw major contour lines
        const nativeContext = renderContext.getNativeContext();
        const viewRect = this.parentSeries.parentSurface.seriesViewRect;
        nativeContext.PushMatrix();
        nativeContext.PushState();
        nativeContext.Translate(viewRect.x, viewRect.y);
        nativeContext.SetClipRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
        // console.log(`viewRect: ${viewRect.x}, ${viewRect.y}, ${viewRect.width}, ${viewRect.height}`);
        // console.log(`contours bounds: ${startX}, ${startY}, ${endX}, ${endY}`);
        const heightsTexture = this.heightsTextureCache.value;
        nativeContext.DrawHeatmapRectWithContours(null, heightsTexture, x, y, width, height, floatParams, contourParams);
        floatParams === null || floatParams === void 0 ? void 0 : floatParams.delete();
        contourParams === null || contourParams === void 0 ? void 0 : contourParams.delete();
        nativeContext.PopMatrix();
        nativeContext.PopState();
    }
    computeHeightMap(textureHeight, textureWidth, zValues, isVerticalChart, xFlipped, yFlipped) {
        var _a;
        const arraySize = textureHeight * textureWidth;
        if (((_a = this.heightData) === null || _a === void 0 ? void 0 : _a.size()) !== arraySize) {
            // console.log("Resizing heightmap texture to " + arraySize);
            this.heightData = Deleter_1.deleteSafe(this.heightData);
            this.heightData = new this.webAssemblyContext.FloatVector();
            this.heightData.resize(arraySize, 0);
        }
        for (let y = 0; y < textureHeight; y++) {
            for (let x = 0; x < textureWidth; x++) {
                const zValue = !isVerticalChart
                    ? zValues[!yFlipped ? (textureHeight - 1) - y : y][xFlipped ? (textureWidth - x) - 1 : x]
                    : zValues[!yFlipped ? (textureWidth - 1) - x : x][xFlipped ? (textureHeight - y) - 1 : y];
                // Todo: Set into a javascript array then bulk set the array on heightData
                this.heightData.set(y * textureWidth + x, isNaN(zValue) ? -1.0 : zValue);
            }
        }
        return this.heightData;
    }
    createPaletteTexture(width, height, gradientStops) {
        if (app_1.IS_TEST_ENV) {
            return undefined;
        }
        Guard_1.Guard.isTrue(width > 0, "width must be greater than 0");
        Guard_1.Guard.isTrue(height > 0, "height must be greater than 0");
        const canvasTexture = new CanvasTexture_1.CanvasTexture(this.webAssemblyContext, width, height);
        canvasTexture.clear();
        const ctx = canvasTexture.getContext();
        // BEGIN: Drawing gradient rectangle on canvas2D
        const x1 = 0;
        const y1 = 0;
        const x2 = width;
        const y2 = 0;
        if (gradientStops) {
            const gradient = ctx.createLinearGradient(x1, y1, x2, y2);
            gradientStops.forEach(el => {
                gradient.addColorStop(el.offset, el.color);
            });
            ctx.fillStyle = gradient;
        }
        else {
            ctx.fillStyle = "black";
        }
        ctx.fillRect(0, 0, width, height);
        // END: Drawing gradient rectangle on canvas2D
        canvasTexture.copyTexture();
        return canvasTexture;
    }
    getDefaultColorMap(dataSeries) {
        const zRange = dataSeries.zRange;
        return { minimum: zRange.min, maximum: zRange.max };
    }
}
exports.UniformContoursDrawingProvider = UniformContoursDrawingProvider;
