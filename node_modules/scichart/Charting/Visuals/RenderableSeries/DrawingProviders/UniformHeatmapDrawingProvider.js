"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniformHeatmapDrawingProvider = void 0;
const app_1 = require("../../../../constants/app");
const Deleter_1 = require("../../../../Core/Deleter");
const Guard_1 = require("../../../../Core/Guard");
const TextureCache_1 = require("../../../Drawing/TextureCache");
const CanvasTexture_1 = require("../../TextureManager/CanvasTexture");
const constants_1 = require("../constants");
const UniformHeatmapRenderableSeries_1 = require("../UniformHeatmapRenderableSeries");
const BaseSeriesDrawingProvider_1 = require("./BaseSeriesDrawingProvider");
/**
 * Used internally - a drawing provider performs drawing for a {@link UniformHeatmapRenderableSeries} using
 * our WebAssembly WebGL rendering engine
 */
class UniformHeatmapDrawingProvider extends BaseSeriesDrawingProvider_1.BaseSeriesDrawingProvider {
    /**
     * Creates an instance of the {@link UniformHeatmapDrawingProvider}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param parentSeries the parent {@link UniformHeatmapRenderableSeries} which this drawing provider is attached to
     */
    constructor(webAssemblyContext, parentSeries) {
        super(webAssemblyContext, parentSeries);
        this.heatTextureCache = new TextureCache_1.TextureCache(webAssemblyContext);
        this.recreatePalette();
        this.onSeriesPropertyChange(constants_1.PROPERTY.DATA_SERIES);
        this.onSeriesPropertyChange(constants_1.PROPERTY.COLOR_MAP);
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.paletteTexture = Deleter_1.deleteSafe(this.paletteTexture);
        this.heatTextureCache = Deleter_1.deleteSafe(this.heatTextureCache);
        super.delete();
    }
    /**
     * @inheritDoc
     */
    onSeriesPropertyChange(propertyName) {
        const recreatePalette = propertyName === constants_1.PROPERTY.COLOR_MAP ||
            propertyName.includes(UniformHeatmapRenderableSeries_1.COLOR_MAP_PREFIX) ||
            propertyName === constants_1.PROPERTY.OPACITY;
        const recreateHeat = propertyName === constants_1.PROPERTY.DATA_SERIES || constants_1.PROPERTY.USE_LINEAR_TEXTURE_FILTERING;
        if (recreatePalette) {
            this.recreatePalette();
        }
        if (recreateHeat) {
            const dataSeries = this.parentSeries.dataSeries;
            const heatmapDataSeries = this.parentSeries;
            const useInterpolation = heatmapDataSeries.useLinearTextureFiltering;
            if (dataSeries) {
                // create heat texture at same size as the dataSeries array
                const heatTexture = this.heatTextureCache.create(dataSeries.arrayWidth, dataSeries.arrayHeight, this.webAssemblyContext.eTSRTextureFormat.TSR_TEXTUREFORMAT_R32F);
                // Set whether to use interpolation for the Heatmap or not
                this.webAssemblyContext.SCRTSetTextureLinearSamplerEnabled(heatTexture, useInterpolation);
            }
        }
    }
    /**
     * @inheritDoc
     */
    draw(renderContext, renderPassData) {
        // DEBUG CODE: REMOVE AFTER PALETTING ISSUE FIXED
        // console.log("Drawing heatmap!");
        // if (this.paletteTexture) {
        //     renderContext.getNativeContext().DrawTexture(this.paletteTexture.getTexture(), 0, 0, 256, 10);
        // }
        // END DEBUG CODE
        var _a;
        const { isVerticalChart } = renderPassData;
        // TODO: refactor inverted logic with hasFlippedCoordinates!!!
        // The logic is inverted here :)
        const hasFlippedXCoordinates = !renderPassData.xCoordinateCalculator.hasFlippedCoordinates;
        const hasFlippedYCoordinates = renderPassData.yCoordinateCalculator.hasFlippedCoordinates;
        const heatTexture = (_a = this.heatTextureCache) === null || _a === void 0 ? void 0 : _a.value;
        if (heatTexture) {
            const dataSeries = this.parentSeries.dataSeries;
            this.packedFloatParams = this.webAssemblyContext.SCRTFillTextureFloat32(heatTexture, dataSeries.arrayWidth, dataSeries.arrayHeight, dataSeries.getNormalizedVector(this.parentSeries.colorMap));
            this.packedFloatParams.x = 0;
            this.packedFloatParams.y = 1;
            // DEBUG CODE: REMOVE AFTER DEVELOPMENT COMPLETE
            // renderContext.getNativeContext().DrawTexture(this.heatTexture, 10, 100, 256, 256);
            // renderContext.getNativeContext().DrawTexture(this.paletteTexture.getTexture(), 310, 100, 256, 256);
            // END DEBUG CODE
            const xRange = dataSeries.xRange;
            const yRange = dataSeries.yRange;
            const xMin = renderPassData.xCoordinateCalculator.getCoordinate(xRange.min);
            const yMin = renderPassData.yCoordinateCalculator.getCoordinate(yRange.min);
            const xMax = renderPassData.xCoordinateCalculator.getCoordinate(xRange.max);
            const yMax = renderPassData.yCoordinateCalculator.getCoordinate(yRange.max);
            const nativeContext = renderContext.getNativeContext();
            const viewRect = this.parentSeries.parentSurface.seriesViewRect;
            nativeContext.PushMatrix();
            nativeContext.PushState();
            const textureWidth = Math.abs(xMin - xMax);
            if (isVerticalChart) {
                nativeContext.Rotate(-90);
                const xTrans = hasFlippedXCoordinates ? -viewRect.y - xMin : -textureWidth - viewRect.y - xMin;
                nativeContext.Translate(xTrans, viewRect.x);
                nativeContext.SetClipRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
                const x = hasFlippedXCoordinates ? 0 : textureWidth;
                const width = hasFlippedXCoordinates ? textureWidth : 0;
                const y = yMin;
                const height = yMax;
                this.drawHeatmap(nativeContext, x, y, width, height);
                // Maybe to use nativeContext.Scale(-1, 1);???
            }
            else {
                nativeContext.Translate(viewRect.x, viewRect.y);
                nativeContext.SetClipRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
                this.drawHeatmap(nativeContext, xMin, yMin, xMax, yMax);
            }
            nativeContext.PopMatrix();
            nativeContext.PopState();
        }
    }
    createPaletteTexture(width, height, gradientStops, globalOpacity) {
        if (app_1.IS_TEST_ENV) {
            return undefined;
        }
        Guard_1.Guard.isTrue(width > 0, "width must be greater than 0");
        Guard_1.Guard.isTrue(height > 0, "height must be greater than 0");
        Guard_1.Guard.notNull(gradientStops, "gradientStops");
        const canvasTexture = new CanvasTexture_1.CanvasTexture(this.webAssemblyContext, width, height);
        canvasTexture.clear();
        const ctx = canvasTexture.getContext();
        // BEGIN: Drawing gradient rectangle on canvas2D
        const x1 = 0;
        const y1 = 0;
        const x2 = width;
        const y2 = 0;
        const gradient = ctx.createLinearGradient(x1, y1, x2, y2);
        gradientStops.forEach(el => {
            gradient.addColorStop(el.offset, el.color);
        });
        ctx.fillStyle = gradient;
        ctx.globalAlpha = globalOpacity;
        ctx.fillRect(0, 0, width, height);
        // END: Drawing gradient rectangle on canvas2D
        canvasTexture.copyTexture();
        return canvasTexture;
    }
    recreatePalette() {
        this.paletteTexture = Deleter_1.deleteSafe(this.paletteTexture);
        if (this.parentSeries.colorMap && this.parentSeries.colorMap.gradientStops) {
            // console.log("Creating palette texture");
            // create palette texture at size 256x1
            this.paletteTexture = this.createPaletteTexture(256, 1, this.parentSeries.colorMap.gradientStops, this.parentSeries.opacity);
        }
    }
    drawHeatmap(nativeContext, x, y, width, height) {
        // Draw the heatmap at the specified locations
        // TODO: figure out what todo with this TSRVector4
        const v4 = this.packedFloatParams;
        const contourParams = new this.webAssemblyContext.SCRTContourParams();
        // nativeContext.DrawHeatmapRect(this.paletteTexture.getTexture(), this.heatTexture, x, y, width, height, v4);
        const heatTexture = this.heatTextureCache.value;
        nativeContext.DrawHeatmapRectWithContours(this.paletteTexture.getTexture(), // this.paletteTexture.getTexture
        heatTexture, x, y, width, height, v4, contourParams);
        contourParams.delete();
        v4.delete();
    }
}
exports.UniformHeatmapDrawingProvider = UniformHeatmapDrawingProvider;
