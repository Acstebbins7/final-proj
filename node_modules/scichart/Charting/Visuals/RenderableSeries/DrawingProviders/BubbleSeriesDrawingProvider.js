"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BubbleSeriesDrawingProvider = void 0;
const Deleter_1 = require("../../../../Core/Deleter");
const BaseSeriesDrawingProvider_1 = require("./BaseSeriesDrawingProvider");
/**
 * Used internally - a drawing provider performs drawing for a {@link FastBubbleRenderableSeries} using
 * our WebAssembly WebGL rendering engine
 */
class BubbleSeriesDrawingProvider extends BaseSeriesDrawingProvider_1.BaseSeriesDrawingProvider {
    /**
     * Creates an instance of the {@link BubbleSeriesDrawingProvider}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param parentSeries the parent {@link FastBubbleRenderableSeries} which this drawing provider is attached to
     */
    constructor(webAssemblyContext, parentSeries) {
        super(webAssemblyContext, parentSeries);
        this.nativeDrawingProvider = new this.webAssemblyContext.SCRTBubbleSeriesDrawingProvider();
    }
    /**
     * @inheritDoc
     */
    onSeriesPropertyChange(propertyName) {
        // Deliberately empty
    }
    /**
     * @inheritDoc
     */
    draw(renderContext, renderPassData) {
        const pointMarker = this.parentSeries.pointMarker;
        if (pointMarker === undefined) {
            return;
        }
        const spriteTexture = pointMarker.getSprite();
        const dataSeries = this.parentSeries.dataSeries;
        const isCategoryAxis = renderPassData.xCoordinateCalculator.isCategoryCoordinateCalculator;
        const args = new this.webAssemblyContext.SCRTPointDrawingParams();
        const { isRunningAnimation } = this.parentSeries;
        const xValues = dataSeries.getNativeXValues();
        let yValues;
        let zValues;
        if (isRunningAnimation) {
            yValues = this.parentSeries.yAnimationValues;
            zValues = this.parentSeries.zAnimationValues;
        }
        else {
            yValues = dataSeries.getNativeYValues();
            zValues = dataSeries.getNativeZValues();
        }
        args.count = yValues.size();
        args.verticalChart = false;
        args.forceShaderMethod = true;
        args.SetSpriteTexture(spriteTexture.getTexture());
        // Paletting per point
        super.applyStrokeFillPaletting(this.parentSeries.stroke, undefined, undefined, undefined, this.parentSeries.opacity);
        args.SetPalettedColors(this.palettingState.palettedColors);
        const nativeContext = renderContext.getNativeContext();
        this.drawPoints(nativeContext, isCategoryAxis ? dataSeries.getNativeIndexes() : xValues, yValues, zValues, renderPassData.xCoordinateCalculator.nativeCalculator, renderPassData.yCoordinateCalculator.nativeCalculator, args, this.parentSeries.parentSurface.seriesViewRect);
        args.delete();
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.nativeDrawingProvider = Deleter_1.deleteSafe(this.nativeDrawingProvider);
        super.delete();
    }
    drawPoints(nativeContext, xValues, yValues, zValues, xCoordCalc, yCoordCalc, args, viewRect) {
        nativeContext.PushMatrix();
        nativeContext.PushState();
        nativeContext.Translate(viewRect.x, viewRect.y);
        nativeContext.SetClipRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
        this.nativeDrawingProvider.DrawPointsVec(nativeContext, xValues, yValues, zValues, xCoordCalc, yCoordCalc, args);
        nativeContext.PopMatrix();
        nativeContext.PopState();
    }
}
exports.BubbleSeriesDrawingProvider = BubbleSeriesDrawingProvider;
