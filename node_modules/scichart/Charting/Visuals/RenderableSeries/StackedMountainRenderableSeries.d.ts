import { ESeriesType } from "../../../types/SeriesType";
import { SCRTBrush, SCRTPen, TSciChart } from "../../../types/TSciChart";
import { SciChartSurface } from "../SciChartSurface";
import { BaseStackedCollection } from "./BaseStackedCollection";
import { BaseStackedRenderableSeries } from "./BaseStackedRenderableSeries";
import { IHitTestProvider } from "./HitTest/IHitTestProvider";
/**
 * @summary The {@link StackedMountainRenderableSeries} allows creating JavaScript Stacked Mountain charts
 * @description
 * Multiple {@link StackedMountainRenderableSeries} are required to create a stacked column chart type in SciChart.
 * These are grouped with a {@link StackedMountainCollection}, which implements {@link IRenderableSeries} and may be added
 * directly to a {@link SciChartSurface.renderableSeries} collection.
 *
 * Code sample below for creating a stacked mountain chart
 * ```ts
 * const stackedMountain0 = new StackedMountainRenderableSeries(wasmContext);
 * // .. configure mountain 1, including set dataSeries
 * const stackedMountain1 = new StackedMountainRenderableSeries(wasmContext);
 * // .. configure mountain 2, including set dataSeries
 * const stackedMountain2 = new StackedMountainRenderableSeries(wasmContext);
 * // .. configure mountain 3, including set dataSeries
 * const stackedMountainCollection = new StackedMountainCollection(wasmContext);
 * stackedMountainCollection.add(stackedMountain0, stackedMountain1, stackedMountain2);
 *
 * sciChartSurface.renderableSeries.add(stackedMountainCollection);
 * ````
 * @remarks
 * Do not add the {@link StackedMountainRenderableSeries} directly to {@link SciChartSurface.renderableSeries} array, instead,
 * use a {@link StackedMountainCollection} to group / stack the mountains.
 */
export declare class StackedMountainRenderableSeries extends BaseStackedRenderableSeries {
    readonly type: ESeriesType;
    private fillProperty;
    private strokePenCache;
    private fillBrushCache;
    /**
     * Creates an instance of the {@link StackedMountainRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     */
    constructor(webAssemblyContext: TSciChart);
    /**
     * @inheritDoc
     */
    delete(): void;
    /**
     * Called internally when the {@link StackedMountainRenderableSeries} is attached to a parent {@link StackedMountainCollection}
     * @param parentCollection the parent {@link BaseStackedCollection}
     * @param getParentSurfaceFn function to get the parent {@link SciChartSurface}
     * @param notifyPropertyChangedFn function to notify property has changed
     */
    onAttachToParentCollection(parentCollection: BaseStackedCollection<BaseStackedRenderableSeries>, getParentSurfaceFn: () => SciChartSurface, notifyPropertyChangedFn: (propertyName: string) => void): void;
    /**
     * Gets the fill brush of the mountain as an HTML color code
     */
    getFillBrush(): SCRTBrush;
    /**
     * Gets the stroke of the mountain as an HTML color code
     */
    getStrokePen(): SCRTPen;
    /**
     * @inheritDoc
     */
    notifyPropertyChanged(propertyName: string): void;
    /**
     * Gets or sets the fill brush of the mountain as an HTML color code
     */
    get fill(): string;
    /**
     * Gets or sets the fill brush of the mountain as an HTML color code
     */
    set fill(fill: string);
    /**
     * @inheritDoc
     */
    protected newHitTestProvider(): IHitTestProvider;
}
