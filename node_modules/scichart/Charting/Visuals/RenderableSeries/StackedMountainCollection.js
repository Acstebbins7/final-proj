"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackedMountainCollection = void 0;
const Deleter_1 = require("../../../Core/Deleter");
const NumberRange_1 = require("../../../Core/NumberRange");
const SeriesType_1 = require("../../../types/SeriesType");
const Pen2DCache_1 = require("../../Drawing/Pen2DCache");
const BaseDataSeries_1 = require("../../Model/BaseDataSeries");
const BaseStackedCollection_1 = require("./BaseStackedCollection");
const constants_1 = require("./constants");
/**
 * @summary A {@link StackedMountainCollection} allows grouping multiple {@link StackedMountainRenderableSeries}
 * to create a JavaScript Stacked Mountain chart, or 100% Stacked Mountain chart
 * @description
 * Multiple {@link StackedMountainRenderableSeries} are required to create a stacked mountain chart type in SciChart.
 * These are grouped with a {@link StackedMountainCollection}, which implements {@link IRenderableSeries} and may be added
 * directly to a {@link SciChartSurface.renderableSeries} collection.
 *
 * Code sample below:
 * ```ts
 * const stackedMountain0 = new StackedMountainRenderableSeries(wasmContext);
 * // .. configure mountain 1, including set dataSeries
 * const stackedMountain1 = new StackedMountainRenderableSeries(wasmContext);
 * // .. configure mountain 2, including set dataSeries
 * const stackedMountain2 = new StackedMountainRenderableSeries(wasmContext);
 * // .. configure mountain 3, including set dataSeries
 * const stackedMountainCollection = new StackedMountainCollection(wasmContext);
 * stackedMountainCollection.add(stackedMountain0, stackedMountain1, stackedMountain2);
 *
 * sciChartSurface.renderableSeries.add(stackedMountainCollection);
 * ````
 * @remarks This type implements {@link IRenderableSeries} but it is not a renderable series, instead it wraps multiple
 * {@link StackedMountainRenderableSeries} to create a stacked mountain chart
 */
class StackedMountainCollection extends BaseStackedCollection_1.BaseStackedCollection {
    /**
     * Creates an instance of the {@link StackedMountainCollection}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     */
    constructor(webAssemblyContext) {
        super(webAssemblyContext);
        this.type = SeriesType_1.ESeriesType.VerticallyStackedMountainCollection;
        this.detachChildSeries = this.detachChildSeries.bind(this);
        this.attachChildSeries = this.attachChildSeries.bind(this);
        this.collectionChanged.subscribe(arg => {
            var _a, _b;
            (_a = arg.getOldItems()) === null || _a === void 0 ? void 0 : _a.forEach(this.detachChildSeries);
            (_b = arg.getNewItems()) === null || _b === void 0 ? void 0 : _b.forEach(this.attachChildSeries);
        });
        this.transparentPenCache = new Pen2DCache_1.Pen2DCache(webAssemblyContext);
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.nativeDrawingProvider = Deleter_1.deleteSafe(this.nativeDrawingProvider);
        this.transparentPenCache = Deleter_1.deleteSafe(this.transparentPenCache);
        super.delete();
    }
    /**
     * @inheritDoc
     */
    updateAccumulatedVectors() {
        const dataValuesCount = this.getDataSeriesValuesCount();
        if (!this.isAccumulatedVectorDirty || !dataValuesCount) {
            return;
        }
        this.checkXValuesCorrect();
        this.isAccumulatedVectorDirty = false;
        this.clearAccumulatedVectors(dataValuesCount);
        for (let i = 0; i < dataValuesCount; i++) {
            this.accumulatedVector0.push_back(0);
            let previous = 0;
            let totalSum;
            if (this.isOneHundredPercent) {
                totalSum = this.getVisibleSeries().reduce((prev, cur) => prev + cur.dataSeries.getNativeYValues().get(i), 0);
            }
            this.getVisibleSeries().forEach(rs => {
                let currentY = rs.dataSeries.getNativeYValues().get(i);
                if (this.isOneHundredPercent) {
                    currentY = (currentY * 100) / totalSum;
                }
                const current = previous + currentY;
                rs.accumulatedVector.push_back(current);
                previous = current;
            });
        }
    }
    /**
     * @inheritDoc
     */
    draw(renderContext, renderPassData) {
        let canDraw = true;
        if (this.animationProperty) {
            this.drawDelayTimer();
            canDraw = this.isDelayPassed;
        }
        if (canDraw) {
            this.updateHitTestProviders(renderPassData);
            if (!this.isEnoughDataToDraw()) {
                return;
            }
            this.updateAccumulatedVectors();
            const isCategoryAxis = renderPassData.xCoordinateCalculator.isCategoryCoordinateCalculator;
            const firstDataSeries = this.get(0).dataSeries;
            const viewRect = this.parentSurface.seriesViewRect;
            const xValues = isCategoryAxis ? firstDataSeries.getNativeIndexes() : firstDataSeries.getNativeXValues();
            this.getVisibleSeries().forEach((el, index) => {
                const currAccumVec = this.isRunningAnimation
                    ? el.accumulatedVectorAnimationValues
                    : el.accumulatedVector;
                if (index === 0) {
                    const accumulatedVector0 = this.isRunningAnimation
                        ? this.accumulatedVectorAnimationValues0
                        : this.accumulatedVector0;
                    const transparentPen = Pen2DCache_1.getScrtPenFromCache(this.transparentPenCache);
                    drawBand(this.webAssemblyContext, renderContext, renderPassData, this.nativeDrawingProvider, xValues, accumulatedVector0, currAccumVec, el.getFillBrush(), transparentPen, el.getStrokePen(), viewRect, el.isDigitalLine);
                }
                else {
                    const previousEl = this.getVisibleSeries()[index - 1];
                    const prevAccumVec = this.isRunningAnimation
                        ? previousEl.accumulatedVectorAnimationValues
                        : previousEl.accumulatedVector;
                    drawBand(this.webAssemblyContext, renderContext, renderPassData, this.nativeDrawingProvider, xValues, prevAccumVec, currAccumVec, el.getFillBrush(), previousEl.getStrokePen(), el.getStrokePen(), viewRect, el.isDigitalLine);
                }
            });
        }
    }
    /**
     * @inheritDoc
     */
    getXRange() {
        if (!this.isEnoughDataToDraw()) {
            return new NumberRange_1.NumberRange();
        }
        return this.getFirstSeries().dataSeries.xRange;
    }
    /**
     * @inheritDoc
     */
    getYRange(xVisibleRange, isXCategoryAxis) {
        if (!this.isEnoughDataToDraw()) {
            return new NumberRange_1.NumberRange();
        }
        const lastSeriesAccumVector = this.getLastVisibleSeries().accumulatedVector;
        if (lastSeriesAccumVector.size() !== this.getNativeXValues().size()) {
            return new NumberRange_1.NumberRange();
        }
        // TODO: calc isSorted flag
        const range = BaseDataSeries_1.getWindowedYRange(this.webAssemblyContext, this.getNativeXValues(), lastSeriesAccumVector, xVisibleRange, true, isXCategoryAxis, true);
        return new NumberRange_1.NumberRange(0, range.max);
    }
    /**
     * @inheritDoc
     */
    onAttach(scs) {
        super.onAttach(scs);
        this.nativeDrawingProvider = new this.webAssemblyContext.SCRTBandSeriesDrawingProvider();
        Pen2DCache_1.createPenInCache(this.transparentPenCache, "transparent", 2, 0);
    }
    /**
     * @inheritDoc
     */
    notifyPropertyChanged(propertyName) {
        super.notifyPropertyChanged(propertyName);
        if (propertyName === constants_1.PROPERTY.DATA_SERIES ||
            propertyName === constants_1.PROPERTY.IS_VISIBLE ||
            propertyName === constants_1.PROPERTY.IS_ONE_HUNDRED_PERCENT) {
            this.isAccumulatedVectorDirty = true;
        }
    }
    /**
     * @inheritDoc
     */
    hasDataSeriesValues() {
        return this.isEnoughDataToDraw();
    }
    // PROTECTED
    // PRIVATE
    detachChildSeries(series) {
        series.onDetachFromParentCollection();
        this.invalidateParent();
    }
    attachChildSeries(series) {
        series.onAttachToParentCollection(this, this.getParentSurface, this.notifyPropertyChanged);
        this.invalidateParent();
    }
    isEnoughDataToDraw() {
        const stackedSeriesCount = this.size();
        if (stackedSeriesCount < 1) {
            return false;
        }
        // All renderableSeries should have dataSeries property
        for (let i = 0; i < stackedSeriesCount; i++) {
            if (!this.get(i).dataSeries) {
                return false;
            }
        }
        // All dataSeries should have some values
        for (let i = 0; i < stackedSeriesCount; i++) {
            if (this.get(i).dataSeries.count() === 0) {
                return false;
            }
        }
        return true;
    }
    checkXValuesCorrect() {
        const length = this.getDataSeriesValuesCount();
        this.getVisibleSeries().forEach(el => {
            if (!(el.dataSeries.count() === length)) {
                throw Error("All stacked series in on collection should have the same amount of X Values");
            }
        });
    }
    /**
     * @param numberOfElements - number of element expected is used for performance to reserve memory
     */
    clearAccumulatedVectors(numberOfElements) {
        this.accumulatedVector0.clear();
        this.accumulatedVector0.reserve(numberOfElements);
        this.asArray().forEach(el => {
            el.accumulatedVector.clear();
            el.accumulatedVector.reserve(numberOfElements);
        });
    }
    getLastVisibleSeries() {
        const [lastItem] = this.getVisibleSeries().slice(-1);
        return lastItem;
    }
    updateHitTestProviders(renderPassData) {
        this.getVisibleSeries().forEach(el => {
            var _a;
            (_a = el.hitTestProvider) === null || _a === void 0 ? void 0 : _a.update(renderPassData);
        });
    }
}
exports.StackedMountainCollection = StackedMountainCollection;
/** @ignore */
const drawBand = (wasmContext, renderContext, renderPassData, nativeDrawingProvider, xValues, yValues, y1Values, fillBrush, strokePen, strokePenY1, viewRect, isDigitalLine) => {
    const args = new wasmContext.SCRTBandDrawingParams();
    args.forceShaderMethod = true;
    args.verticalChart = renderPassData.isVerticalChart;
    args.count = xValues.size();
    args.isDigitalLine = isDigitalLine;
    if (fillBrush) {
        args.SetFillBrush(fillBrush);
        args.SetFillBrush1(fillBrush);
    }
    if (strokePen) {
        args.SetLinesPen(strokePen);
    }
    if (strokePenY1) {
        args.SetLinesPen1(strokePenY1);
    }
    const nativeContext = renderContext.getNativeContext();
    nativeContext.PushMatrix();
    nativeContext.PushState();
    nativeContext.Translate(viewRect.x, viewRect.y);
    nativeContext.SetClipRect(viewRect.x, viewRect.y, viewRect.width, viewRect.height);
    nativeDrawingProvider.DrawPointsVec(nativeContext, xValues, yValues, y1Values, renderPassData.xCoordinateCalculator.nativeCalculator, renderPassData.yCoordinateCalculator.nativeCalculator, args);
    nativeContext.PopMatrix();
    nativeContext.PopState();
    args.delete();
};
