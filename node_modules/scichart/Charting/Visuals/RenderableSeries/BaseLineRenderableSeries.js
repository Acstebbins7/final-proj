"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseLineRenderableSeries = void 0;
const BaseRenderableSeries_1 = require("./BaseRenderableSeries");
const constants_1 = require("./constants");
const LineSeriesDrawingProvider_1 = require("./DrawingProviders/LineSeriesDrawingProvider");
const PointMarkerDrawingProvider_1 = require("./DrawingProviders/PointMarkerDrawingProvider");
const LineSeriesHitTestProvider_1 = require("./HitTest/LineSeriesHitTestProvider");
class BaseLineRenderableSeries extends BaseRenderableSeries_1.BaseRenderableSeries {
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        this.strokeDashArrayProperty = [];
        this.strokeDashArrayProperty = options === null || options === void 0 ? void 0 : options.strokeDashArray;
        this.drawingProviders = [];
        this.drawingProviders.push(new LineSeriesDrawingProvider_1.LineSeriesDrawingProvider(webAssemblyContext, this));
        this.drawingProviders.push(new PointMarkerDrawingProvider_1.PointMarkerDrawingProvider(webAssemblyContext, this));
    }
    /** @inheritDoc */
    applyTheme(themeProvider) {
        super.applyTheme(themeProvider);
        const previousThemeProvider = this.parentSurface.previousThemeProvider;
        if (this.stroke === previousThemeProvider.lineSeriesColor) {
            this.stroke = themeProvider.lineSeriesColor;
        }
    }
    /**
     * The StrokeDashArray defines the stroke or dash pattern for the line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    get strokeDashArray() {
        return this.strokeDashArrayProperty;
    }
    /**
     * The StrokeDashArray defines the stroke or dash pattern for the line.
     * Accepts an array of values, e.g. [2,2] will have a line of length 2 and a gap of length 2.
     */
    set strokeDashArray(strokeDashArray) {
        this.strokeDashArrayProperty = strokeDashArray;
        this.notifyPropertyChanged(constants_1.PROPERTY.STROKE_DASH_ARRAY);
    }
    /**
     * @inheritDoc
     */
    newHitTestProvider() {
        return new LineSeriesHitTestProvider_1.LineSeriesHitTestProvider(this);
    }
}
exports.BaseLineRenderableSeries = BaseLineRenderableSeries;
