import { Point } from "../../../../Core/Point";
import { DoubleVector } from "../../../../types/TSciChart";
import { EDataSeriesType } from "../../../Model/IDataSeries";
import { CoordinateCalculatorBase } from "../../../Numerics/CoordinateCalculators/CoordinateCalculatorBase";
import { RenderPassData } from "../../../Services/RenderPassData";
import { IRenderableSeries } from "../IRenderableSeries";
import { HitTestInfo } from "./HitTestInfo";
import { ENearestPointLogic, IHitTestProvider } from "./IHitTestProvider";
/**
 * Defines the base class to Hit-Test Providers: classes which performs hit-tests on series, returning data-values at X-Y mouse locations
 */
export declare abstract class BaseHitTestProvider<TRenderableSeries extends IRenderableSeries> implements IHitTestProvider {
    static readonly DEFAULT_HIT_TEST_RADIUS: number;
    readonly parentSeries: TRenderableSeries;
    protected currentRenderPassData: RenderPassData;
    /**
     * Creates an instance of the {@link BaseHitTestProvider}
     * @param parentSeries the parent {@link IRenderableSeries | RenderableSeries} that this Hit-Test provider is attached to
     */
    constructor(parentSeries: TRenderableSeries);
    /**
     * @inheritDoc
     */
    update(renderPassData: RenderPassData): void;
    /**
     * @inheritDoc
     */
    hitTest(point: Point, logic: ENearestPointLogic, hitTestRadius: number, interpolate: boolean): HitTestInfo;
    /**
     * @inheritDoc
     */
    getNearestPoint2D(xHitCoord: number, yHitCoord: number): number;
    /**
     * @inheritDoc
     */
    getNearestHorizontalPoint(xHitCoord: number): number;
    /**
     * Creates a {@link HitTestInfo} instance from provided parameters
     * @param xHitCoord
     * @param yHitCoord
     * @param nearestPointIndex
     * @param hitTestRadius - not used
     * @param interpolate
     */
    protected createNewHitTestInfo(xHitCoord: number, yHitCoord: number, nearestPointIndex: number, hitTestRadius: number, interpolate: boolean): HitTestInfo;
    protected getHitTestInfo(xHitCoord: number, yHitCoord: number, nearestPointIndex: number, hitTestRadius: number, interpolate: boolean): HitTestInfo;
}
export declare const createNewHitTestInfo: (xCoordinateCalculator: CoordinateCalculatorBase, yCoordinateCalculator: CoordinateCalculatorBase, isVerticalChart: boolean, renderableSeriesType: string, dataSeriesType: EDataSeriesType, xNativeValues: DoubleVector, yNativeValues: DoubleVector, xHitCoord: number, yHitCoord: number, nearestPointIndex: number, hitTestRadius: number, interpolate: boolean) => HitTestInfo;
export declare const getHitTestInfo: (xCoordinateCalculator: CoordinateCalculatorBase, yCoordinateCalculator: CoordinateCalculatorBase, isVerticalChart: boolean, renderableSeriesType: string, dataSeriesType: EDataSeriesType, xNativeValues: DoubleVector, yNativeValues: DoubleVector, xHitCoord: number, yHitCoord: number, nearestPointIndex: number, hitTestRadius: number, interpolate: boolean) => HitTestInfo;
