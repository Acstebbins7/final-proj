"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StackedMountainSeriesHitTestProvider = void 0;
const BaseHitTestProvider_1 = require("./BaseHitTestProvider");
const BaseHitTestProvider_2 = require("./BaseHitTestProvider");
/**
 * Hit-test provider for {@link StackedMountainRenderableSeries}. See base class {@link BaseHitTestProvider} for further info
 */
class StackedMountainSeriesHitTestProvider extends BaseHitTestProvider_1.BaseHitTestProvider {
    /**
     * @inheritDoc
     */
    getHitTestInfo(xHitCoord, yHitCoord, nearestPointIndex, hitTestRadius, interpolate) {
        const { xCoordinateCalculator, yCoordinateCalculator, isVerticalChart } = this.currentRenderPassData;
        const { type, dataSeries, accumulatedVector } = this.parentSeries;
        const hitTestInfo = BaseHitTestProvider_2.getHitTestInfo(xCoordinateCalculator, yCoordinateCalculator, isVerticalChart, type, dataSeries.type, dataSeries.getNativeXValues(), accumulatedVector, xHitCoord, yHitCoord, nearestPointIndex, hitTestRadius, interpolate);
        // Hit-test on StackedMountainSeries returns Y accumulated, Y1 original
        hitTestInfo.y1Value = dataSeries.getNativeYValues().get(nearestPointIndex);
        return hitTestInfo;
    }
}
exports.StackedMountainSeriesHitTestProvider = StackedMountainSeriesHitTestProvider;
