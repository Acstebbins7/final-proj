"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OhlcSeriesHitTestProvider = void 0;
const pointUtil_1 = require("../../../../utils/pointUtil");
const BaseHitTestProvider_1 = require("./BaseHitTestProvider");
/**
 * Hit-test provider for {@link FastOhlcRenderableSeries}. See base class {@link BaseHitTestProvider} for further info
 */
class OhlcSeriesHitTestProvider extends BaseHitTestProvider_1.BaseHitTestProvider {
    /**
     * @inheritDoc
     */
    getHitTestInfo(xHitCoord, yHitCoord, nearestPointIndex, hitTestRadius, interpolate) {
        const hitTestInfo = this.createNewHitTestInfo(xHitCoord, yHitCoord, nearestPointIndex, hitTestRadius, interpolate);
        const { getDataPointWidth, dataPointWidth } = this.parentSeries;
        const dataSeries = this.parentSeries.dataSeries;
        const { xCoordinateCalculator, yCoordinateCalculator } = this.currentRenderPassData;
        const xValue = dataSeries.getNativeXValues().get(nearestPointIndex);
        const xCoord = xCoordinateCalculator.getCoordinate(xValue);
        const openValue = dataSeries.getNativeOpenValues().get(nearestPointIndex);
        const openCoord = yCoordinateCalculator.getCoordinate(openValue);
        const highValue = dataSeries.getNativeHighValues().get(nearestPointIndex);
        const highCoord = yCoordinateCalculator.getCoordinate(highValue);
        const lowValue = dataSeries.getNativeLowValues().get(nearestPointIndex);
        const lowCoord = yCoordinateCalculator.getCoordinate(lowValue);
        const closeValue = dataSeries.getNativeCloseValues().get(nearestPointIndex);
        const closeCoord = yCoordinateCalculator.getCoordinate(closeValue);
        const columnWidth = getDataPointWidth(xCoordinateCalculator, dataPointWidth);
        const halfWidth = columnWidth / 2;
        const topSide = closeCoord > openCoord ? closeCoord : openCoord;
        const bottomSide = closeCoord > openCoord ? openCoord : closeCoord;
        // test candle body
        const isCandleBodyHit = pointUtil_1.testIsInBounds(xHitCoord, yHitCoord, xCoord - halfWidth, topSide, xCoord + halfWidth, bottomSide);
        // test candle wicks
        const distanceToWicks = pointUtil_1.calcDistanceFromLineSegment(xHitCoord, yHitCoord, xCoord, highCoord, xCoord, lowCoord);
        hitTestInfo.isHit = isCandleBodyHit || distanceToWicks < hitTestRadius;
        hitTestInfo.isWithinDataBounds = pointUtil_1.testIsInXBounds(xHitCoord, xCoord, halfWidth);
        hitTestInfo.openValue = openValue;
        hitTestInfo.highValue = highValue;
        hitTestInfo.lowValue = lowValue;
        hitTestInfo.closeValue = closeValue;
        return hitTestInfo;
    }
}
exports.OhlcSeriesHitTestProvider = OhlcSeriesHitTestProvider;
