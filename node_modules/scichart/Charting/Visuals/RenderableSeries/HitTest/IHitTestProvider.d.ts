import { Point } from "../../../../Core/Point";
import { RenderPassData } from "../../../Services/RenderPassData";
import { HitTestInfo } from "./HitTestInfo";
export declare enum ENearestPointLogic {
    /**
     * Find the nearest hit-test result using a 2-dimensional search,
     * e.g. this will find the closest point in X,Y direction using the shortest distance,
     * where distance = Sqrt(x*x + y*y)
     * @remarks
     * For a faster method for time-series, see the {@link NearestHorizontalPoint} option
     */
    NearestPoint2D = 0,
    /**
     * Find the nearest hit-test result using a search in the X-direction first,
     * then the nearest y-point for that x-value
     * @remarks
     * This method is considerably faster than {@link NearestPoint2D}, however is only suitable for
     * time series (data ascending in X)
     */
    NearestHorizontalPoint = 1
}
/**
 * Defines the interface to a Hit-Test Provider: a class which performs hit-tests on series, returning data-values at X-Y mouse locations
 */
export interface IHitTestProvider {
    /**
     * @description updates the current HitTestProvider with the latest renderPassData
     * @param renderPassData the latest renderPassData from the parent series last draw operation
     */
    update(renderPassData: RenderPassData): void;
    /**
     * @description Performs a hit-test at the specific mouse point (X,Y coordinate on the parent SciChartSurface),
     * returning a HitTestInfo type with the results
     * @param point The mouse point on the parent SciChartSurface
     * @param logic Logic to find nearest point
     * @param hitTestRadius The radius in pixels to determine whether a mouse is over a data-point
     * @param interpolate If true, use interpolation to perform a hit-test between data-points, or on the area if
     * a FastMountainRenderableSeries, FastColumnRenderableSeries or FastCandlestickRenderableSeries
     */
    hitTest(point: Point, logic: ENearestPointLogic, hitTestRadius: number, interpolate: boolean): HitTestInfo;
    /**
     * @description Performs search of the nearest point in 2D
     *
     * @param xHitCoord The x coordinate of hit test in pixels
     * @param yHitCoord The y coordinate of hit test in pixel
     * @returns The nearest point index
     */
    getNearestPoint2D(xHitCoord: number, yHitCoord: number): number;
    /**
     * @description Performs search of nearest point in x direction only.
     * X and Y coordinates provided for Vertical Chart
     *
     * @param xHitCoord The x coordinate of hit test in pixels
     * @returns The nearest point index
     */
    getNearestHorizontalPoint(xHitCoord: number): number;
}
