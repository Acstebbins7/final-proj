import { Point } from "../../../../Core/Point";
import { EDataSeriesType } from "../../../Model/IDataSeries";
/**
 * The HitTestInfo class contains properties about the data-point under the mouse when a Hit-Test operation is performed
 */
export declare class HitTestInfo {
    /**
     * The default empty {@link HitTestInfo} instance
     */
    static empty(): HitTestInfo;
    /**
     * When true, the {@link HitTestInfo} is empty
     */
    readonly isEmpty: boolean;
    /**
     * The name of the {@link BaseDataSeries | DataSeries} which is the result of the hit-test operation
     */
    dataSeriesName: string;
    /**
     * The type {@link EDataSeriesType} of the {@link BaseDataSeries | DataSeries} which is the result of the hit-test operation
     */
    dataSeriesType: EDataSeriesType;
    /**
     * A screen-coordinate point snapped to the X-Y value of the data-series
     */
    hitTestPoint: Point;
    hitTestPointValues: Point;
    /**
     * The index of the data-series that was hit
     */
    dataSeriesIndex: number;
    /**
     * The X-coordinate result of the hit-test operation
     */
    xCoord: number;
    /**
     * The Y-coordinate result of the hit-test operation
     */
    yCoord: number;
    /**
     * The Y1-coordinate result of the hit-test operation
     */
    y1Coord: number;
    /**
     * The X-value result of the hit-test operation
     */
    xValue: number;
    /**
     * The X-value of category result of the hit-test operation
     */
    xCategoryValue: number;
    /**
     * The Y-value result of the hit-test operation
     */
    yValue: number;
    /**
     * The Y1-value result of the hit-test operation
     */
    y1Value: number;
    /**
     * Gets or sets the Z-value at the hit-test site
     */
    zValue: number;
    /**
     * The radius in pixels that was used for the hit-test operation
     */
    hitTestRadius: number;
    /**
     * When true, the hit-test operation was a success and a series was hit
     */
    isHit: boolean;
    /**
     * OHLC Series only: the Open-value result of the hit-test operation
     */
    openValue: number;
    /**
     * OHLC Series only: the High-value result of the hit-test operation
     */
    highValue: number;
    /**
     * OHLC Series only: the Low-value result of the hit-test operation
     */
    lowValue: number;
    /**
     * OHLC Series only: the Close-value result of the hit-test operation
     */
    closeValue: number;
    /**
     * When true the hit-test operation was within data bounds in the X-direction
     */
    isWithinDataBounds: boolean;
    /**
     * When true, the parent {@link SciChartSurface} xAxis is a Category Axis
     */
    isCategoryAxis: boolean;
    /**
     * Gets or sets the XIndex at the hit-test site
     */
    heatmapXIndex: number;
    /**
     * Gets or sets the YIndex at the hit-test site
     */
    heatmapYIndex: number;
    /**
     * Gets or sets the value at the hit-test site, found at heatmapXIndex, heatmapYIndex
     */
    heatmapValue: number;
    constructor(isEmpty?: boolean);
}
