"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FastBubbleRenderableSeries = void 0;
const Deleter_1 = require("../../../Core/Deleter");
const SeriesType_1 = require("../../../types/SeriesType");
const animationHelper_1 = require("./Animations/animationHelper");
const BaseRenderableSeries_1 = require("./BaseRenderableSeries");
const BubbleSeriesDrawingProvider_1 = require("./DrawingProviders/BubbleSeriesDrawingProvider");
const BubbleSeriesHitTestProvider_1 = require("./HitTest/BubbleSeriesHitTestProvider");
/**
 * Defines a bubble-series or JavaScript bubble chart type in the SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * To add a bubble series to a {@link SciChartSurface} you need to declare both the {@link FastBubbleRenderableSeries | RenderableSeries}
 * and a {@link XyzDataSeries | XyzDataSeries}. Simplified code sample below:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * // Create and fill the dataseries
 * const dataSeries = new XyzDataSeries(wasmContext);
 * dataSeries.append(1,2,3);
 * dataSeries.append(4,5,6);
 * // Create the renderableSeries
 * const bubbleSeries = new FastBubbleRenderableSeries(wasmContext);
 * bubbleSeries.dataSeries = dataSeries;
 * // append to the SciChartSurface
 * sciChartSurface.renderableSeries.add(bubbleSeries);
 * ```
 */
class FastBubbleRenderableSeries extends BaseRenderableSeries_1.BaseRenderableSeries {
    /**
     * Creates an instance of the {@link FastLineRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options optional parameters of type {@link IBaseRenderableSeriesOptions} applied when constructing the series type
     */
    constructor(webAssemblyContext, options) {
        var _a;
        super(webAssemblyContext, options);
        this.type = SeriesType_1.ESeriesType.BubbleSeries;
        this.zAnimationValues = new webAssemblyContext.DoubleVector();
        this.drawingProviders = [];
        this.drawingProviders.push(new BubbleSeriesDrawingProvider_1.BubbleSeriesDrawingProvider(webAssemblyContext, this));
        // This should be in the end after all DoubleVectors used for animation have been created
        this.animation = (_a = options === null || options === void 0 ? void 0 : options.animation) !== null && _a !== void 0 ? _a : this.animation;
    }
    /** @inheritDoc */
    applyTheme(themeProvider) {
        super.applyTheme(themeProvider);
        const previousThemeProvider = this.parentSurface.previousThemeProvider;
        if (this.stroke === previousThemeProvider.lineSeriesColor) {
            this.stroke = themeProvider.lineSeriesColor;
        }
    }
    /**
     * Gets the bubble diameter in pixels for the point index, by looking up the Z-value in the
     * associated {@link XyzDataSeries}
     * @param pointIndex
     */
    getBubbleDiameter(pointIndex) {
        return this.dataSeries.getNativeZValues().get(pointIndex);
    }
    /** @inheritDoc */
    delete() {
        this.zAnimationValues = Deleter_1.deleteSafe(this.zAnimationValues);
        super.delete();
    }
    /**
     * @inheritDoc
     */
    newHitTestProvider() {
        return new BubbleSeriesHitTestProvider_1.BubbleSeriesHitTestProvider(this);
    }
    /**
     * @inheritDoc
     */
    onAnimate(progress) {
        var _a;
        super.onAnimate(progress);
        const dataSeries = this.dataSeries;
        if (!dataSeries) {
            (_a = this.animationToken) === null || _a === void 0 ? void 0 : _a.cancelAnimation();
        }
        else {
            animationHelper_1.calculateAnimationValues(this.webAssemblyContext, dataSeries.getNativeYValues(), this.yAnimationValues, this.animation, progress);
            animationHelper_1.calculateAnimationValues(this.webAssemblyContext, dataSeries.getNativeZValues(), this.zAnimationValues, this.animation, progress, true);
        }
    }
}
exports.FastBubbleRenderableSeries = FastBubbleRenderableSeries;
