import { AnimationToken } from "../../../Core/AnimationToken";
import { NumberRange } from "../../../Core/NumberRange";
import { ESeriesType } from "../../../types/SeriesType";
import { DoubleVector, TSciChart } from "../../../types/TSciChart";
import { ELineDrawMode, WebGlRenderContext2D } from "../../Drawing/WebGlRenderContext2D";
import { SeriesInfo } from "../../Model/ChartData/SeriesInfo";
import { IDataSeries } from "../../Model/IDataSeries";
import { IPaletteProvider } from "../../Model/IPaletteProvider";
import { CoordinateCalculatorBase } from "../../Numerics/CoordinateCalculators/CoordinateCalculatorBase";
import { RenderPassData } from "../../Services/RenderPassData";
import { IThemeProvider } from "../../Themes/IThemeProvider";
import { AxisCore } from "../Axis/AxisCore";
import { IPointMarker } from "../PointMarkers/IPointMarker";
import { SciChartSurface } from "../SciChartSurface";
import { BaseAnimation } from "./Animations/BaseAnimation";
import { TPalettingState } from "./DrawingProviders/BaseSeriesDrawingProvider";
import { ISeriesDrawingProvider } from "./DrawingProviders/ISeriesDrawingProvider";
import { HitTestInfo } from "./HitTest/HitTestInfo";
import { IHitTestProvider } from "./HitTest/IHitTestProvider";
import { IBaseRenderableSeriesOptions } from "./IBaseRenderableSeriesOptions";
import { IRenderableSeries } from "./IRenderableSeries";
import { RolloverModifierRenderableSeriesProps } from "./RolloverModifier/RolloverModifierRenderableSeriesProps";
import { ShaderEffect } from "./ShaderEffect";
/**
 * @summary Defines the base class to a Render Series (or Chart Type) in SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * A RenderableSeries defines how data should be rendered. e.g. as a Line Chart, Mountain Chart, Candlestick Chart etc...
 * This is independent from the {@link BaseDataSeries | DataSeries} which stores the data to render
 *
 * See derived types of {@link BaseDataSeries} to find out what data-series are available.
 * See derived types of {@link IRenderableSeries} to find out what 2D JavaScript Chart types are available.
 */
export declare abstract class BaseRenderableSeries implements IRenderableSeries {
    /** @inheritDoc */
    abstract readonly type: ESeriesType;
    /** @inheritDoc */
    readonly id: string;
    /** @inheritDoc */
    readonly isStacked = false;
    /** @inheritDoc */
    readonly rolloverModifierProps: RolloverModifierRenderableSeriesProps;
    /** @inheritDoc */
    readonly rolloverModifierProps1: RolloverModifierRenderableSeriesProps;
    /** @inheritDoc */
    parentSurface: SciChartSurface;
    /** @inheritDoc */
    invalidateParentCallback: () => void;
    /** @inheritDoc */
    drawingProviders: ISeriesDrawingProvider[];
    /** @inheritDoc */
    hitTestProvider: IHitTestProvider;
    /**
     * Y vector with animation values
     */
    yAnimationValues: DoubleVector;
    protected animationToken: AnimationToken;
    protected webAssemblyContext: TSciChart;
    protected dataSeriesProperty: IDataSeries;
    private xAxisIdProperty;
    private yAxisIdProperty;
    private strokeThicknessProperty;
    private strokeProperty;
    private opacityProperty;
    private opacityOriginalValue;
    private pointMarkerProperty;
    private drawNaNAsProperty;
    private isVisibleProperty;
    private effectProperty;
    private paletteProviderProperty;
    private isDigitalLineProperty;
    private animationProperty;
    private isDelayPassed;
    private firstAnimationRender;
    /**
     * Creates an instance of the {@link BaseRenderableSeries}
     * @param webAssemblyContext The {@link TSciChart | SciChart WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options optional parameters of type {@link IBaseRenderableSeriesOptions} applied when constructing the series type
     */
    protected constructor(webAssemblyContext: TSciChart, options?: IBaseRenderableSeriesOptions);
    /** @inheritDoc */
    applyTheme(themeProvider: IThemeProvider): void;
    /** @inheritDoc */
    get paletteProvider(): IPaletteProvider;
    /** @inheritDoc */
    set paletteProvider(paletteProvider: IPaletteProvider);
    /** @inheritDoc */
    get isDigitalLine(): boolean;
    /** @inheritDoc */
    set isDigitalLine(isDigitalLine: boolean);
    /** @inheritDoc */
    get isVisible(): boolean;
    /** @inheritDoc */
    set isVisible(isVisible: boolean);
    /** @inheritDoc */
    get pointMarker(): IPointMarker;
    /** @inheritDoc */
    set pointMarker(pointMarker: IPointMarker);
    /** @inheritDoc */
    get drawNaNAs(): ELineDrawMode;
    /** @inheritDoc */
    set drawNaNAs(drawNaNAs: ELineDrawMode);
    /** @inheritDoc */
    get stroke(): string;
    /** @inheritDoc */
    set stroke(htmlColorCode: string);
    /** @inheritDoc */
    get strokeThickness(): number;
    /** @inheritDoc */
    set strokeThickness(value: number);
    /** @inheritDoc */
    get opacity(): number;
    /** @inheritDoc */
    set opacity(value: number);
    /** @inheritDoc */
    get xAxisId(): string;
    /** @inheritDoc */
    set xAxisId(id: string);
    /** @inheritDoc */
    get xAxis(): AxisCore;
    /** @inheritDoc */
    get yAxis(): AxisCore;
    /** @inheritDoc */
    get yAxisId(): string;
    /** @inheritDoc */
    set yAxisId(id: string);
    /** @inheritDoc */
    get dataSeries(): IDataSeries;
    /** @inheritDoc */
    set dataSeries(dataSeries: IDataSeries);
    /**
     * Gets an optional {@link ShaderEffect} for modifying the render output of this {@link IRenderableSeries}
     * @remarks Options include {@link GlowEffect} and {@link ShadowEffect}. Apply an effect to see how it modifies rendering!
     */
    get effect(): ShaderEffect;
    /**
     * Sets an optional {@link ShaderEffect} for modifying the render output of this {@link IRenderableSeries}
     * @remarks Options include {@link GlowEffect} and {@link ShadowEffect}. Apply an effect to see how it modifies rendering!
     */
    set effect(effect: ShaderEffect);
    /**
     * Gets a start up animation class, a child class for {@link BaseAnimation}
     */
    get animation(): BaseAnimation;
    /**
     * Sets a start up animation class, a child class for {@link BaseAnimation}
     */
    set animation(value: BaseAnimation);
    /** @inheritDoc */
    get isSpline(): boolean;
    /** @inheritDoc */
    draw(renderContext: WebGlRenderContext2D, renderPassData: RenderPassData): void;
    /** @inheritDoc */
    delete(): void;
    /** @inheritDoc */
    getXRange(): NumberRange;
    /** @inheritDoc */
    getYRange(xVisibleRange: NumberRange, isXCategoryAxis?: boolean): NumberRange;
    /** @inheritDoc */
    notifyPropertyChanged(propertyName: string): void;
    /**
     * @description Calculates data point width in pixels
     * @param xCoordCalc
     * @param widthFraction
     */
    getDataPointWidth(xCoordCalc: CoordinateCalculatorBase, widthFraction: number): number;
    /** @inheritDoc */
    onDetach(): void;
    /** @inheritDoc */
    onAttach(scs: SciChartSurface): void;
    /** @inheritDoc */
    hasStrokePaletteProvider(): boolean;
    /** @inheritDoc */
    hasFillPaletteProvider(): boolean;
    /** @inheritDoc */
    hasPointMarkerPaletteProvider(): boolean;
    /** @inheritDoc */
    hasDataSeriesValues(): boolean;
    /** @inheritDoc */
    hasDataSeries(): boolean;
    /** @inheritDoc */
    getDataSeriesValuesCount(): number;
    /** @inheritDoc */
    getBaseXValues(): number[];
    /** @inheritDoc */
    getDataSeriesName(): string;
    /** @inheritDoc */
    getNativeXValues(): DoubleVector;
    /**
     * Returns the {@link IDataSeries.getNativeYValues} for the associated {@link dataSeries}
     */
    getNativeYValues(): DoubleVector;
    /** @inheritDoc */
    checkIsOutOfDataRange(xValue: number, yValue: number): boolean;
    /**
     * gets if the animation is currently running
     */
    get isRunningAnimation(): boolean;
    /**
     * adds palette colors
     */
    pushPalettedColors(color: number, palettingState: TPalettingState): void;
    /**
     * Starts an animation for {@link IRenderableSeries}
     */
    protected animate(): void;
    /**
     * Runs before the animation starts
     * @protected
     */
    protected beforeAnimationStart(): void;
    /**
     * Runs after the animation is complete
     * @protected
     */
    protected afterAnimationComplete(): void;
    /**
     * Internal method that runs on each animation tick
     * @param progress The current animation progress, a value from 0 to 1
     * @protected
     */
    protected onAnimate(progress: number): void;
    /**
     * Factory function to create a {@link IHitTestProvider | Hit Test Provider}; a class which performs hit-test
     * and checks mouse-over and nearest point.
     */
    protected abstract newHitTestProvider(): IHitTestProvider;
    /**
     * Is being called when the data for the underlying DataSeries changes
     * @protected
     */
    protected dataSeriesDataChanged(): void;
    private invalidateParent;
    private effectPropertyChanged;
    private drawDelayTimer;
}
export declare const getDataPointWidth: (xValues: DoubleVector, xCoordCalc: CoordinateCalculatorBase, seriesViewRectWidth: number, widthFraction: number, isCategoryAxis: boolean) => number;
export declare const getSeriesInfo: (rs: IRenderableSeries, hitTestInfo: HitTestInfo) => SeriesInfo;
