"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SquarePointMarker = void 0;
const Point_1 = require("../../../Core/Point");
const BasePointMarker_1 = require("./BasePointMarker");
/**
 * @summary Point-marker type which renders a square at each x-y datapoint location
 * @remarks
 * To apply the SquarePointMarker to a {@link IRenderableSeries}, use the following code:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {
 *              pointMarker: new SquarePointMarker(wasmContext, {
 *                  width: 9,
 *                  height: 9,
 *                  fill: "#FF0000",
 *                  stroke: "#0000FF",
 *                  strokeThickness: 1
 *              })
 * }));
 * ```
 */
class SquarePointMarker extends BasePointMarker_1.BasePointMarker {
    /**
     * Creates an instance of the {@link SquarePointMarker}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IPointMarkerOptions} used to configure the point-marker at instantiation time
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    drawSprite(canvas, spriteWidth, spriteHeight, stroke, strokeThickness, fill) {
        // WPF has this
        // var strokeThickness = Stroke.IsTransparent() ? 0d : StrokeThickness.RoundOff();
        strokeThickness = Math.round(strokeThickness);
        const x1y1 = new Point_1.Point(strokeThickness / 2, strokeThickness / 2);
        const x2y2 = new Point_1.Point(this.width - strokeThickness / 2, this.height - strokeThickness / 2);
        canvas.fillStyle = fill;
        canvas.beginPath();
        canvas.moveTo(x1y1.x, x1y1.y);
        canvas.lineTo(x2y2.x, x1y1.y);
        canvas.lineTo(x2y2.x, x2y2.y);
        canvas.lineTo(x1y1.x, x2y2.y);
        canvas.closePath();
        canvas.fill();
        if (strokeThickness > 0) {
            canvas.strokeStyle = stroke;
            canvas.lineWidth = strokeThickness;
            canvas.stroke();
        }
    }
}
exports.SquarePointMarker = SquarePointMarker;
