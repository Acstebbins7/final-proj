import { IDeletable } from "../../../Core/IDeletable";
import { CanvasTexture } from "../TextureManager/CanvasTexture";
/**
 * Defines the interface to a PointMarker in SciChart  - High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}.
 * @description PointMarkers may be displayed on {@link IRenderableSeries | Renderable Series} to add scatter-points to charts.
 * For example: setting the {@link XyScatterRenderableSeries.pointMarker} property or {@link FastLineRenderableSeries.pointMarker} property
 * will render a point at each xy data-value
 * @remarks
 * See derived types of {@link IPointMarker} for specific point-marker types.
 */
export interface IPointMarker extends IDeletable {
    /**
     * Callback to invalidate the parent 2D {@link SciChartSurface}
     */
    invalidateParentCallback: () => void;
    /**
     * Gets or sets the point-marker stroke as an HTML Color Code
     */
    stroke: string;
    /**
     * Gets or sets the point-marker fill as an HTML Color Code
     */
    fill: string;
    /**
     * Gets or sets the width of the point-marker in pixels
     */
    width: number;
    /**
     * Gets or sets the height of the point-marker in pixels
     */
    height: number;
    /**
     * Gets or sets the stroke-thickness of the point-marker in pixels
     */
    strokeThickness: number;
    /**
     * When overridden in a derived class, draw once the point-marker to the {@link CanvasRenderingContext2D}. This
     * will create a sprite (image or bitmap) which will be repeated at each xy data-value using our fast WebGL WebAssembly
     * graphics engine
     * @param canvas the {@link CanvasRenderingContext2D} to draw to
     * @param spriteWidth the sprite target width
     * @param spriteHeight the sprite target height
     * @param stroke the stroke color
     * @param strokeThickness the thickness of the stroke
     * @param fill the fill color
     */
    drawSprite(canvas: CanvasRenderingContext2D, spriteWidth: number, spriteHeight: number, stroke: string, strokeThickness: number, fill: string): void;
    /**
     * Gets a {@link CanvasTexture} object which represents the point-marker sprite instance to draw
     * @remarks note {@link CanvasTexture} implements {@link IDeletable} and must be deleted manually to free memory
     */
    getSprite(): CanvasTexture;
    /**
     * Gets a {@link CanvasTexture} object which represents the stroke mask sprite instance to use for points,
     * which appearance is overridden by a Palette Provider
     * @remarks note {@link CanvasTexture} implements {@link IDeletable} and must be deleted manually to free memory
     */
    getStrokeMask(): CanvasTexture;
    /**
     * Gets a {@link CanvasTexture} object which represents the fill mask sprite instance to use for points,
     * which appearance is overridden by a Palette Provider
     * @remarks note {@link CanvasTexture} implements {@link IDeletable} and must be deleted manually to free memory
     */
    getFillMask(): CanvasTexture;
}
