"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SpritePointMarker = void 0;
const BasePointMarker_1 = require("./BasePointMarker");
const Constants_1 = require("./Constants");
/**
 * @summary Point-marker type which renders a custom image provided by {@link HTMLImageElement} at each x-y datapoint location
 * @remarks
 * To apply the SpritePointMarker to a {@link IRenderableSeries}, use the following code:
 *
 * ```ts
 * import {createImageAsync} from "SCICHART_ROOT/src/utils/imageUtil";
 * import customPointImage from "./CustomMarkerImage.png";

 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * const imageBitmap = await createImageAsync(customPointImage);
 * sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {
 *              pointMarker: new SpritePointMarker(wasmContext, {
 *                  image: imageBitmap
 *              })
 * }));
 * ```
 */
class SpritePointMarker extends BasePointMarker_1.BasePointMarker {
    /**
     * Creates an instance of the {@link SpritePointMarker}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link ISpritePointMarkerOptions} used to configure the point-marker at instantiation time
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        this.image = options === null || options === void 0 ? void 0 : options.image;
    }
    /**
     * Gets or sets the image to draw at each x-y point as an {@link HTMLImageElement}
     */
    get image() {
        return this.imageProperty;
    }
    /**
     * Gets or sets the image to draw at each x-y point as an {@link HTMLImageElement}
     */
    set image(image) {
        const oldValue = this.imageProperty;
        this.imageProperty = image;
        if (this.imageProperty) {
            this.width = this.imageProperty.width;
            this.height = this.imageProperty.height;
        }
        this.notifyPropertyChanged(Constants_1.PROPERTY.IMAGE, image, oldValue);
    }
    /**
     * @inheritDoc
     */
    drawSprite(canvas, spriteWidth, spriteHeight, stroke, strokeThickness, fill) {
        if (this.image) {
            canvas.drawImage(this.image, 0, 0, this.image.width, this.image.height);
        }
    }
}
exports.SpritePointMarker = SpritePointMarker;
