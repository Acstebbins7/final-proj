"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrianglePointMarker = void 0;
const Point_1 = require("../../../Core/Point");
const BasePointMarker_1 = require("./BasePointMarker");
/**
 * @summary Point-marker type which renders a triangle at each x-y datapoint location
 * @remarks
 * To apply the TrianglePointMarker to a {@link IRenderableSeries}, use the following code:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {
 *              pointMarker: new TrianglePointMarker(wasmContext, {
 *                  width: 9,
 *                  height: 9,
 *                  fill: "#FF0000",
 *                  stroke: "#0000FF",
 *                  strokeThickness: 1
 *              })
 * }));
 * ```
 */
class TrianglePointMarker extends BasePointMarker_1.BasePointMarker {
    /**
     * Creates an instance of the {@link TrianglePointMarker}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IPointMarkerOptions} used to configure the point-marker at instantiation time
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        // WPF has this
        /*
        protected override Size GetSpriteSize()
        {
            _desiredSize.Width = (int)Width;
            _desiredSize.Height = (int)Height;

            if (!Stroke.IsTransparent())
            {
                _desiredSize.Width += (int)StrokeThickness * 2;
                _desiredSize.Height += (int)StrokeThickness * 2;
            }

            return _desiredSize;
        }
         */
    }
    /**
     * @inheritDoc
     */
    drawSprite(canvas, spriteWidth, spriteHeight, stroke, strokeThickness, fill) {
        // WPF has this
        /*
            var strokeThickness = Stroke.IsTransparent() ? 0d : StrokeThickness;
            strokeThickness = strokeThickness.RoundOff() / 2;
         */
        strokeThickness = Math.round(strokeThickness) / 2;
        const centerTop = new Point_1.Point(this.width / 2, strokeThickness);
        const rightBottom = new Point_1.Point(this.width - strokeThickness, this.height - strokeThickness);
        const leftBottom = new Point_1.Point(strokeThickness, this.height - strokeThickness);
        canvas.fillStyle = fill;
        canvas.beginPath();
        canvas.moveTo(centerTop.x, centerTop.y);
        canvas.lineTo(rightBottom.x, rightBottom.y);
        canvas.lineTo(leftBottom.x, leftBottom.y);
        canvas.lineTo(centerTop.x, centerTop.y);
        canvas.closePath();
        canvas.fill();
        if (strokeThickness > 0) {
            canvas.strokeStyle = stroke;
            canvas.lineWidth = strokeThickness;
            canvas.stroke();
        }
    }
}
exports.TrianglePointMarker = TrianglePointMarker;
