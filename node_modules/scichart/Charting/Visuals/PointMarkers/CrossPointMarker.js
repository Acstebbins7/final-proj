"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CrossPointMarker = void 0;
const BasePointMarker_1 = require("./BasePointMarker");
/**
 * @summary Point-marker type which renders a cross (plus-sign or +) at each x-y datapoint location
 * @remarks
 * To apply the CrossPointMarker to a {@link IRenderableSeries}, use the following code:
 *
 * ```ts
 * const sciChartSurface: SciChartSurface;
 * const wasmContext: TSciChart;
 * sciChartSurface.renderableSeries.add(new FastLineRenderableSeries(wasmContext, {
 *              pointMarker: new CrossPointMarker(wasmContext, {
 *                  width: 9,
 *                  height: 9,
 *                  fill: "#FF0000",
 *                  stroke: "#0000FF",
 *                  strokeThickness: 1
 *              })
 * }));
 * ```
 */
class CrossPointMarker extends BasePointMarker_1.BasePointMarker {
    /**
     * Creates an instance of the {@link CrossPointMarker}
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IPointMarkerOptions} used to configure the point-marker at instantiation time
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    drawSprite(canvas, spriteWidth, spriteHeight, stroke, strokeThickness, fill) {
        canvas.strokeStyle = stroke;
        canvas.lineWidth = strokeThickness;
        if (strokeThickness > 0) {
            canvas.beginPath();
            canvas.moveTo(this.width / 2, 0);
            canvas.lineTo(this.width / 2, this.height);
            canvas.stroke();
            canvas.beginPath();
            canvas.moveTo(0, this.height / 2);
            canvas.lineTo(this.width, this.height / 2);
            canvas.stroke();
        }
    }
}
exports.CrossPointMarker = CrossPointMarker;
