import { EAxisAlignment } from "../../../types/AxisAlignment";
import { TSciChart, TSRTexture } from "../../../types/TSciChart";
import { TTextStyle } from "../Axis/AxisCore";
/** @ignore */
declare type TTextureObject = {
    bitmapTexture: TSRTexture;
    textureWidth: number;
    textureHeight: number;
};
export declare class TextureManager {
    private webAssemblyContext;
    private canvas;
    private ctx;
    constructor(webAssemblyContext: TSciChart);
    createTextTexture(text: string, fontStyle: string, fontWeight: string, fontSizePx: number, fontFamily: string, color: string, padding?: number, backgroundColor?: string, displayVertically?: boolean, displayMirrored?: boolean, opacity?: number): TTextureObject;
    createAxisMarkerTexture(axisAlignment: EAxisAlignment, text: string, fontStyle: string, fontWeight: string, fontSizePx: number, fontFamily: string, color: string, padding?: number, backgroundColor?: string, opacity?: number): TTextureObject;
    createAxisLabelsTexture(tickLabels: string[], tickCoords: number[], labelStyle: TTextStyle, textureWidth: number, textureHeight: number, isAxisFlipped: boolean, axisAlignment: EAxisAlignment, tickSize: number, isFlippedCoordinates: boolean): TTextureObject;
    private createTextureFromCtx;
    private createTextureFromCtxBuffer;
    private createMockTexture;
}
export declare const measureTextHeight: (fontSizePx: number) => number;
export declare const measureTextWidth: (ctx: CanvasRenderingContext2D, text: string) => number;
export declare const deviderForCoordinate: (devider: number, isAxisFlipped: boolean, isFlippedCoordinates: boolean, xCoord: number, labelTextWidth: number, xCoordNext: number, xCenterDelta: number) => number;
export declare const deviderForLastCoordinate: (devider: number, isFlippedCoordinates: boolean, lastCoord: number, lastLabelTextWidth: number, preLastCoord: number, preLastXCenterDelta: number) => number;
export {};
