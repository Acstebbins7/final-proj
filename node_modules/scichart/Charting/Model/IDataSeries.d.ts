import { EventHandler } from "../../Core/EventHandler";
import { IDeletable } from "../../Core/IDeletable";
import { NumberRange } from "../../Core/NumberRange";
import { DoubleVector } from "../../types/TSciChart";
/**
 * Defines {@link BaseDataSeries | DataSeries} types available within SciChart's
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 */
export declare enum EDataSeriesType {
    /**
     * Defines an {@link XyDataSeries}
     */
    Xy = "Xy",
    /**
     * Defines an {@link XyyDataSeries}, with two Y-points for every X-Value
     */
    Xyy = "Xyy",
    /**
     * Defines an {@link XyzDataSeries}
     */
    Xyz = "Xyz",
    /**
     * Defines an {@link OhlcDataSeries} for
     * {@link https://www.scichart.com/javascript-chart-features | JavaScript Stock Charts} or
     * financial charts
     */
    Ohlc = "Ohlc",
    /**
     * Defines a {@link UniformHeatmapDataSeries | DataSeries}
     */
    HeatmapUniform = "UniformHeatmap"
}
/**
 * Defines the interface to a DataSeries in SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * A DataSeries stores the data to render. This is independent from the {@link IRenderableSeries | RenderableSeries}
 * which defines how that data should be rendered.
 *
 * See derived types of {@link BaseDataSeries} to find out what data-series are available.
 * See derived types of {@link IRenderableSeries} to find out what 2D JavaScript Chart types are available.
 */
export interface IDataSeries extends IDeletable {
    /**
     * Gets the {@link EDataSeriesType} type of the DataSeries
     */
    readonly type: EDataSeriesType;
    /**
     * An {@link EventHandler} which is raised when the data changes.
     * @Remarks
     * To subscribe to dataChanged, use the following code:
     *
     * ```ts
     * const dataSeries = new XyDataSeries(wasmContext);
     * const callback = () => {
     *    // Data has changed
     * };
     * dataSeries.dataChanged.subscribe(callback);
     * ```
     *
     * To unsubscribe from dataChanged, use the following code:
     *
     * ```ts
     * const dataSeries = new XyDataSeries(wasmContext);
     * dataSeries.dataChanged.unsubscribe(callback);
     * ```
     */
    dataChanged: EventHandler<void>;
    /**
     * Gets the range in the X-direction for this DataSeries
     */
    xRange: NumberRange;
    /**
     * When true, the DataSeries has values, else it is empty
     */
    hasValues: boolean;
    minXSpacing: number;
    /**
     * Gets the DataSeries name. This is used in legend controls and tooltips to identify the series
     */
    dataSeriesName: string;
    /**
     * Gets or sets whether the X-values are sorted or not.
     * See remarks at {@link IDataSeries.isSorted} for further information
     * @remarks
     * The user must specify this flag (defaults to true) in order to choose the correct, and
     * fastest algorithms for drawing, indexing and ranging. If you experience glitches or
     * strange drawing, it may be because you have set unsorted data but not set this flag.
     */
    isSorted: boolean;
    /**
     * Gets or sets whether the Y data contains NaN values.
     * Set containsNaN = false for the performance optimization when the series has no NaNs
     */
    containsNaN: boolean;
    /**
     * Gets the count of data-points in the DataSeries
     */
    count(): number;
    /**
     * Gets a native / WebAssembly Vector of Indexes in the DataSeries
     */
    getNativeIndexes(): DoubleVector;
    /**
     * Gets a native / WebAssembly vector of X-values in the DataSeries
     */
    getNativeXValues(): DoubleVector;
    /**
     * Gets a native / WebAssembly vector of Y-values in the DataSeries
     */
    getNativeYValues(): DoubleVector;
    /**
     * Returns true if this DataSeries has been deleted and native memory destroyed
     */
    getIsDeleted(): boolean;
    /**
     * Gets the Y-range of the data within the specified X-Range: a 'windowed'
     * Y-range used for zooming into series on the {@link SciChartSurface}
     * @param xRange The {@link AxisCore.visibleRange | XAxis.visibleRange}
     * @param getPositiveRange When true, return the positive part of the Y-range only
     * @param isCategoryAxis When true, treat the XAxis as a {@link CategoryAxis} -
     * an axis type which measures by x-index not x-value
     */
    getWindowedYRange(xRange: NumberRange, getPositiveRange: boolean, isCategoryAxis: boolean): NumberRange;
}
