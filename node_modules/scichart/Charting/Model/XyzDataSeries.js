"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyzDataSeries = void 0;
const Deleter_1 = require("../../Core/Deleter");
const Guard_1 = require("../../Core/Guard");
const fillDoubleVectorFromJsArray_1 = require("../../utils/ccall/fillDoubleVectorFromJsArray");
const BaseDataSeries_1 = require("./BaseDataSeries");
const IDataSeries_1 = require("./IDataSeries");
/**
 * XyzDataSeries is a DataSeries for holding X, Y, Z data in SciChart's 2D
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @remarks
 * The {@link XyzDataSeries} is primarily used with our {@link FastBubbleRenderableSeries | JavaScript Bubble Chart},
 * which draws a variable-sized bubble or shape at each X,Y value
 *
 * A DataSeries stores the data to render. This is independent from the {@link IRenderableSeries | RenderableSeries}
 * which defines how that data should be rendered.
 *
 * See derived types of {@link BaseDataSeries} to find out what data-series are available.
 * See derived types of {@link IRenderableSeries} to find out what 2D JavaScript Chart types are available.
 */
class XyzDataSeries extends BaseDataSeries_1.BaseDataSeries {
    /**
     * Creates an instance of {@link XyzDataSeries}
     * @param webAssemblyContext the {@link TSciChart | SciChart WebAssembly Context} containing native methods
     * and access to our underlying WebGL2 rendering engine
     * @param options the {@link IXyzDataSeriesOptions} which can be passed to configure the DataSeries at construct time
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext);
        /**
         * @inheritDoc
         */
        this.type = IDataSeries_1.EDataSeriesType.Xyz;
        this.zValues = new webAssemblyContext.DoubleVector();
        if (options === null || options === void 0 ? void 0 : options.xValues) {
            Guard_1.Guard.notNull(options.yValues, "options.yValues");
            Guard_1.Guard.notNull(options.zValues, "options.zValues");
            this.appendRange(options.xValues, options.yValues, options.zValues);
        }
    }
    /**
     * Gets a native / WebAssembly vector of Z-values in the DataSeries
     */
    getNativeZValues() {
        return this.zValues;
    }
    /**
     * Appends a single X, Y, Z point to the DataSeries
     * @remarks
     * For best performance on drawing large datasets, use the {@link appendRange} method
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param x The X-value
     * @param y The Y-value
     * @param z The Z-value
     */
    append(x, y, z) {
        if (!this.getIsDeleted()) {
            this.getNativeXValues().push_back(x);
            this.getNativeYValues().push_back(y);
            this.getNativeZValues().push_back(z);
            this.notifyDataChanged();
        }
    }
    /**
     * Appends a range of X, Y, Z points to the DataSeries
     * @remarks
     * This method is considerably higher performance than {@link append} which appends a single point
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param xValues The X-values
     * @param yValues The Y-values
     * @param zValues The Z-values
     */
    appendRange(xValues, yValues, zValues) {
        if (!this.getIsDeleted()) {
            Guard_1.Guard.arraysSameLengthArr([
                { arg: xValues, name: "xValues" },
                { arg: yValues, name: "yValues" },
                { arg: zValues, name: "zValues" }
            ]);
            const nativeX = this.getNativeXValues();
            const nativeY = this.getNativeYValues();
            const nativeZ = this.getNativeZValues();
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeX, xValues);
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeY, yValues);
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeZ, zValues);
            this.notifyDataChanged();
        }
    }
    /**
     * Updates a single Y, Z-value by X-index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param index the index to update
     * @param y The new Y value
     * @param z The new Z value
     */
    update(index, y, z) {
        if (!this.getIsDeleted()) {
            this.getNativeYValues().set(index, y);
            this.getNativeZValues().set(index, z);
            this.notifyDataChanged();
        }
    }
    /**
     * Inserts a single X,Y,Z value at the start index
     * @remarks
     * For best performance on drawing large datasets, use the {@link insertRange} method
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the index to insert at
     * @param x the Xvalue
     * @param y the YValue
     * @param z the ZValue
     */
    insert(startIndex, x, y, z) {
        if (!this.getIsDeleted()) {
            if (startIndex < 0 || startIndex >= this.count()) {
                throw new Error("Start index is out of range");
            }
            const nativeX = this.getNativeXValues();
            const nativeY = this.getNativeYValues();
            const nativeZ = this.getNativeZValues();
            nativeX.insertAt(startIndex, x);
            nativeY.insertAt(startIndex, y);
            nativeZ.insertAt(startIndex, z);
            this.notifyDataChanged();
        }
    }
    /**
     * Inserts a range of X,Y,Z values at the startIndex
     * @remarks
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the index to insert at
     * @param xValues the XValues
     * @param yValues the YValues
     * @param zValues the ZValues
     */
    insertRange(startIndex, xValues, yValues, zValues) {
        if (!this.getIsDeleted()) {
            Guard_1.Guard.arraysSameLengthArr([
                { arg: xValues, name: "xValues" },
                { arg: yValues, name: "yValues" },
                { arg: zValues, name: "zValues" }
            ]);
            if (startIndex < 0 || startIndex >= this.count()) {
                throw new Error("Start index is out of range");
            }
            const rangeLength = xValues.length;
            const nativeX = this.getNativeXValues();
            const nativeY = this.getNativeYValues();
            const nativeZ = this.getNativeZValues();
            for (let i = 0; i < rangeLength; i++, startIndex++) {
                nativeX.insertAt(startIndex, xValues[i]);
                nativeY.insertAt(startIndex, yValues[i]);
                nativeZ.insertAt(startIndex, zValues[i]);
            }
            this.notifyDataChanged();
        }
    }
    /**
     * Removes a single X,Y,Z value at the specified index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param index the index to remove at
     */
    removeAt(index) {
        if (!this.getIsDeleted()) {
            if (index < 0 || index >= this.count()) {
                throw new Error("index is out of range");
            }
            this.getNativeXValues().removeAt(index);
            this.getNativeYValues().removeAt(index);
            this.getNativeZValues().removeAt(index);
            this.notifyDataChanged();
        }
    }
    /**
     * Removes a range of X,Y,Z values at the specified index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the start index to remove at
     * @param count the number of points to remove
     */
    removeRange(startIndex, count) {
        if (!this.getIsDeleted()) {
            if (startIndex < 0 || startIndex + count > this.count()) {
                throw new Error("index is out of range");
            }
            this.getNativeXValues().removeRange(startIndex, count);
            this.getNativeYValues().removeRange(startIndex, count);
            this.getNativeZValues().removeRange(startIndex, count);
            this.notifyDataChanged();
        }
    }
    /**
     * Clears the entire DataSeries.
     * @remarks
     * Note this does not free memory, WebAssembly/Native memory is released by calling {@link delete}, after which the
     * DataSeries is no longer usable.
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     */
    clear() {
        if (!this.getIsDeleted()) {
            this.getNativeIndexes().clear();
            this.getNativeXValues().clear();
            this.getNativeYValues().clear();
            this.getNativeZValues().clear();
            this.notifyDataChanged();
        }
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.zValues = Deleter_1.deleteSafe(this.zValues);
        super.delete();
    }
}
exports.XyzDataSeries = XyzDataSeries;
