"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultPaletteProvider = exports.EFillPaletteMode = exports.EStrokePaletteMode = void 0;
var EStrokePaletteMode;
(function (EStrokePaletteMode) {
    EStrokePaletteMode["GRADIENT"] = "GRADIENT";
    EStrokePaletteMode["SOLID"] = "SOLID";
})(EStrokePaletteMode = exports.EStrokePaletteMode || (exports.EStrokePaletteMode = {}));
var EFillPaletteMode;
(function (EFillPaletteMode) {
    EFillPaletteMode["GRADIENT"] = "GRADIENT";
    EFillPaletteMode["SOLID"] = "SOLID";
})(EFillPaletteMode = exports.EFillPaletteMode || (exports.EFillPaletteMode = {}));
/**
 * A Default Palette provider is applied to the {@link BaseRenderableSeries.paletteProvider} property in the constructor
 * however all its functions such as {@link DefaultPaletteProvider.overrideFillArgb}, {@link DefaultPaletteProvider.overrideStrokeArgb}
 * etc... are set to undefined. This allows a user to do quick one-line paletteproviders in vanilla Javascript like this:
 *
 * ```javascript
 * const series = new FastLineRenderableSeries(wasmContext);
 * series.paletteProvider.overrideFillArgb = (xValue, yValue, index) => {
 *     return yValue > 0 ? parseColorToUIntArgb("white") : undefined;
 * }
 * ```
 */
class DefaultPaletteProvider {
    constructor() {
        this.strokePaletteMode = EStrokePaletteMode.GRADIENT;
        this.fillPaletteMode = EFillPaletteMode.GRADIENT;
        this.onAttached = undefined;
        this.onDetached = undefined;
        this.overrideFillArgb = undefined;
        this.overrideStrokeArgb = undefined;
        this.overridePointMarkerArgb = undefined;
    }
    /**
     * @inheritDoc
     */
    // tslint:disable-next-line:no-empty
    onAttached(parentSeries) { }
    /**
     * @inheritDoc
     */
    // tslint:disable-next-line:no-empty
    onDetached() { }
    /**
     * @inheritDoc
     */
    overrideFillArgb(xValue, yValue, index, opacity) {
        return undefined;
    }
    /**
     * @inheritDoc
     */
    overrideStrokeArgb(xValue, yValue, index, opacity) {
        return undefined;
    }
    /**
     * @inheritDoc
     */
    overridePointMarkerArgb(xValue, yValue, index, opacity) {
        return undefined;
    }
}
exports.DefaultPaletteProvider = DefaultPaletteProvider;
