import { NumberRange } from "../../Core/NumberRange";
import { TSciChart } from "../../types/TSciChart";
import { BaseHeatmapDataSeries } from "./BaseHeatmapDataSeries";
import { EDataSeriesType } from "./IDataSeries";
export declare class UniformHeatmapDataSeries extends BaseHeatmapDataSeries {
    /**
     * @inheritDoc
     */
    readonly type: EDataSeriesType;
    /**
     * xStart defines the Start point on the {@link AxisBase2D| XAxis} where this heatmap will be drawn
     */
    readonly xStart: number;
    /**
     * xStep defines Step on the {@link AxisBase2D| XAxis} for each cell in the heatmap
     */
    readonly xStep: number;
    /**
     * yStart defines the Start point on the {@link AxisBase2D| YAxis} where this heatmap will be drawn
     */
    readonly yStart: number;
    /**
     * yStep defines Step on the {@link AxisBase2D| YAxis} for each cell in the heatmap
     */
    readonly yStep: number;
    private xRangeProperty;
    private yRangeProperty;
    /**
     * Creates an instance of {@link UniformHeatmapDataSeries}
     * @param webAssemblyContext the {@link TSciChart | SciChart WebAssembly Context} containing native methods
     * and access to our underlying WebGL2 rendering engine
     * @param xStart defines the Start point on the {@link AxisBase2D| XAxis} where this heatmap will be drawn
     * @param xStep defines Step on the {@link AxisBase2D| XAxis} for each cell in the heatmap
     * @param yStart defines the Start point on the {@link AxisBase2D| YAxis} where this heatmap will be drawn
     * @param yStep defines Step on the {@link AxisBase2D| YAxis} for each cell in the heatmap
     * @param zValues the 2-Dimensional array of cells which can be passed to populate the {@link BaseHeatmapDataSeries} at construct time.
     * The numeric values in these cells will be used to render the heatmap according to the
     * {@link UniformHeatmapRenderableSeries.colorMap | Color Map} provided
     */
    constructor(webAssemblyContext: TSciChart, xStart: number, xStep: number, yStart: number, yStep: number, zValues?: number[][]);
    /**
     * Gets the X-value at the specified index. This will be computed from constructor parameters xStep and xStart
     * @param xIndex
     */
    getXValue(xIndex: number): number;
    /**
     * Gets the Y-value at the specified index. This will be computed from constructor parameters yStep and yxStart
     * @param xIndex
     */
    getYValue(yIndex: number): number;
    /**
     * @inheritDoc
     */
    notifyDataChanged(): void;
    /**
     * @inheritDoc
     */
    protected getXRange(): NumberRange;
    /**
     * @inheritDoc
     */
    protected getYRange(): NumberRange;
}
