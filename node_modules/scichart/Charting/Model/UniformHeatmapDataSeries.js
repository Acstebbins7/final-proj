"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniformHeatmapDataSeries = void 0;
const NumberRange_1 = require("../../Core/NumberRange");
const BaseHeatmapDataSeries_1 = require("./BaseHeatmapDataSeries");
const IDataSeries_1 = require("./IDataSeries");
class UniformHeatmapDataSeries extends BaseHeatmapDataSeries_1.BaseHeatmapDataSeries {
    /**
     * Creates an instance of {@link UniformHeatmapDataSeries}
     * @param webAssemblyContext the {@link TSciChart | SciChart WebAssembly Context} containing native methods
     * and access to our underlying WebGL2 rendering engine
     * @param xStart defines the Start point on the {@link AxisBase2D| XAxis} where this heatmap will be drawn
     * @param xStep defines Step on the {@link AxisBase2D| XAxis} for each cell in the heatmap
     * @param yStart defines the Start point on the {@link AxisBase2D| YAxis} where this heatmap will be drawn
     * @param yStep defines Step on the {@link AxisBase2D| YAxis} for each cell in the heatmap
     * @param zValues the 2-Dimensional array of cells which can be passed to populate the {@link BaseHeatmapDataSeries} at construct time.
     * The numeric values in these cells will be used to render the heatmap according to the
     * {@link UniformHeatmapRenderableSeries.colorMap | Color Map} provided
     */
    constructor(webAssemblyContext, xStart, xStep, yStart, yStep, zValues) {
        super(webAssemblyContext, zValues);
        /**
         * @inheritDoc
         */
        this.type = IDataSeries_1.EDataSeriesType.HeatmapUniform;
        this.xStart = xStart;
        this.xStep = xStep;
        this.yStart = yStart;
        this.yStep = yStep;
        this.xRangeProperty = new NumberRange_1.NumberRange(this.xStart, this.getXValue(this.arrayWidth));
        this.yRangeProperty = new NumberRange_1.NumberRange(this.yStart, this.getYValue(this.arrayHeight));
    }
    /**
     * Gets the X-value at the specified index. This will be computed from constructor parameters xStep and xStart
     * @param xIndex
     */
    getXValue(xIndex) {
        const offset = this.xStep * xIndex;
        return this.xStart + offset;
    }
    /**
     * Gets the Y-value at the specified index. This will be computed from constructor parameters yStep and yxStart
     * @param xIndex
     */
    getYValue(yIndex) {
        const offset = this.yStep * yIndex;
        return this.yStart + offset;
    }
    /**
     * @inheritDoc
     */
    notifyDataChanged() {
        this.xRangeProperty = new NumberRange_1.NumberRange(this.xStart, this.getXValue(this.arrayWidth));
        this.yRangeProperty = new NumberRange_1.NumberRange(this.yStart, this.getYValue(this.arrayHeight));
        super.notifyDataChanged();
    }
    /**
     * @inheritDoc
     */
    getXRange() {
        return this.xRangeProperty;
    }
    /**
     * @inheritDoc
     */
    getYRange() {
        return this.yRangeProperty;
    }
}
exports.UniformHeatmapDataSeries = UniformHeatmapDataSeries;
