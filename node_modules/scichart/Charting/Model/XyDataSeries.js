"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XyDataSeries = void 0;
const Guard_1 = require("../../Core/Guard");
const fillDoubleVectorFromJsArray_1 = require("../../utils/ccall/fillDoubleVectorFromJsArray");
const BaseDataSeries_1 = require("./BaseDataSeries");
const IDataSeries_1 = require("./IDataSeries");
/**
 * @summary XyDataSeries is a DataSeries for holding X, Y data in SciChart's 2D
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts}
 * @description
 * The XyDataSeries is primarily used with our {@link FastLineRenderableSeries | JavaScript Line Chart},
 * but can also be used by the {@link XyScatterRenderableSeries | JavaScript Scatter Chart} or
 * {@link FastMountainRenderableSeries | JavaScript Mountain/Area Chart} and {@link FastMountainRenderableSeries | JavaScript Column Chart}.
 *
 * To instantiate an {@link XyDataSeries}, use the following code:
 * ```ts
 * const xyDataSeries = new XyDataSeries(wasmContext);
 * xyDataSeries.append(1, 2); // Append a single x,y point
 * xyDataSeries.appendRange([3, 4], [3, 4]); // Append multiple x,y points (faster)
 * xyDataSeries.insert(0, 9, 10); // Insert a point at index 0
 * xyDataSeries.update(0, 11, 12); // Update a point at index 0
 * xyDataSeries.removeAt(0); // Remove a point at index 0
 * xyDataSeries.clear(); // Clear the dataseries
 * xyDataSeries.delete(); // Delete the dataseries and native (WebAssembly) memory
 * ```
 * @remarks
 * A DataSeries stores the data to render. This is independent from the {@link IRenderableSeries | RenderableSeries}
 * which defines how that data should be rendered.
 *
 * See derived types of {@link BaseDataSeries} to find out what data-series are available.
 * See derived types of {@link IRenderableSeries} to find out what 2D JavaScript Chart types are available.
 */
class XyDataSeries extends BaseDataSeries_1.BaseDataSeries {
    /**
     * Creates an instance of {@link XyDataSeries}
     * @param webAssemblyContext the {@link TSciChart | SciChart WebAssembly Context} containing native methods
     * and access to our underlying WebGL2 WebAssembly rendering engine
     * @param options the {@link IXyDataSeriesOptions} which can be passed to configure the DataSeries at construct time
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        /**
         * @inheritDoc
         */
        this.type = IDataSeries_1.EDataSeriesType.Xy;
        if (options === null || options === void 0 ? void 0 : options.xValues) {
            Guard_1.Guard.notNull(options.yValues, "options.yValues");
            this.appendRange(options.xValues, options.yValues);
        }
    }
    /**
     * Appends a single X, Y point to the DataSeries
     * @remarks
     * For best performance on drawing large datasets, use the {@link appendRange} method
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param x The X-value
     * @param y The Y-value
     */
    append(x, y) {
        if (!this.getIsDeleted()) {
            this.getNativeXValues().push_back(x);
            this.getNativeYValues().push_back(y);
            this.notifyDataChanged();
        }
    }
    /**
     * Appends a range of X, Y points to the DataSeries
     * @remarks
     * This method is considerably higher performance than {@link append} which appends a single point
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param xValues The X-values
     * @param yValues The Y-values
     */
    appendRange(xValues, yValues) {
        if (!this.getIsDeleted()) {
            Guard_1.Guard.arraysSameLength(xValues, "xValues", yValues, "yValues");
            const nativeX = this.getNativeXValues();
            const nativeY = this.getNativeYValues();
            // Old implementation with copying each element
            // for (let i = 0; i < xValues.length; i++) {
            //     nativeX.push_back(xValues[i]);
            //     nativeY.push_back(yValues[i]);
            // }
            // New implementation passing array from JS
            // TODO: create indexValues from c++
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeX, xValues);
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeY, yValues);
            this.notifyDataChanged();
        }
    }
    /**
     * Updates a single Y-value by X-index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param index the index to update
     * @param y The new Y value
     */
    update(index, y) {
        if (!this.getIsDeleted()) {
            this.getNativeYValues().set(index, y);
            this.notifyDataChanged();
        }
    }
    /**
     * @summary Inserts a single X,Y value at the start index
     * @remarks
     * For best performance on drawing large datasets, use the {@link insertRange} method
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the index to insert at
     * @param x the Xvalue
     * @param y the Yvalue
     */
    insert(startIndex, x, y) {
        if (!this.getIsDeleted()) {
            if (startIndex < 0 || startIndex >= this.count()) {
                throw new Error("Start index is out of range");
            }
            const nativeX = this.getNativeXValues();
            const nativeY = this.getNativeYValues();
            nativeX.insertAt(startIndex, x);
            nativeY.insertAt(startIndex, y);
            this.notifyDataChanged();
        }
    }
    /**
     * @summary Inserts a range of X,Y values at the startIndex
     * @remarks
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the index to insert at
     * @param xValues the XValues
     * @param yValues the YValues
     */
    insertRange(startIndex, xValues, yValues) {
        if (!this.getIsDeleted()) {
            Guard_1.Guard.arraysSameLength(xValues, "xValues", yValues, "yValues");
            if (startIndex < 0 || startIndex >= this.count()) {
                throw new Error("Start index is out of range");
            }
            const rangeLength = xValues.length;
            const nativeX = this.getNativeXValues();
            const nativeY = this.getNativeYValues();
            for (let i = 0; i < rangeLength; i++, startIndex++) {
                nativeX.insertAt(startIndex, xValues[i]);
                nativeY.insertAt(startIndex, yValues[i]);
            }
            this.notifyDataChanged();
        }
    }
    /**
     * Removes an X,Y value at the specified index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param index the index to remove at
     */
    removeAt(index) {
        if (!this.getIsDeleted()) {
            if (index < 0 || index >= this.count()) {
                throw new Error("index is out of range");
            }
            this.getNativeXValues().removeAt(index);
            this.getNativeYValues().removeAt(index);
            this.notifyDataChanged();
        }
    }
    /**
     * @summary Removes a range of X,Y values at the specified index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the start index to remove at
     * @param count the number of points to remove
     */
    removeRange(startIndex, count) {
        if (!this.getIsDeleted()) {
            if (startIndex < 0 || startIndex + count > this.count()) {
                throw new Error("index is out of range");
            }
            this.getNativeXValues().removeRange(startIndex, count);
            this.getNativeYValues().removeRange(startIndex, count);
            this.notifyDataChanged();
        }
    }
    /**
     * Clears the entire DataSeries.
     * @remarks
     * Note this does not free memory, WebAssembly/Native memory is released by calling {@link delete}, after which the
     * DataSeries is no longer usable.
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     */
    clear() {
        if (!this.getIsDeleted()) {
            this.getNativeIndexes().clear();
            this.getNativeXValues().clear();
            this.getNativeYValues().clear();
            this.notifyDataChanged();
        }
    }
}
exports.XyDataSeries = XyDataSeries;
