"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OhlcDataSeries = void 0;
const Deleter_1 = require("../../Core/Deleter");
const Guard_1 = require("../../Core/Guard");
const NumberRange_1 = require("../../Core/NumberRange");
const fillDoubleVectorFromJsArray_1 = require("../../utils/ccall/fillDoubleVectorFromJsArray");
const BaseDataSeries_1 = require("./BaseDataSeries");
const IDataSeries_1 = require("./IDataSeries");
/**
 * OhlcDataSeries is a DataSeries for holding Open, High, Low, Close data in SciChart's
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript Stock Charts}
 * @remarks
 * The OhlcDataSeries is primarily used with the {@link FastCandlestickRenderableSeries | JavaScript Candlestick Chart}
 * but can also be used with our {@link FastOhlcRenderableSeries | JavaScript Ohlc Chart},
 * used for drawing {@link https://www.scichart.com/javascript-chart-features | JavaScript Stock Charts} and Candlestick or OHLC charts.
 *
 * A DataSeries stores the data to render. This is independent from the {@link IRenderableSeries | RenderableSeries}
 * which defines how that data should be rendered.
 *
 * See derived types of {@link BaseDataSeries} to find out what data-series are available.
 * See derived types of {@link IRenderableSeries} to find out what 2D JavaScript Chart types are available.
 */
class OhlcDataSeries extends BaseDataSeries_1.BaseDataSeries {
    /**
     * Creates an instance of {@link OhlcDataSeries}
     * @param webAssemblyContext the {@link TSciChart | SciChart WebAssembly Context} containing native methods
     * and access to our underlying WebGL2 rendering engine
     * @param options the {@link IOhlcDataSeriesOptions} which can be passed to configure the DataSeries at construct time
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        /**
         * @inheritDoc
         */
        this.type = IDataSeries_1.EDataSeriesType.Ohlc;
        this.openValues = new webAssemblyContext.DoubleVector();
        this.highValues = new webAssemblyContext.DoubleVector();
        this.lowValues = new webAssemblyContext.DoubleVector();
        if (options === null || options === void 0 ? void 0 : options.xValues) {
            this.appendRange(options.xValues, options.openValues, options.highValues, options.lowValues, options.closeValues);
        }
    }
    /**
     * Gets a native / WebAssembly vector of Open-values in the DataSeries
     */
    getNativeOpenValues() {
        return this.openValues;
    }
    /**
     * Gets a native / WebAssembly vector of High-values in the DataSeries
     */
    getNativeHighValues() {
        return this.highValues;
    }
    /**
     * Gets a native / WebAssembly vector of Low-values in the DataSeries
     */
    getNativeLowValues() {
        return this.lowValues;
    }
    /**
     * Gets a native / WebAssembly vector of Close-values in the DataSeries
     */
    getNativeCloseValues() {
        return this.getNativeYValues();
    }
    /**
     * Appends a single X (Date), Open, High, Low, Close point to the DataSeries
     * @remarks
     * For best performance on drawing large datasets, use the {@link appendRange} method
     * X-value is a Date, encoded as a Unix Timestamp.
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param x X-value is a Date, encoded as a Unix Timestamp.
     * @param open The Open value for this OHLC bar
     * @param high The High value for this OHLC bar
     * @param low The Low value for this OHLC bar
     * @param close The Close value for this OHLC bar
     */
    append(x, open, high, low, close) {
        if (!this.getIsDeleted()) {
            this.getNativeXValues().push_back(x);
            this.getNativeOpenValues().push_back(open);
            this.getNativeHighValues().push_back(high);
            this.getNativeLowValues().push_back(low);
            this.getNativeCloseValues().push_back(close);
            this.notifyDataChanged();
        }
    }
    /**
     * Appends arrays of X (Date), Open, High, Low, Close point to the DataSeries
     * @remarks
     * This method is considerably higher performance than {@link append} which appends a single point
     * X-value is a Date, encoded as a Unix Timestamp.
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param xValues X-values are Dates, encoded as a Unix Timestamp.
     * @param openValues The Open values for this OHLC bar
     * @param highValues The High values for this OHLC bar
     * @param lowValues The Low values for this OHLC bar
     * @param closeValues The Close value sfor this OHLC bar
     */
    appendRange(xValues, openValues, highValues, lowValues, closeValues) {
        if (!this.getIsDeleted()) {
            Guard_1.Guard.arraysSameLengthArr([
                { arg: xValues, name: "xValues" },
                { arg: openValues, name: "openValues" },
                { arg: highValues, name: "highValues" },
                { arg: lowValues, name: "lowValues" },
                { arg: closeValues, name: "closeValues" }
            ]);
            const nativeX = this.getNativeXValues();
            const nativeOpen = this.getNativeOpenValues();
            const nativeHigh = this.getNativeHighValues();
            const nativeLow = this.getNativeLowValues();
            const nativeClose = this.getNativeCloseValues();
            // New implementation passing array from JS
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeX, xValues);
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeOpen, openValues);
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeHigh, highValues);
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeLow, lowValues);
            fillDoubleVectorFromJsArray_1.fillDoubleVectorFromJsArray(this.webAssemblyContext, nativeClose, closeValues);
            this.notifyDataChanged();
        }
    }
    /**
     * Updates a single Open, High, Low, Close value by X-index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param index the index to update
     * @param open The new Open value
     * @param high The new High value
     * @param low The new Low value
     * @param close The new Close value
     */
    update(index, open, high, low, close) {
        if (!this.getIsDeleted()) {
            this.getNativeOpenValues().set(index, open);
            this.getNativeHighValues().set(index, high);
            this.getNativeLowValues().set(index, low);
            this.getNativeCloseValues().set(index, close);
            this.notifyDataChanged();
        }
    }
    /**
     * Inserts a single Date, Open, High, Low, Close value at the X-index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the index to insert at
     * @param x the X-value (date) encoded as a Unix Timestamp
     * @param open The Open value
     * @param high The High value
     * @param low The Low value
     * @param close The Close value
     */
    insert(startIndex, x, open, high, low, close) {
        if (!this.getIsDeleted()) {
            if (startIndex < 0 || startIndex >= this.count()) {
                throw new Error("Start index is out of range");
            }
            this.getNativeXValues().insertAt(startIndex, x);
            this.getNativeOpenValues().insertAt(startIndex, open);
            this.getNativeHighValues().insertAt(startIndex, high);
            this.getNativeLowValues().insertAt(startIndex, low);
            this.getNativeCloseValues().insertAt(startIndex, close);
            this.notifyDataChanged();
        }
    }
    /**
     * Inserts a range of Date, Open, High, Low, Close value at the X-index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the index to insert at
     * @param xValues the X-values (dates) encoded as a Unix Timestamp
     * @param openValues The Open values
     * @param highValues The High values
     * @param lowValues The Low values
     * @param closeValues The Close values
     */
    insertRange(startIndex, xValues, openValues, highValues, lowValues, closeValues) {
        if (!this.getIsDeleted()) {
            Guard_1.Guard.arraysSameLengthArr([
                { arg: xValues, name: "xValues" },
                { arg: openValues, name: "openValues" },
                { arg: highValues, name: "highValues" },
                { arg: lowValues, name: "lowValues" },
                { arg: closeValues, name: "closeValues" }
            ]);
            if (startIndex < 0 || startIndex >= this.count()) {
                throw new Error("Start index is out of range");
            }
            const rangeLength = xValues.length;
            const nativeX = this.getNativeXValues();
            const nativeOpen = this.getNativeOpenValues();
            const nativeHigh = this.getNativeHighValues();
            const nativeLow = this.getNativeLowValues();
            const nativeY = this.getNativeCloseValues();
            for (let i = 0; i < rangeLength; i++, startIndex++) {
                nativeX.insertAt(startIndex, xValues[i]);
                nativeOpen.insertAt(startIndex, openValues[i]);
                nativeHigh.insertAt(startIndex, highValues[i]);
                nativeLow.insertAt(startIndex, lowValues[i]);
                nativeY.insertAt(startIndex, closeValues[i]);
            }
            this.notifyDataChanged();
        }
    }
    /**
     * Removes a Date,Open,High,Low,Close value at the specified index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param index the index to remove at
     */
    removeAt(index) {
        if (!this.getIsDeleted()) {
            if (index < 0 || index >= this.count()) {
                throw new Error("index is out of range");
            }
            this.getNativeXValues().removeAt(index);
            this.getNativeOpenValues().removeAt(index);
            this.getNativeHighValues().removeAt(index);
            this.getNativeLowValues().removeAt(index);
            this.getNativeCloseValues().removeAt(index);
            this.notifyDataChanged();
        }
    }
    /**
     * Removes a range of Date,Open,High,Low,Close values at the specified index
     * @remarks Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     * @param startIndex the start index to remove at
     * @param count the number of points to remove
     */
    removeRange(startIndex, count) {
        if (!this.getIsDeleted()) {
            if (startIndex < 0 || startIndex + count > this.count()) {
                throw new Error("index is out of range");
            }
            this.getNativeXValues().removeRange(startIndex, count);
            this.getNativeOpenValues().removeRange(startIndex, count);
            this.getNativeHighValues().removeRange(startIndex, count);
            this.getNativeLowValues().removeRange(startIndex, count);
            this.getNativeCloseValues().removeRange(startIndex, count);
            this.notifyDataChanged();
        }
    }
    /**
     * Clears the entire DataSeries.
     * @remarks
     * Note this does not free memory, WebAssembly/Native memory is released by calling {@link delete}, after which the
     * DataSeries is no longer usable.
     *
     * Any changes of the DataSeries will trigger a redraw on the parent {@link SciChartSurface}
     */
    clear() {
        if (!this.getIsDeleted()) {
            this.getNativeIndexes().clear();
            this.getNativeXValues().clear();
            this.getNativeOpenValues().clear();
            this.getNativeHighValues().clear();
            this.getNativeLowValues().clear();
            this.getNativeCloseValues().clear();
            this.notifyDataChanged();
        }
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.indexes = Deleter_1.deleteSafe(this.indexes);
        this.xValues = Deleter_1.deleteSafe(this.xValues);
        this.openValues = Deleter_1.deleteSafe(this.openValues);
        this.highValues = Deleter_1.deleteSafe(this.highValues);
        this.lowValues = Deleter_1.deleteSafe(this.lowValues);
        this.yValues = Deleter_1.deleteSafe(this.yValues);
        this.isDeleted = true;
    }
    /**
     * @inheritDoc
     */
    getWindowedYRange(xRange, getPositiveRange, isXCategoryAxis = false) {
        if (this.count() === 1) {
            const min = this.yValues.get(0) - 1;
            const max = this.yValues.get(0) + 1;
            return new NumberRange_1.NumberRange(min, max);
        }
        const indicesRange = isXCategoryAxis ? xRange : this.getIndicesRange(xRange);
        let yMin = Number.MAX_VALUE;
        let yMax = Number.MIN_VALUE;
        const iMin = Math.max(indicesRange.min, 0);
        const iMax = Math.min(indicesRange.max, this.count() - 1);
        if (iMax < iMin) {
            return undefined;
        }
        for (let i = iMin; i <= iMax; i++) {
            const highVal = this.highValues.get(i);
            const lowVal = this.lowValues.get(i);
            if (lowVal < yMin) {
                yMin = lowVal;
            }
            if (highVal > yMax) {
                yMax = highVal;
            }
        }
        return new NumberRange_1.NumberRange(yMin, yMax);
    }
}
exports.OhlcDataSeries = OhlcDataSeries;
