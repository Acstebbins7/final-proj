"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPenInCache = exports.getScrtPenFromCache = exports.getWebGlPenFromCache = exports.Pen2DCache = void 0;
const Deleter_1 = require("../../Core/Deleter");
const Guard_1 = require("../../Core/Guard");
const array_1 = require("../../utils/array");
const createPen_1 = require("../Visuals/Helpers/createPen");
const BaseCache_1 = require("./BaseCache");
const WebGlPen_1 = require("./WebGlPen");
/**
 * @ignore
 */
class Pen2DCache extends BaseCache_1.BaseCache {
    get value() {
        const shouldRecreatePen = !this.cachedEntity && this.stroke;
        if (shouldRecreatePen) {
            const { stroke, strokeThickness, strokeDashArray, antiAliased, opacity } = this;
            this.cachedEntity = this.create({
                stroke,
                strokeThickness,
                strokeDashArray,
                antiAliased,
                opacity,
            });
        }
        return this.cachedEntity;
    }
    /**
     * Creates or fetches a new pen with the specified color string, strokethickness and antialiased property
     * @param stroke
     * @param strokeThickness
     * @param strokeDashArray
     * @param antiAliased
     * @param opacity
     */
    create(options) {
        const { stroke, strokeThickness = 1, strokeDashArray, antiAliased = true, opacity = 1, } = options;
        // Return pen from cache
        if (this.cachedEntity &&
            stroke === this.stroke &&
            strokeThickness === this.strokeThickness &&
            antiAliased === this.antiAliased &&
            array_1.areArraysEqual(strokeDashArray, this.strokeDashArray)) {
            // optimization for opacity updates
            if (opacity !== this.opacity) {
                this.opacity = opacity;
                this.cachedEntity.setOpacity(opacity);
            }
            return this.cachedEntity;
        }
        // Create new pen
        Deleter_1.deleteSafe(this.cachedEntity);
        this.stroke = stroke;
        this.opacity = opacity;
        this.antiAliased = antiAliased;
        this.strokeThickness = strokeThickness;
        this.strokeDashArray = strokeDashArray;
        const scrtPen = createPen_1.createSCRTPen(this.webAssemblyContext, stroke, strokeThickness, opacity, strokeDashArray, antiAliased);
        return this.cachedEntity = new WebGlPen_1.WebGlPen(scrtPen);
    }
}
exports.Pen2DCache = Pen2DCache;
// TODO: probably we should consider some approach to be consistent in using one of SCRTPen or WebGLPen
/**
 * Retrieves a native {@link WebGlPen} Pen from the provided {@link Pen2DCache} cache object.
 * The retrieved entity is a wrapper around {@link SCRTPen}
 * @param penCache The object that stores a pen
 * @returns the new or existing instance of {@link WebGlPen}}
 */
exports.getWebGlPenFromCache = (penCache) => {
    Guard_1.Guard.notNull(penCache, "penCache");
    return penCache.value;
};
/**
 * Retrieves a native {@link SCRTPen} Pen from the provided {@link Pen2DCache} cache object
 * @param penCache The object that stores a pen
 * @returns the new or existing instance of {@link SCRTPen}}
 */
exports.getScrtPenFromCache = (penCache) => {
    const webGlPen = exports.getWebGlPenFromCache(penCache);
    return webGlPen === null || webGlPen === void 0 ? void 0 : webGlPen.scrtPen;
};
/**
 * Creates a native {@link SCRTPen} Pen from html color code string passed in and caches it
 * @param penCache The object that will store a pen
 * @param stroke The HTML Color code
 * @param strokeThickness The strokethickness in pixels
 * @param opacity The opacity factor
 * @param strokeDashArray the StrokeDashArray which defines any dash e.g. [2,2] means dash for 2pts, gap for 2pts (or undefined = solid line).
 * @returns the new or existing instance of {@link SCRTPen}}
 */
exports.createPenInCache = (penCache, stroke, strokeThickness, opacity, strokeDashArray) => {
    Guard_1.Guard.notNull(penCache, "penCache");
    const cachedPen = penCache.create({ stroke, strokeThickness, opacity, strokeDashArray });
    return cachedPen.scrtPen;
};
