"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CategoryCoordinateCalculator = void 0;
const CoordinateCalculatorBase_1 = require("./CoordinateCalculatorBase");
/**
 * Provides an implementation of Numeric {@link CoordinateCalculatorBase | Coordinate Calculator} which transforms
 * numeric data indexes for {@link CategoryAxis} to pixel coordinates and vice versa.
 * @remarks
 * SciChart's {@link https://www.scichart.com/javascript-chart-features | JavaScript Charts} perform conversion operations between
 * data-coordinates for all drawing and axis measurements.
 *
 * You can fetch a {link CategoryCoordinateCalculator} instance by calling {@link AxisCore.getCurrentCoordinateCalculator} on a {@link CategoryAxis}.
 * This will return a unique calculator for the current draw pass.
 *
 * You can convert pixel to data-indexes and back by using the following code.
 * An additional method for Category calculators transforms between data-value and index:
 * ```ts
 * const axis: AxisCore;
 * const calc = axis.getCurrentCoordinateCalculator();
 *
 * const pixel = calc.getCoordinate(11); // Gets the pixel coordinate for data at index 11
 * const dataIndex = calc.getDataValue(pixel); // Performs the inverse operation to get data-value
 * const dataValue = calc.transformIndexToData(dataIndex); // Converts index to data-value
 * ```
 * Use the Coordinate calculators when drawing, placing markers, annotations or if you want to place a tooltip over the chart.
 */
class CategoryCoordinateCalculator extends CoordinateCalculatorBase_1.CoordinateCalculatorBase {
    /**
     * Creates an instance of CategoryCoordinateCalculator
     * @param webAssemblyContext The {@link TSciChart | SciChart 2D WebAssembly Context} or {@link TSciChart2D | SciChart 2D WebAssembly Context}
     * containing native methods and access to our WebGL2 Engine and WebAssembly numerical methods
     * @param viewportDimension The size of the associated {@link AxisCore | Axis} at the time of drawing
     * @param visibleMin The minimum data-value visible on the Axis at the time of drawing
     * @param visibleMax The maximum data-value visible on the Axis at the time of drawing
     * @param indexMin The {@link CategoryAxis.visibleRange}.min at the time of drawing, corresponding to the minimum data-index visible
     * @param indexMax The {@link CategoryAxis.visibleRange}.max at the time of drawing, corresponding to the maximum data-index visible
     * @param offset A constant pixel offset used in coordinate calculations
     */
    constructor(webAssemblyContext, viewportDimension, visibleMin, visibleMax, indexMin, indexMax, offset = 0) {
        super(webAssemblyContext, viewportDimension, visibleMin, visibleMax, offset, true, true);
        this.indexMin = indexMin;
        this.indexMax = indexMax;
        this.nativeCalculator = new webAssemblyContext.CategoryCoordinateCalculatorDouble(this.viewportDimension, this.visibleMin, this.visibleMax, -1, this.offset, this.indexMin, this.indexMax);
    }
    /**
     * Transforms an Index to a Data-value, with extrapolation and interpolation for values found outside of
     * {@link baseXValues | the Primary Chart series X-Values}
     * @param index the index to transform
     * @returns the Data-value
     */
    transformIndexToData(index) {
        // January 1st, 1970 at UTC
        let result = 0;
        if (this.baseXValues) {
            const indexInt = Math.round(index);
            const count = this.baseXValues.length;
            if (0 <= indexInt && indexInt < count) {
                result = this.baseXValues[indexInt];
            }
            else {
                // extrapolate if out of range
                const oneIndexUnitAvg = (this.baseXValues[count - 1] - this.baseXValues[0]) / (count - 1);
                result = this.baseXValues[0] + indexInt * oneIndexUnitAvg;
            }
        }
        return result;
    }
}
exports.CategoryCoordinateCalculator = CategoryCoordinateCalculator;
