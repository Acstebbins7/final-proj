"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyLicense3D = void 0;
const licenseManager2D_1 = require("../../Charting/Visuals/licenseManager2D");
// tslint:disable: no-console
const callbacks3D = {
    getLicenseChallenge3D: () => {
        const challenge = licenseContext3D.SCRTCredentials.GetLicenseChallenge();
        const orderId = licenseContext3D.SCRTCredentials.GetOrderId();
        return { challenge, orderId };
    },
    setChallengeResponse3D: (token) => licenseContext3D.SCRTCredentials.ApplyLicenseResponse(token),
    setNewLicense3D: (keyCode) => {
        let requiresValidation = false;
        let trialExpired;
        licenseContext3D.SCRTCredentials.SetRuntimeLicenseKeyW(keyCode);
        requiresValidation = licenseContext3D.SCRTCredentials.RequiresValidation();
        trialExpired =
            licenseContext3D.SCRTCredentials.GetLicenseType() ===
                licenseContext3D.SCRTLicenseType.LICENSE_TYPE_TRIAL_EXPIRED;
        licenseManager2D_1.updateLicenseDisplay(licenseManager2D_1.getLicenseInfo(licenseContext3D), sciChartSurface3D, false, true);
        return { requiresValidation, trialExpired };
    },
    updateLicenseDisplay3D: () => licenseManager2D_1.updateLicenseDisplay(licenseManager2D_1.getLicenseInfo(licenseContext3D), sciChartSurface3D, false, true)
};
let shouldApplyLicense3D = true;
let licenseContext3D;
let sciChartSurface3D;
exports.applyLicense3D = (licenseContext, sciChartSurface, isSingle) => {
    if (isSingle || shouldApplyLicense3D) {
        licenseContext3D = licenseContext;
        sciChartSurface3D = sciChartSurface;
        // set up callbacks
        licenseManager2D_1.setCallbacks3D(callbacks3D);
        licenseManager2D_1.applyLicense(licenseContext);
    }
    licenseManager2D_1.updateLicenseDisplay(licenseManager2D_1.getLicenseInfo(licenseContext), sciChartSurface, false, false);
    if (!isSingle)
        shouldApplyLicense3D = false;
};
