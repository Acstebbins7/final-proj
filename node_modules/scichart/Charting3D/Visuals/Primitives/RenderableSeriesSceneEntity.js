"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderableSeriesSceneEntity = void 0;
const BaseSceneEntity3D_1 = require("./BaseSceneEntity3D");
/**
 * @summary Defines a special {@link BaseSceneEntity3D} type which hosts the entity for a {@link BaseRenderableSeries3D | RenderableSeries},
 * or chart type in SciChart's High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
 */
class RenderableSeriesSceneEntity extends BaseSceneEntity3D_1.BaseSceneEntity3D {
    /**
     * Creates an instance of {@link RenderableSeriesSceneEntity}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param parentSeries The parent {@link BaseRenderableSeries3D} which this entity maps to
     * @param state Current {@link RenderableSeriesSceneEntityState}
     */
    constructor(webAssemblyContext, parentSeries, state) {
        super(webAssemblyContext);
        this.parentSeries = parentSeries;
        this.state = state;
        this.state.setInitialState();
    }
    /**
     * Update method called from WebAssembly engine. Use this to update meshes, properties, geometry before draw.
     * When overriding, you must call super.Update() for the object to draw in the scene
     * @param deltaTime
     * @constructor
     */
    Update(deltaTime) {
        if (!this.currentRenderPassData) {
            return;
        }
        if (!this.state.validate(this.parentSeries, this.currentRenderPassData)) {
            this.updateSeries();
            this.state.reset(this.parentSeries, this.currentRenderPassData);
        }
        super.Update(deltaTime);
    }
    /**
     * @inheritDoc
     */
    onEngineRestart() {
        super.onEngineRestart();
        // Reset Initial State
        this.state.setInitialState();
    }
    /**
     * Called when a property changes on the parent series
     * @param propertyName
     */
    notifySeriesPropertyChanged(propertyName) {
        // Set Renderable Series Property Changed
        this.state.setRenderableSeriesPropertyChanged();
    }
}
exports.RenderableSeriesSceneEntity = RenderableSeriesSceneEntity;
