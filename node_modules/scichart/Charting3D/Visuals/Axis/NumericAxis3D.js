"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumericAxis3D = void 0;
const FlippedNumericCoordinateCalculator_1 = require("../../../Charting/Numerics/CoordinateCalculators/FlippedNumericCoordinateCalculator");
// tslint:disable-next-line:max-line-length
const NumericCoordinateCalculator_1 = require("../../../Charting/Numerics/CoordinateCalculators/NumericCoordinateCalculator");
const NumericTickProvider_1 = require("../../../Charting/Numerics/TickProviders/NumericTickProvider");
const NumericDeltaCalculator_1 = require("../../../Charting/Visuals/Axis/DeltaCalculator/NumericDeltaCalculator");
const NumericLabelProvider_1 = require("../../../Charting/Visuals/Axis/LabelProvider/NumericLabelProvider");
const AxisType_1 = require("../../../types/AxisType");
const NumericFormat_1 = require("../../../types/NumericFormat");
const AxisBase3D_1 = require("./AxisBase3D");
/**
 * @summary A 3D Chart Numeric / Value Axis type
 * @description A Numeric axis uses the X-value to measure data-points on the XAxis. The axis can represent
 * both numbers and dates using text-formatting
 * @remarks
 * Set a {@link NumericAxis3D} on the {@link SciChart3DSurface.xAxis}, {@link SciChart3DSurface.yAxis} or {@link SciChart3DSurface.zAxis} property.
 */
class NumericAxis3D extends AxisBase3D_1.AxisBase3D {
    /**
     * Creates an instance of a {@link NumericAxis3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options optional parameters of type {@link INumericAxis3dOptions} to configure the axis
     */
    constructor(webAssemblyContext, options) {
        var _a;
        super(webAssemblyContext, options);
        /**
         * @inheritDoc
         */
        this.type = AxisType_1.EAxisType.NumericAxis3D;
        this.tickProvider = new NumericTickProvider_1.NumericTickProvider(this.webAssemblyContext3D);
        this.labelProvider = new NumericLabelProvider_1.NumericLabelProvider(NumericFormat_1.ENumericFormat.Decimal_1);
        this.deltaCalculator = new NumericDeltaCalculator_1.NumericDeltaCalculator(this.webAssemblyContext3D);
        this.labelProvider.numericFormat = (_a = options === null || options === void 0 ? void 0 : options.labelFormat) !== null && _a !== void 0 ? _a : this.labelProvider.numericFormat;
    }
    /**
     * @inheritDoc
     */
    getDefaultNonZeroRange() {
        return undefined;
    }
    /**
     * @inheritDoc
     */
    getCurrentCoordinateCalculatorInternal() {
        const min = this.visibleRange.min;
        const max = this.visibleRange.max;
        const size = this.getAxisSize();
        const shouldFlip = !this.flippedCoordinatesProperty;
        return shouldFlip
            ? new FlippedNumericCoordinateCalculator_1.FlippedNumericCoordinateCalculator(this.webAssemblyContext3D, size, min, max)
            : new NumericCoordinateCalculator_1.NumericCoordinateCalculator(this.webAssemblyContext3D, size, min, max);
    }
}
exports.NumericAxis3D = NumericAxis3D;
