import { IChartModifierBase } from "../../Charting/ChartModifiers/ChartModifierBase";
import { IThemeProvider } from "../../Charting/Themes/IThemeProvider";
import { ESurfaceType, SciChartSurfaceBase, TSciChartConfig } from "../../Charting/Visuals/SciChartSurfaceBase";
import { ObservableArray } from "../../Core/ObservableArray";
import { TSciChart3D } from "../../types/TSciChart3D";
import { TSciChartSurfaceCanvases } from "../../types/TSciChartSurfaceCanvases";
import { ICameraController } from "../CameraController";
import { Vector3 } from "../Vector3";
import { AxisBase3D } from "./Axis/AxisBase3D";
import { AxisCubeEntity } from "./Axis/AxisCubeEntity";
import { IRenderableSeries3D } from "./RenderableSeries/BaseRenderableSeries3D";
import { RootSceneEntity } from "./RootSceneEntity";
import { ViewportManager3DBase } from "./ViewportManager3DBase";
export declare type TWebAssemblyChart3D = {
    wasmContext: TSciChart3D;
    sciChart3DSurface: SciChart3DSurface;
};
/**
 * Optional parameters passed to the constructor of {@link SciChart3DSurface} to configure it
 */
export interface ISciChart3DSurfaceOptions {
    canvases?: TSciChartSurfaceCanvases;
    /**
     * The {@link ICameraController} is a 3D Camera which allows choosing perspective, orthogonal projections,
     * camera position, target, orientation such as Pitch, Yaw and Roll etc...
     * @remarks See {@link CameraController} for a concrete implementation of {@link ICameraController}
     */
    camera?: ICameraController;
    /**
     * The WorldDimensions defines the size of the world in 3D space. Series and objects can exist outside of this world
     * however the Axis cube will conform to this size.
     * @remarks See our {@link https://www.scichart.com/javascript-chart-documentation | Documentation} online to see
     * how the World Dimensions property configures the size of the chart.
     */
    worldDimensions?: Vector3;
}
/**
 * @summary The {@link SciChart3DSurface} is the root 3D Chart control in SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Chart Library}
 * @description
 * To create a 3D chart using SciChart, declare a {@link SciChart3DSurface} using {@link SciChart3DSurface.create},
 * add X,Y,Z axis via the {@link SciChart3DSurface.xAxis} {@link SciChart3DSurface.yAxis} and {@link SciChart3DSurface.zAxis} properties.
 *
 * Next, add a series or chart type by adding a {@link BaseRenderableSeries3D} to the {@link SciChart3DSurface.renderableSeries} collection.
 *
 * Position the camera in the 3D scene by adjusting the {@link SciChart3DSurface.camera} property.
 *
 * To redraw a {@link SciChart3DSurface} at any time, call {@link SciChart3DSurface.invalidateElement}, however all properties are reactive and the
 * chart will automatically redraw if data or properties change.
 * @remarks
 * {@link SciChart3DSurface | SciChartSurfaces} scale to fit the parent DIV where they are hosted. Use CSS to position the DIV.
 */
export declare class SciChart3DSurface extends SciChartSurfaceBase {
    /**
     * USED INTERNALLY - performs a similar operation to {@link SciChart3DSurface.create} but used internally for testing
     * @param divElementId
     * @param widthAspect
     * @param heightAspect
     */
    static createSingle(divElementId: string, widthAspect?: number, heightAspect?: number): Promise<TWebAssemblyChart3D>;
    static configure(config: TSciChartConfig): void;
    /**
     * Creates a {@link SciChart3DSurface} and {@link TSciChart3D | WebAssembly Context} to occupy the div by element ID in your DOM.
     * @remarks This method is async and must be awaited
     * @param divElementId The Div Element ID where the {@link SciChart3DSurface} will reside
     * @param widthAspect Optional - the width aspect ratio of the {@link SciChart3DSurface}. By default SciChart will scale to fit the parent Div
     * However if height of the div is not provided it will use width/height aspect ratio to calculate the height. The default ratio is 3/2.
     * @param heightAspect Optional - the height aspect ratio of the {@link SciChart3DSurface}. By default SciChart will scale to fit the parent Div
     */
    static create(divElementId: string, widthAspect?: number, heightAspect?: number): Promise<TWebAssemblyChart3D>;
    /**
     * @summary Gets the collection of {@link IRenderableSeries3D} - the chart types or seres on this {@link SciChart3DSurface}
     * @description A {@link SciChart3DSurface} can have zero to many {@link IRenderableSeries3D | RenderableSeries}.
     *
     * The RenderableSeries are drawn as chart types, e.g. {@link ScatterRenderableSeries3D | 3D Scatter series},
     * {@link SurfaceMeshRenderableSeries3D | Surface Mesh series}. Each RenderableSeries
     * must have a {@link BaseDataSeries3D | DataSeries}.
     *
     * Use this collection to add and remove series to the chart.
     * @remarks
     * Adding a series to the chart causes it to automatically redraw. To zoom to fit the data after adding a series, either set
     * {@link AxisCore.autoRange} or call {@link SciChart3DSurface.zoomExtents}
     */
    readonly renderableSeries: ObservableArray<IRenderableSeries3D>;
    /**
     * @summary The {@link RootSceneEntity} is a special {@link BaseSceneEntity3D} type which is the root of the entire scene in
     * in SciChart's High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
     * @remarks
     * Add and remove entities to the scene using the property {@link SciChart3DSurface.rootEntity} and calling
     * {@link RootSceneEntity.children | SceneEntity.children.add}.
     *
     * When a {@link BaseRenderableSeries3D} is added to {@link SciChart3DSurface.renderableSeries}, it's entity is automatically added to the scene.
     */
    readonly rootEntity: RootSceneEntity;
    /**
     * The {@link AxisCubeEntity} is a 3D Scene Entity (inherits {@link BaseSceneEntity3D}) which renders the 3D X,Y,Z axis cube,
     * axis walls and labels in a {@link SciChart3DSurface}
     */
    readonly axisCubeEntity: AxisCubeEntity;
    private xAxisProperty;
    private yAxisProperty;
    private zAxisProperty;
    private cameraProperty;
    private worldDimensionsProperty;
    private viewportManagerProperty;
    private readonly webAssemblyContext3D;
    private readonly sciChart3DRenderer;
    private readonly gizmoEntity;
    private watermarkProperties;
    private watermarkPropertyPosition;
    private isAxisCubeRenderedProperty;
    /**
     * Creates an instance of {@link SciChart3DSurface}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link ISciChart3DSurfaceOptions} to configure the chart
     */
    constructor(webAssemblyContext: TSciChart3D, options?: ISciChart3DSurfaceOptions);
    /**
     * @inheritdoc
     */
    delete(): void;
    /**
     * Gets or sets whether the Xyz gizmo is enabled - a small 3D Xyz axis on the bottom left of the 3D Chart
     */
    get enableGizmo(): boolean;
    /**
     * Gets or sets whether the Xyz gizmo is enabled - a small 3D Xyz axis on the bottom left of the 3D Chart
     */
    set enableGizmo(isEnabled: boolean);
    /**
     * Gets or sets the {@link ViewportManager3DBase | Viewport Manager} - a class that allows managing of viewport axis ranges
     */
    get viewportManager(): ViewportManager3DBase;
    /**
     * Gets or sets the {@link ViewportManager3DBase | Viewport Manager} - a class that allows managing of viewport axis ranges
     */
    set viewportManager(viewportManager: ViewportManager3DBase);
    /**
     * The WorldDimensions defines the size of the world in 3D space. Series and objects can exist outside of this world
     * however the Axis cube will conform to this size.
     * @remarks See our {@link https://www.scichart.com/javascript-chart-documentation | Documentation} online to see
     * how the World Dimensions property configures the size of the chart.
     */
    get worldDimensions(): Vector3;
    /**
     * The WorldDimensions defines the size of the world in 3D space. Series and objects can exist outside of this world
     * however the Axis cube will conform to this size.
     * @remarks See our {@link https://www.scichart.com/javascript-chart-documentation | Documentation} online to see
     * how the World Dimensions property configures the size of the chart.
     */
    set worldDimensions(worldDimensions: Vector3);
    /**
     * The {@link ICameraController} is a 3D Camera which allows choosing perspective, orthogonal projections,
     * camera position, target, orientation such as Pitch, Yaw and Roll etc...
     * @remarks See {@link CameraController} for a concrete implementation of {@link ICameraController}
     */
    get camera(): ICameraController;
    /**
     * The {@link ICameraController} is a 3D Camera which allows choosing perspective, orthogonal projections,
     * camera position, target, orientation such as Pitch, Yaw and Roll etc...
     * @remarks See {@link CameraController} for a concrete implementation of {@link ICameraController}
     */
    set camera(value: ICameraController);
    /**
     * Gets or sets the XAxis in the 3D Chart.
     * @remarks Axis types which derive from {@link AxisBase3D} or concrete type {@link NumericAxis3D} are valid
     */
    get xAxis(): AxisBase3D;
    /**
     * Gets or sets the XAxis in the 3D Chart.
     * @remarks Axis types which derive from {@link AxisBase3D} or concrete type {@link NumericAxis3D} are valid
     */
    set xAxis(xAxis: AxisBase3D);
    /**
     * Gets or sets the YAxis in the 3D Chart.
     * @remarks Axis types which derive from {@link AxisBase3D} or concrete type {@link NumericAxis3D} are valid
     */
    get yAxis(): AxisBase3D;
    /**
     * Gets or sets the YAxis in the 3D Chart.
     * @remarks Axis types which derive from {@link AxisBase3D} or concrete type {@link NumericAxis3D} are valid
     */
    set yAxis(yAxis: AxisBase3D);
    /**
     * Gets or sets the ZAxis in the 3D Chart.
     * @remarks Axis types which derive from {@link AxisBase3D} or concrete type {@link NumericAxis3D} are valid
     */
    get zAxis(): AxisBase3D;
    /**
     * Gets or sets the ZAxis in the 3D Chart.
     * @remarks Axis types which derive from {@link AxisBase3D} or concrete type {@link NumericAxis3D} are valid
     */
    set zAxis(zAxis: AxisBase3D);
    /**
     * Called internally
     * Sets isAxisCubeRenderedProperty flag after Axis Cube is rendered
     */
    setIsAxisCubeRendered(): void;
    /**
     * Called internally
     * Gets isAxisCubeRenderedProperty flag
     */
    get isAxisCubeRendered(): boolean;
    /**
     * @inheritDoc
     */
    invalidateElement(): void;
    /**
     * @inheritDoc
     */
    get surfaceType(): ESurfaceType;
    /**
     * Called after the {@link SciChart3DSurface} has rendered.
     */
    onSciChartRendered(): void;
    /**
     * Called internally - the main drawing loop
     */
    doDrawingLoop(): void;
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider: IThemeProvider): void;
    /**
     * @inheritDoc
     */
    changeViewportSize(width: number, height: number): void;
    /**
     * @inheritDoc
     */
    updateWatermark(left: number, bottom: number): void;
    /**
     * @inheritDoc
     */
    protected attachChartModifier(chartModifier: IChartModifierBase): void;
    /**
     * @inheritDoc
     */
    protected applySciChartBackground(htmlColor: string, alphaEnabled?: boolean): void;
    /**
     * @inheritDoc
     */
    protected setClearAlphaParams(enabled: boolean, alpha: number): void;
    private detachSeries;
    private attachSeries;
    private detachAxis;
    private attachAxis;
    private childPropertyChanged;
}
