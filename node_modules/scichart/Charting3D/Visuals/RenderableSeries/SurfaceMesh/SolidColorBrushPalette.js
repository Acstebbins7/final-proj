"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolidColorBrushPalette = void 0;
const CanvasTexture_1 = require("../../../../Charting/Visuals/TextureManager/CanvasTexture");
const app_1 = require("../../../../constants/app");
const Guard_1 = require("../../../../Core/Guard");
const parseColor_1 = require("../../../../utils/parseColor");
const Constants_1 = require("../Constants");
const MeshColorPalette_1 = require("./MeshColorPalette");
/**
 * Provides a solid color (single color) palette which may be applied to the {@link SurfaceMeshRenderableSeries3D.meshColorPalette}
 * property
 */
class SolidColorBrushPalette extends MeshColorPalette_1.MeshColorPalette {
    /**
     * Creates an instance of the {@link SolidColorBrushPalette}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context}
     * containing native methods and access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options optional parameters of type {@link ISolidColorBrushPaletteOptions} passed to the constructor
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext);
        this.fillProperty = (options === null || options === void 0 ? void 0 : options.fill) || "#777777";
    }
    /**
     * Gets or sets the solid color fill as an HTML Color code
     */
    get fill() {
        return this.fillProperty;
    }
    /**
     * Gets or sets the solid color fill as an HTML Color code
     */
    set fill(fill) {
        this.fillProperty = fill;
        this.notifyPropertyChanged(Constants_1.PROPERTY.FILL);
    }
    /**
     * @inheritDoc
     */
    getTexture(size) {
        Guard_1.Guard.notNull(size, "size");
        Guard_1.Guard.isTrue(size.width > 0, "size.width must be greater than 0");
        Guard_1.Guard.isTrue(size.height > 0, "size.height must be greater than 0");
        if (app_1.IS_TEST_ENV) {
            return undefined;
        }
        const color = parseColor_1.parseColorToUIntArgb(this.fill);
        if (isNaN(color)) {
            throw Error(`SolidColorBrushPalette.fill ${this.fill} cannot be converted to an ABGR color`);
        }
        const canvasTexture = new CanvasTexture_1.CanvasTexture(this.webAssemblyContext, size.width, size.height);
        canvasTexture.clear();
        const ctx = canvasTexture.getContext();
        ctx.fillStyle = this.fill;
        ctx.fillRect(0, 0, size.width, size.height);
        canvasTexture.copyTexture();
        return canvasTexture;
    }
}
exports.SolidColorBrushPalette = SolidColorBrushPalette;
