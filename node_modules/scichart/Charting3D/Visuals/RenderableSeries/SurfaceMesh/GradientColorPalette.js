"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GradientColorPalette = void 0;
const CanvasTexture_1 = require("../../../../Charting/Visuals/TextureManager/CanvasTexture");
const app_1 = require("../../../../constants/app");
const Guard_1 = require("../../../../Core/Guard");
const Constants_1 = require("../Constants");
const MeshColorPalette_1 = require("./MeshColorPalette");
/**
 * Provides a gradient color palette which may be applied to the {@link SurfaceMeshRenderableSeries3D.meshColorPalette}
 * property
 */
class GradientColorPalette extends MeshColorPalette_1.MeshColorPalette {
    /**
     * Creates an instance of the {@link GradientColorPalette}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context}
     * containing native methods and access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options optional parameters of type {@link IGradientColorPaletteOptions} passed to the constructor
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext);
        this.gradientStops = (options === null || options === void 0 ? void 0 : options.gradientStops) || [
            { offset: 0, color: "Red" },
            { offset: 1, color: "Green" }
        ];
    }
    /**
     * The array of {@link TGradientStop | Gradient Stops} to apply with offsets from 0.0 - 1.0
     */
    get gradientStops() {
        return this.gradientStopsProperty;
    }
    /**
     * The array of {@link TGradientStop | Gradient Stops} to apply with offsets from 0.0 - 1.0
     */
    set gradientStops(gradientStops) {
        this.gradientStopsProperty = gradientStops;
        this.notifyPropertyChanged(Constants_1.PROPERTY.GRADIENT_STOPS);
    }
    /**
     * @inheritDoc
     */
    getTexture(size) {
        if (app_1.IS_TEST_ENV) {
            return undefined;
        }
        Guard_1.Guard.notNull(size, "size");
        Guard_1.Guard.isTrue(size.width > 0, "size.width must be greater than 0");
        Guard_1.Guard.isTrue(size.height > 0, "size.height must be greater than 0");
        Guard_1.Guard.notNull(this.gradientStopsProperty, "GradientColorPalette.gradientStops");
        const canvasTexture = new CanvasTexture_1.CanvasTexture(this.webAssemblyContext, size.width, size.height);
        canvasTexture.clear();
        const ctx = canvasTexture.getContext();
        // BEGIN: Drawing gradient rectangle on canvas2D
        const x1 = 0;
        const y1 = 0;
        const x2 = size.width;
        const y2 = 0;
        const gradient = ctx.createLinearGradient(x1, y1, x2, y2);
        this.gradientStops.forEach(el => {
            gradient.addColorStop(el.offset, el.color);
        });
        ctx.fillStyle = gradient;
        ctx.fillRect(0, 0, size.width, size.height);
        // END: Drawing gradient rectangle on canvas2D
        canvasTexture.copyTexture();
        return canvasTexture;
    }
}
exports.GradientColorPalette = GradientColorPalette;
