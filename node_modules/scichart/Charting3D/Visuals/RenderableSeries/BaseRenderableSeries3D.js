"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseRenderableSeries3D = void 0;
const Deleter_1 = require("../../../Core/Deleter");
const Constants_1 = require("./Constants");
/**
 * @summary Defines the base class to a 3D Render Series (or 3D Chart Type) in SciChart's High Performance Real-time
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
 * @remarks
 * A {@link BaseRenderableSeries3D} defines how data should be rendered. e.g. as a 3D Scatter Chart, 3D Point Line Chart etc...
 * This is independent from the {@link BaseDataSeries3D | DataSeries3D} which stores the data to render
 *
 * See derived types of {@link BaseDataSeries3D} to find out what data-series are available.
 * See derived types of {@link IRenderableSeries3D} to find out what 3D JavaScript Chart types are available.
 */
class BaseRenderableSeries3D {
    /**
     * Creates an instance of the {@link BaseRenderableSeries3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing
     * native methods and access to our WebGL2 WebAssembly Drawing Engine
     * @param options Optional parameters of type {@link IBaseRenderableSeries3DOptions} to configure the series
     * @protected
     */
    constructor(webAssemblyContext, options) {
        this.webAssemblyContext = webAssemblyContext;
        this.dataSeriesProperty = (options === null || options === void 0 ? void 0 : options.dataSeries) || undefined;
        this.isVisibleProperty = (options === null || options === void 0 ? void 0 : options.isVisible) !== undefined ? options === null || options === void 0 ? void 0 : options.isVisible : true;
        this.pointMarkerProperty = (options === null || options === void 0 ? void 0 : options.pointMarker) || undefined;
        this.strokeProperty = (options === null || options === void 0 ? void 0 : options.stroke) || "#FFFFFF";
        this.shininessProperty = (options === null || options === void 0 ? void 0 : options.shininess) || 64;
        this.pointMarkerPropertyChanged = this.pointMarkerPropertyChanged.bind(this);
    }
    /**
     * @inheritDoc
     */
    applyTheme(themeProvider) {
        // TODO
    }
    /**
     * @inheritDoc
     */
    get opacity() {
        return this.opacityProperty;
    }
    /**
     * @inheritDoc
     */
    set opacity(opacity) {
        this.opacityProperty = opacity;
        this.notifyPropertyChanged(Constants_1.PROPERTY.OPACITY);
    }
    /**
     * @inheritDoc
     */
    get sceneEntity() {
        return this.sceneEntityProperty;
    }
    /**
     * @inheritDoc
     */
    get shininess() {
        return this.shininessProperty;
    }
    /**
     * @inheritDoc
     */
    set shininess(shininess) {
        this.shininessProperty = shininess;
        this.notifyPropertyChanged(Constants_1.PROPERTY.SHININESS);
    }
    /**
     * @inheritDoc
     */
    get paletteProvider() {
        return this.paletteProviderProperty;
    }
    /**
     * @inheritDoc
     */
    set paletteProvider(paletteProvider) {
        this.paletteProviderProperty = paletteProvider;
        this.notifyPropertyChanged(Constants_1.PROPERTY.PALETTE_PROVIDER);
    }
    /**
     * @inheritDoc
     */
    get stroke() {
        return this.strokeProperty;
    }
    /**
     * @inheritDoc
     */
    set stroke(stroke) {
        this.strokeProperty = stroke;
        this.notifyPropertyChanged(Constants_1.PROPERTY.STROKE);
    }
    /**
     * @inheritDoc
     */
    get dataSeries() {
        return this.dataSeriesProperty;
    }
    /**
     * @inheritDoc
     */
    set dataSeries(dataSeries) {
        this.dataSeriesProperty = dataSeries;
        this.notifyPropertyChanged(Constants_1.PROPERTY.DATA_SERIES);
    }
    /**
     * @inheritDoc
     */
    get pointMarker() {
        return this.pointMarkerProperty;
    }
    /**
     * @inheritDoc
     */
    set pointMarker(pointMarker) {
        this.detachPointMarker(this.pointMarkerProperty);
        this.pointMarkerProperty = pointMarker;
        this.attachPointMarker(this.pointMarkerProperty);
        this.notifyPropertyChanged(Constants_1.PROPERTY.POINT_MARKER3D);
    }
    /**
     * @inheritDoc
     */
    get parentSurface() {
        return this.parentSurfaceProperty;
    }
    /**
     * @inheritDoc
     */
    set parentSurface(parentSurface) {
        this.parentSurfaceProperty = parentSurface;
        this.notifyPropertyChanged(Constants_1.PROPERTY.PARENT_SURFACE);
    }
    /**
     * @inheritDoc
     */
    get isVisible() {
        return this.isVisibleProperty;
    }
    /**
     * @inheritDoc
     */
    set isVisible(isVisible) {
        this.isVisibleProperty = isVisible;
        if (this.sceneEntityProperty) {
            this.sceneEntityProperty.isVisible = this.isVisibleProperty;
        }
        this.notifyPropertyChanged(Constants_1.PROPERTY.IS_VISIBLE);
    }
    /**
     * @inheritDoc
     */
    onAttach(scs) {
        this.parentSurface = scs;
        if (this.invalidateParentCallback) {
            throw new Error("Invalid operation in sciChart3DSurface.attachSeries, this series has already been attached to a SciChart3DSurface. Please detach it from a SciChart3DSurface before attaching to another");
        }
        this.invalidateParentCallback = scs.invalidateElement;
    }
    /**
     * @inheritDoc
     */
    onDetach() {
        this.invalidateParentCallback = undefined;
        this.parentSurface = undefined;
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.sceneEntityProperty = Deleter_1.deleteSafe(this.sceneEntityProperty);
    }
    /**
     * Used internally - sets the {@link IRenderableSeriesSceneEntity | 3D Scene Entity}
     * @param sceneEntity
     * @protected
     */
    setSceneEntity(sceneEntity) {
        this.sceneEntityProperty = sceneEntity;
        if (this.sceneEntityProperty) {
            this.sceneEntityProperty.isVisible = this.isVisible;
        }
        this.notifyPropertyChanged(Constants_1.PROPERTY.SCENE_ENTITY);
    }
    /**
     * Notifies listeners to {@link invalidateParentCallback} that a property has changed
     * @param propertyName
     * @protected
     */
    notifyPropertyChanged(propertyName) {
        var _a;
        (_a = this.sceneEntityProperty) === null || _a === void 0 ? void 0 : _a.notifySeriesPropertyChanged(propertyName);
        if (this.invalidateParentCallback) {
            this.invalidateParentCallback();
        }
    }
    attachPointMarker(pointMarker) {
        if (pointMarker) {
            pointMarker.propertyChanged.subscribe(this.pointMarkerPropertyChanged);
        }
    }
    detachPointMarker(pointMarker) {
        if (pointMarker) {
            pointMarker.propertyChanged.unsubscribe(this.pointMarkerPropertyChanged);
        }
    }
    pointMarkerPropertyChanged(args) {
        this.notifyPropertyChanged("pointMarker." + args.propertyName);
    }
}
exports.BaseRenderableSeries3D = BaseRenderableSeries3D;
