"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RootSceneEntity = void 0;
const SceneEntityType_1 = require("../../types/SceneEntityType");
const BaseSceneEntity3D_1 = require("./Primitives/BaseSceneEntity3D");
/**
 * @summary Defines a special {@link BaseSceneEntity3D} type which is the root of the entire scene in
 * in SciChart's High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
 * @remarks
 * Add and remove entities to the scene using the property {@link SciChart3DSurface.rootEntity} and calling
 * {@link RootSceneEntity.children | SceneEntity.children.add}.
 *
 * When a {@link BaseRenderableSeries3D} is added to {@link SciChart3DSurface.renderableSeries}, it's entity is automatically added to the scene.
 */
class RootSceneEntity extends BaseSceneEntity3D_1.BaseSceneEntity3D {
    /**
     * Creates an instance of the {@link RootSceneEntity}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     */
    constructor(webAssemblyContext) {
        super(webAssemblyContext);
        /**
         * @inheritDoc
         */
        this.type = SceneEntityType_1.ESceneEntityType.RootSceneEntity;
    }
    /**
     * @inheritDoc
     */
    delete() {
        super.delete();
    }
    /**
     * @inheritDoc
     */
    attachChild(childEntity) {
        // TODO: entity.EntityIdProvider = this.EntityIdProvider;
        // console.log("Adding child entity to the root!");
        const parentEntity = this;
        if (childEntity === null || childEntity === void 0 ? void 0 : childEntity.nativeEntity) {
            this.world.AddEntity(childEntity.nativeEntity);
        }
        childEntity.parent = parentEntity;
        childEntity.onAttached();
    }
    /**
     * @inheritDoc
     */
    detachChild(childEntity) {
        if (childEntity === null || childEntity === void 0 ? void 0 : childEntity.nativeEntity) {
            this.world.RemoveEntity(childEntity.nativeEntity);
        }
        childEntity.onDetached();
        childEntity.parent = undefined;
    }
}
exports.RootSceneEntity = RootSceneEntity;
