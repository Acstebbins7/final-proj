"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrianglePointMarker3D = exports.EllipsePointMarker3D = exports.QuadPointMarker = exports.PixelPointMarker3D = exports.CylinderPointMarker3D = exports.PyramidPointMarker3D = exports.CubePointMarker3D = exports.SpherePointMarker3D = void 0;
const BaseMeshPointMarker3D_1 = require("./BaseMeshPointMarker3D");
const BasePointMarker3D_1 = require("./BasePointMarker3D");
const BaseTexturePointMarker3D_1 = require("./BaseTexturePointMarker3D");
// tslint:disable:max-classes-per-file
/**
 * The {@link SpherePointMarker3D} adds a 3D Sphere to each XYZ point in a 3D Scatter or Bubble series
 * @remarks See related class {@link ScatterRenderableSeries3D} which renders a {@link BasePointMarker3D} at
 * each Xyz point in an {@link XyzDataSeries3D} Data Series.
 */
class SpherePointMarker3D extends BaseMeshPointMarker3D_1.BaseMeshPointMarker3D {
    /**
     * Creates an instance of {@link SpherePointMarker3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    get pointsMesh() {
        return this.webAssemblyContext.SCRTGetTemplateMesh(this.webAssemblyContext.eSCRTMesh.SCRT_MESH_SPHERE);
    }
}
exports.SpherePointMarker3D = SpherePointMarker3D;
/**
 * The {@link CubePointMarker3D} adds a 3D Cube or Box to each XYZ point in a 3D Scatter or Bubble series
 * @remarks See related class {@link ScatterRenderableSeries3D} which renders a {@link BasePointMarker3D} at
 * each Xyz point in an {@link XyzDataSeries3D} Data Series.
 */
class CubePointMarker3D extends BaseMeshPointMarker3D_1.BaseMeshPointMarker3D {
    /**
     * Creates an instance of {@link CubePointMarker3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    get pointsMesh() {
        return this.webAssemblyContext.SCRTGetTemplateMesh(this.webAssemblyContext.eSCRTMesh.SCRT_MESH_CUBE);
    }
}
exports.CubePointMarker3D = CubePointMarker3D;
/**
 * The {@link PyramidPointMarker3D} adds a 3D Pyramid to each XYZ point in a 3D Scatter or Bubble series
 * @remarks See related class {@link ScatterRenderableSeries3D} which renders a {@link BasePointMarker3D} at
 * each Xyz point in an {@link XyzDataSeries3D} Data Series.
 */
class PyramidPointMarker3D extends BaseMeshPointMarker3D_1.BaseMeshPointMarker3D {
    /**
     * Creates an instance of {@link PyramidPointMarker3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    get pointsMesh() {
        return this.webAssemblyContext.SCRTGetTemplateMesh(this.webAssemblyContext.eSCRTMesh.SCRT_MESH_PYRAMID);
    }
}
exports.PyramidPointMarker3D = PyramidPointMarker3D;
/**
 * The {@link CylinderPointMarker3D} adds a 3D Cylinder to each XYZ point in a 3D Scatter or Bubble series
 * @remarks See related class {@link ScatterRenderableSeries3D} which renders a {@link BasePointMarker3D} at
 * each Xyz point in an {@link XyzDataSeries3D} Data Series.
 */
class CylinderPointMarker3D extends BaseMeshPointMarker3D_1.BaseMeshPointMarker3D {
    /**
     * Creates an instance of {@link CylinderPointMarker3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    get pointsMesh() {
        return this.webAssemblyContext.SCRTGetTemplateMesh(this.webAssemblyContext.eSCRTMesh.SCRT_MESH_CYLINDER);
    }
}
exports.CylinderPointMarker3D = CylinderPointMarker3D;
/**
 * @summary The {@link PixelPointMarker3D} adds a single pixel to each XYZ point in a 3D Scatter or Bubble series.
 * This is useful for high-performance point-clouds e.g. LiDAR visualisation which requires millions of data-points in 3D.
 * @remarks See related class {@link ScatterRenderableSeries3D} which renders a {@link BasePointMarker3D} at
 * each Xyz point in an {@link XyzDataSeries3D} Data Series.
 */
class PixelPointMarker3D extends BasePointMarker3D_1.BasePointMarker3D {
    /**
     * Creates an instance of {@link PixelPointMarker3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        this.size = 0;
    }
    /**
     * @inheritDoc
     */
    get markerType() {
        return BasePointMarker3D_1.EMarkerType.Pixel;
    }
}
exports.PixelPointMarker3D = PixelPointMarker3D;
/**
 * @summary The {@link QuadPointMarker} renders a flat billboarded textured-quad to each XYZ point in a 3D Scatter or Bubble series.
 * @remarks See related class {@link ScatterRenderableSeries3D} which renders a {@link BasePointMarker3D} at
 * each Xyz point in an {@link XyzDataSeries3D} Data Series.
 */
class QuadPointMarker extends BaseTexturePointMarker3D_1.BaseTexturePointMarker3D {
    /**
     * Creates an instance of {@link QuadPointMarker}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    get pointsTexture() {
        return this.webAssemblyContext.SCRTGetTemplateTexture(this.webAssemblyContext.eSCRTTexture.SCRT_TEXTURE_SOLIDWHITE);
    }
}
exports.QuadPointMarker = QuadPointMarker;
/**
 * @summary The {@link EllipsePointMarker3D} renders a flat billboarded textured ellipse to each XYZ point in a 3D Scatter or Bubble series.
 * @remarks See related class {@link ScatterRenderableSeries3D} which renders a {@link BasePointMarker3D} at
 * each Xyz point in an {@link XyzDataSeries3D} Data Series.
 */
class EllipsePointMarker3D extends BaseTexturePointMarker3D_1.BaseTexturePointMarker3D {
    /**
     * Creates an instance of {@link EllipsePointMarker3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    get pointsTexture() {
        return this.webAssemblyContext.SCRTGetTemplateTexture(this.webAssemblyContext.eSCRTTexture.SCRT_TEXTURE_CIRCLE);
    }
}
exports.EllipsePointMarker3D = EllipsePointMarker3D;
/**
 * @summary The {@link TrianglePointMarker3D} renders a flat billboarded textured triangle to each XYZ point in a 3D Scatter or Bubble series.
 * @remarks See related class {@link ScatterRenderableSeries3D} which renders a {@link BasePointMarker3D} at
 * each Xyz point in an {@link XyzDataSeries3D} Data Series.
 */
class TrianglePointMarker3D extends BaseTexturePointMarker3D_1.BaseTexturePointMarker3D {
    /**
     * Creates an instance of {@link TrianglePointMarker3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
    }
    /**
     * @inheritDoc
     */
    get pointsTexture() {
        return this.webAssemblyContext.SCRTGetTemplateTexture(this.webAssemblyContext.eSCRTTexture.SCRT_TEXTURE_TRIANGLE);
    }
}
exports.TrianglePointMarker3D = TrianglePointMarker3D;
// TODO (Andrew): CustomPointMarker to return a TSRTexture with image or geometry defined by the user
