"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BasePointMarker3D = exports.EMarkerType = void 0;
const EventHandler_1 = require("../../../Core/EventHandler");
const Guard_1 = require("../../../Core/Guard");
const PropertyChangedEventArgs_1 = require("../../../Core/PropertyChangedEventArgs");
const Constants_1 = require("./Constants");
/**
 * Defines the BasePointMarker3D geometry type: a pixel, a textured-quad or a 3D object (Instanced Mesh)
 */
var EMarkerType;
(function (EMarkerType) {
    /**
     * Each marker rendered as a single pixel
     */
    EMarkerType[EMarkerType["Pixel"] = 0] = "Pixel";
    /**
     * each marker rendered as a textured quad
     */
    EMarkerType[EMarkerType["TexturedQuad"] = 1] = "TexturedQuad";
    /**
     * each marker rendered as an instanced mesh
     */
    EMarkerType[EMarkerType["InstancedMesh"] = 2] = "InstancedMesh";
})(EMarkerType = exports.EMarkerType || (exports.EMarkerType = {}));
/**
 * @summary The Base class for a 3D PointMarker in SciChart - High Performance
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}.
 * @description PointMarkers may be displayed on {@link IRenderableSeries3D |3D Renderable Series} to add scatter-points to 3D charts.
 * For example: setting the {@link ScatterRenderableSeries3D.pointMarker} property property
 * will render a point at each xyz data-value
 * @remarks
 * See derived types of {@link BasePointMarker3D} for specific point-marker types.
 */
class BasePointMarker3D {
    /**
     * Creates an instance of the {@link BasePointMarker3D}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context} containing native methods and
     * access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options Optional parameters of type {@link IBasePointMarker3DOptions} used to configure the point-marker
     * @protected
     */
    constructor(webAssemblyContext, options) {
        Guard_1.Guard.notNull(webAssemblyContext, "webAssemblyContext");
        this.webAssemblyContext = webAssemblyContext;
        this.propertyChanged = new EventHandler_1.EventHandler();
        this.fillProperty = (options === null || options === void 0 ? void 0 : options.fill) || "#FF3333";
        this.sizeProperty = (options === null || options === void 0 ? void 0 : options.size) || 3;
    }
    /**
     * Gets or sets the point-marker fill as an HTML Color Code
     */
    get fill() {
        return this.fillProperty;
    }
    /**
     * Gets or sets the point-marker fill as an HTML Color Code
     */
    set fill(fill) {
        this.fillProperty = fill;
        this.notifyPropertyChanged(Constants_1.PROPERTY.FILL);
    }
    /**
     * Gets or sets the size of the point-marker in world coordinates
     */
    get size() {
        return this.sizeProperty;
    }
    /**
     * Gets or sets the size of the point-marker in world coordinates
     */
    set size(size) {
        this.sizeProperty = size;
        this.notifyPropertyChanged(Constants_1.PROPERTY.SIZE);
    }
    /**
     * Notifies listeners to {@link propertyChanged} that a property has changed and redraw is required
     * @param propertyName the property name
     */
    notifyPropertyChanged(propertyName) {
        var _a;
        (_a = this.propertyChanged) === null || _a === void 0 ? void 0 : _a.raiseEvent(new PropertyChangedEventArgs_1.PropertyChangedEventArgs(propertyName));
    }
}
exports.BasePointMarker3D = BasePointMarker3D;
