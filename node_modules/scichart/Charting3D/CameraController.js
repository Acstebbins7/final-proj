"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraController = exports.ECameraProjectionMode = void 0;
const EventHandler_1 = require("../Core/EventHandler");
const Guard_1 = require("../Core/Guard");
const PropertyChangedEventArgs_1 = require("../Core/PropertyChangedEventArgs");
const Vector3_1 = require("./Vector3");
const Constants_1 = require("./Visuals/Constants");
/**
 * Defines the Project Mode the {@link CameraController} set on SciChart's
 * {@link https://www.scichart.com/javascript-chart-features | Javascript 3D Chart}
 */
var ECameraProjectionMode;
(function (ECameraProjectionMode) {
    /**
     * The {@link CameraController.projectionMode} is Perspective
     */
    ECameraProjectionMode["Perspective"] = "Perspective";
    /**
     * The {@link CameraController.projectionMode} is Orthogonal
     */
    ECameraProjectionMode["Orthogonal"] = "Orthogonal";
})(ECameraProjectionMode = exports.ECameraProjectionMode || (exports.ECameraProjectionMode = {}));
class CameraController {
    /**
     * Creates an instance of the {@link CameraController}
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context}
     * containing native methods and access to our WebGL2 Engine and WebAssembly numerical methods
     * @param options optional parameters of type {@link ICameraOptions} passed to the constructor
     */
    constructor(webAssemblyContext, options) {
        this.aspectRatioProperty = 1.5;
        this.farClipProperty = 4000;
        this.fieldOfViewProperty = 60;
        this.nearClipProperty = 1;
        this.orbitalPitchProperty = 0;
        this.orbitalYawProperty = 0;
        this.orthoHeightProperty = 400;
        this.orthoWidthProperty = 600;
        this.positionProperty = Vector3_1.Vector3.zero;
        this.projectionModeProperty = ECameraProjectionMode.Perspective;
        this.targetProperty = Vector3_1.Vector3.zero;
        this.webAssemblyContext = webAssemblyContext;
        this.propertyChanged = new EventHandler_1.EventHandler();
        this.resetToDefaults();
        this.position = (options === null || options === void 0 ? void 0 : options.position) || this.position;
        this.target = (options === null || options === void 0 ? void 0 : options.target) || this.target;
        this.id = (options === null || options === void 0 ? void 0 : options.id) || this.id;
    }
    /**
     * @inheritDoc
     */
    get id() {
        return this.idProperty;
    }
    /**
     * @inheritDoc
     */
    set id(value) {
        this.idProperty = value;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_ID);
    }
    /**
     * @inheritDoc
     */
    get orthoHeight() {
        return this.orthoHeightProperty;
    }
    /**
     * @inheritDoc
     */
    set orthoHeight(value) {
        if (this.orthoHeightProperty === value) {
            return;
        }
        this.orthoHeightProperty = value;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_ORTHOHEIGHT);
    }
    /**
     * @inheritDoc
     */
    get orthoWidth() {
        return this.orthoWidthProperty;
    }
    /**
     * @inheritDoc
     */
    set orthoWidth(value) {
        if (this.orthoWidthProperty === value) {
            return;
        }
        this.orthoWidthProperty = value;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_ORTHOWIDTH);
    }
    /**
     * @inheritDoc
     */
    get projectionMode() {
        return this.projectionModeProperty;
    }
    /**
     * @inheritDoc
     */
    set projectionMode(value) {
        if (this.projectionModeProperty === value) {
            return;
        }
        this.projectionModeProperty = value;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_PROJECTIONMODE);
    }
    /**
     * @inheritDoc
     */
    get aspectRatio() {
        return this.aspectRatioProperty;
    }
    /**
     * @inheritDoc
     */
    set aspectRatio(value) {
        if (this.aspectRatioProperty === value) {
            return;
        }
        this.aspectRatioProperty = value;
        this.orthoWidth = this.orthoHeight * this.aspectRatioProperty;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_ASPECTRATIO);
    }
    /**
     * @inheritDoc
     */
    get isAttached() {
        return this.isAttachedProperty;
    }
    /**
     * @inheritDoc
     */
    set isAttached(value) {
        this.isAttachedProperty = value;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_ISATTACHED);
    }
    /**
     * @inheritDoc
     */
    get radius() {
        const distanceToTarget = this.target.subtract(this.position).length;
        return distanceToTarget;
    }
    /**
     * @inheritDoc
     */
    set radius(value) {
        if (value <= 1.0) {
            value = 1.0;
        }
        if (this.radius === value) {
            return;
        }
        this.position = this.target.subtract(this.forward.scalarMultiply(value));
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_RADIUS);
    }
    /**
     * @inheritDoc
     */
    get orbitalPitch() {
        return this.orbitalPitchProperty;
    }
    /**
     * @inheritDoc
     */
    set orbitalPitch(value) {
        if (this.orbitalPitchProperty === value) {
            return;
        }
        this.orbitalPitchProperty = value > 90.0 ? 89.9 : value < -90 ? -89.9 : value;
        const forwardTsr = this.webAssemblyContext.Math3D.PitchAndYawToDirection(this.orbitalPitchProperty, this.orbitalYawProperty);
        try {
            let forward = new Vector3_1.Vector3(forwardTsr.x, forwardTsr.y, forwardTsr.z);
            forward = forward.scalarMultiply(this.radius);
            this.position = this.target.subtract(forward);
            this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_ORBITALPITCH);
        }
        finally {
            forwardTsr === null || forwardTsr === void 0 ? void 0 : forwardTsr.delete();
        }
    }
    /**
     * @inheritDoc
     */
    get orbitalYaw() {
        return this.orbitalYawProperty;
    }
    /**
     * @inheritDoc
     */
    set orbitalYaw(value) {
        if (this.orbitalYawProperty === value) {
            return;
        }
        this.orbitalYawProperty = value;
        const forwardTsr = this.webAssemblyContext.Math3D.PitchAndYawToDirection(this.orbitalPitchProperty, this.orbitalYawProperty);
        try {
            let forward = new Vector3_1.Vector3(forwardTsr.x, forwardTsr.y, forwardTsr.z);
            forward = forward.scalarMultiply(this.radius);
            this.position = this.target.subtract(forward);
            this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_ORBITALYAW);
        }
        finally {
            forwardTsr === null || forwardTsr === void 0 ? void 0 : forwardTsr.delete();
        }
    }
    /**
     * @inheritDoc
     */
    get farClip() {
        return this.farClipProperty;
    }
    /**
     * @inheritDoc
     */
    set farClip(value) {
        this.farClipProperty = value;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_FARCLIP);
    }
    /**
     * @inheritDoc
     */
    get nearClip() {
        return this.nearClipProperty;
    }
    /**
     * @inheritDoc
     */
    set nearClip(value) {
        this.nearClipProperty = value;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_NEARCLIP);
    }
    /**
     * @inheritDoc
     */
    get fieldOfView() {
        return this.fieldOfViewProperty;
    }
    /**
     * @inheritDoc
     */
    set fieldOfView(value) {
        this.fieldOfViewProperty = value;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_FIELDOFVIEW);
    }
    /**
     * @inheritDoc
     */
    get upGlobal() {
        return new Vector3_1.Vector3(0, 1, 0);
    }
    /**
     * @inheritDoc
     */
    get side() {
        const forward = this.forward;
        const up = forward.crossProduct(this.upGlobal).crossProduct(forward);
        const side = up.crossProduct(forward);
        side.normalize();
        return side;
    }
    /**
     * @inheritDoc
     */
    get forward() {
        const forward = this.target.subtract(this.position);
        forward.normalize();
        return forward;
    }
    /**
     * @inheritDoc
     */
    get up() {
        const forward = this.forward;
        const up = forward.crossProduct(this.upGlobal).crossProduct(forward);
        up.normalize();
        return up;
    }
    /**
     * @inheritDoc
     */
    get target() {
        return this.targetProperty;
    }
    /**
     * @inheritDoc
     */
    set target(value) {
        if (this.targetProperty === value) {
            return;
        }
        this.targetProperty = value;
        let forwardTsr;
        let py;
        try {
            forwardTsr = this.forward.toTsrVector3(this.webAssemblyContext);
            py = this.webAssemblyContext.Math3D.DirectionToPitchAndYaw(forwardTsr);
            this.orbitalPitchProperty = py.pitch;
            this.orbitalYawProperty = py.yaw;
            this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_TARGET);
        }
        finally {
            forwardTsr === null || forwardTsr === void 0 ? void 0 : forwardTsr.delete();
            py === null || py === void 0 ? void 0 : py.delete();
        }
    }
    /**
     * @inheritDoc
     */
    get position() {
        return this.positionProperty;
    }
    /**
     * @inheritDoc
     */
    set position(value) {
        if (this.positionProperty === value) {
            return;
        }
        this.positionProperty = value;
        let forwardTsr;
        let py;
        try {
            forwardTsr = this.forward.toTsrVector3(this.webAssemblyContext);
            py = this.webAssemblyContext.Math3D.DirectionToPitchAndYaw(forwardTsr);
            this.orbitalPitchProperty = py.pitch;
            this.orbitalYawProperty = py.yaw;
            this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_POSITION);
        }
        finally {
            forwardTsr === null || forwardTsr === void 0 ? void 0 : forwardTsr.delete();
            py === null || py === void 0 ? void 0 : py.delete();
        }
    }
    /**
     * @inheritDoc
     */
    toOrthogonal() {
        if (this.projectionModeProperty === ECameraProjectionMode.Orthogonal) {
            return;
        }
        this.projectionModeProperty = ECameraProjectionMode.Orthogonal;
        this.orthoWidthProperty = this.radius;
        this.orthoHeightProperty = this.orthoWidth / this.aspectRatio;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_PROJECTIONMODE);
    }
    /**
     * @inheritDoc
     */
    toPerspective() {
        if (this.projectionModeProperty === ECameraProjectionMode.Perspective) {
            return;
        }
        this.projectionModeProperty = ECameraProjectionMode.Perspective;
        this.radius = this.orthoWidth;
        this.notifyPropertyChanged(Constants_1.PROPERTY.CAMERA_PROJECTIONMODE);
    }
    /**
     * @inheritDoc
     */
    resetToDefaults() {
        this.positionProperty = new Vector3_1.Vector3(-1000, 1000, -1000);
        this.targetProperty = new Vector3_1.Vector3(0, 0, 0);
        this.fieldOfViewProperty = 60;
        this.nearClipProperty = 1;
        this.farClipProperty = 4000;
        this.projectionModeProperty = ECameraProjectionMode.Perspective;
        this.aspectRatioProperty = 1.5;
        this.orthoWidthProperty = 600;
        this.orthoHeightProperty = 400;
        let forwardTsr;
        let orbitalPitchYaw;
        try {
            forwardTsr = this.forward.toTsrVector3(this.webAssemblyContext);
            orbitalPitchYaw = this.webAssemblyContext.Math3D.DirectionToPitchAndYaw(forwardTsr);
            this.orbitalPitch = orbitalPitchYaw.pitch;
            this.orbitalYaw = orbitalPitchYaw.yaw;
        }
        finally {
            orbitalPitchYaw === null || orbitalPitchYaw === void 0 ? void 0 : orbitalPitchYaw.delete();
            forwardTsr === null || forwardTsr === void 0 ? void 0 : forwardTsr.delete();
        }
    }
    /**
     * @inheritDoc
     */
    updateEngineCamera(tsrCamera) {
        Guard_1.Guard.notNull(tsrCamera, "tsrCamera");
        let locTsr;
        let atTsr;
        let upTsr;
        try {
            locTsr = this.position.toTsrVector3(this.webAssemblyContext);
            atTsr = this.target.toTsrVector3(this.webAssemblyContext);
            upTsr = this.up.toTsrVector3(this.webAssemblyContext);
            tsrCamera.SetLoc(locTsr);
            tsrCamera.SetAt(atTsr);
            tsrCamera.SetFarClip(this.farClip);
            tsrCamera.SetNearClip(this.nearClip);
            tsrCamera.SetFovAngle(this.webAssemblyContext.Math3D.DegToRad(this.fieldOfView));
            tsrCamera.SetProjectionMode(this.projectionMode === ECameraProjectionMode.Perspective
                ? this.webAssemblyContext.eTSRCameraProjectionMode.CAMERA_PROJECTIONMODE_PERSPECTIVE
                : this.webAssemblyContext.eTSRCameraProjectionMode.CAMERA_PROJECTIONMODE_ORTHOGONAL);
            tsrCamera.SetOrthoWidth(this.orthoWidth);
            tsrCamera.SetOrthoHeight(this.orthoHeight);
            tsrCamera.SetAspectRatio(this.aspectRatio);
            tsrCamera.SetYaw(this.webAssemblyContext.Math3D.DegToRad(this.orbitalYaw));
            tsrCamera.SetPitch(this.webAssemblyContext.Math3D.DegToRad(this.orbitalPitch));
            tsrCamera.SetUp(upTsr);
        }
        finally {
            locTsr === null || locTsr === void 0 ? void 0 : locTsr.delete();
            atTsr === null || atTsr === void 0 ? void 0 : atTsr.delete();
            upTsr === null || upTsr === void 0 ? void 0 : upTsr.delete();
        }
    }
    /**
     * Notifies subscribers of {@link propertyChanged} that a property has changed and the scene needs updating
     * @param propertyName
     */
    notifyPropertyChanged(propertyName) {
        var _a;
        (_a = this.propertyChanged) === null || _a === void 0 ? void 0 : _a.raiseEvent(new PropertyChangedEventArgs_1.PropertyChangedEventArgs(propertyName));
    }
    /**
     * @inheritDoc
     */
    debugOutput() {
        console.log("Camera properties: ");
        console.log(`  projectionMode: ${this.projectionMode}`);
        console.log(`  position: ${this.position.toString()}`);
        console.log(`  target: ${this.target.toString()}`);
        console.log(`  up: ${this.up.toString()}`);
        console.log(`  pitch: ${this.orbitalPitch.toFixed(2)}`);
        console.log(`  yaw: ${this.orbitalYaw.toFixed(2)}`);
    }
}
exports.CameraController = CameraController;
