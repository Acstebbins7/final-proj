"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseGridDataSeries3D = void 0;
const NumberRange_1 = require("../../../Core/NumberRange");
const BaseDataSeries3D_1 = require("./BaseDataSeries3D");
/**
 * @summary The base class for a Grid (two-dimensional array) DataSeries in SciChart's
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
 * @description
 * A DataSeries stores the data to render. This is independent from the {@link IRenderableSeries3D | RenderableSeries}
 * which defines how that data should be rendered.
 *
 * The Grid DataSeries type is used for 3D Charts that have a uniform grid of values, for example {@link SurfaceMeshRenderableSeries3D},
 * which draws a 3D surface-plot or mesh chart with contours.
 * @remarks See derived type {@link UniformGridDataSeries3D} for a concrete implementation
 */
class BaseGridDataSeries3D extends BaseDataSeries3D_1.BaseDataSeries3D {
    /**
     * Creates an instance of the {@link BaseGridDataSeries3D}
     * @param webAssemblyContext the {@link TSciChart3D | SciChart WebAssembly Context} containing native methods
     * and access to our underlying WebGL2 rendering engine
     * @param options optional parameters of type {@link IBaseGridDataSeries3DOptions} to configure the series
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        // Copy yValues
        this.setYValues(options === null || options === void 0 ? void 0 : options.yValues);
    }
    /**
     * Gets the total extends of the GridDataSeries3D in the y-range
     */
    get yRange() {
        if (!this.yRangeCached) {
            let max = -Number.MAX_VALUE;
            let min = Number.MAX_VALUE;
            for (let z = 0; z < this.zSizeProperty; z++) {
                for (let x = 0; x < this.xSizeProperty; x++) {
                    const current = this.yValuesProperty[z][x];
                    max = Math.max(current, max);
                    min = Math.min(current, min);
                }
            }
            this.yRangeCached = new NumberRange_1.NumberRange(min, max);
        }
        return this.yRangeCached;
    }
    /**
     * The zSize is the HEIGHT or number of rows of the 2-dimensional array,
     * e.g. [[1, 2][3, 4][5, 6]] has a height of 3
     */
    get zSize() {
        return this.zSizeProperty;
    }
    /**
     * The xSize is the WIDTH or number of elements in each or of the 2-dimensional array,
     * e.g. [[1, 2][3, 4][5, 6]] has a xSize of 2
     */
    get xSize() {
        return this.xSizeProperty;
    }
    /**
     * Sets a 2D array of YValues. Input is in the format YValues[z][x]
     * where z is 0 to zSize and X is 0 to xSize
     * Note that setting the YValues involves a clone. Once the array has been set you cannot manipulate
     * the input array and expect changes on the chart.
     * @param zValues
     */
    setYValues(YValues) {
        if (!YValues || !YValues[0]) {
            this.yValuesProperty = undefined;
            this.xSizeProperty = 0;
            this.zSizeProperty = 0;
            return;
        }
        const firstRowLength = YValues[0].length;
        YValues.forEach(zRow => {
            if (!zRow) {
                throw new Error("Each row in YValues must be defined. See how to declare a 2D array in Javascript here https://stackoverflow.com/a/966234/303612");
            }
            if (zRow.length !== firstRowLength) {
                throw new Error("Each row in YValues must be the same length, so that the overall 2D array is square");
            }
        });
        const w = YValues[0].length;
        const h = YValues.length;
        this.xSizeProperty = w;
        this.zSizeProperty = h;
        this.yValuesProperty = YValues;
        this.notifyDataChanged();
    }
    /**
     * Gets the Y-Values array as a two dimensional array. Output is in the format YValues[z][x]
     * where z is 0 to zSize and X is 0 to xSize.
     */
    getYValues() {
        return this.yValuesProperty;
    }
    /**
     * Gets the YValue at the specific Z,X index where Z must be within 0-zSize and X must be within 0-xSize
     * @param zIndex the z-index from 0 to zSize
     * @param xIndex the x-index from 0 to xSize
     */
    getYValue(zIndex, xIndex) {
        try {
            return this.yValuesProperty[zIndex][xIndex];
        }
        catch (_a) {
            console.log(`error at get z,x ${zIndex}, ${xIndex}`);
            return 0;
        }
    }
    /**
     * Sets the YValue at the specific Z,X index where Z must be within 0-zSize and X must be within 0-xSize
     * @param zIndex the z-index from 0 to zSize
     * @param xIndex the x-index from 0 to xSize
     * @param YValue the new Height-value
     */
    setYValue(yIndex, xIndex, zValue) {
        this.yValuesProperty[yIndex][xIndex] = zValue;
        this.notifyDataChanged();
    }
    /**
     * @inheritDoc
     */
    notifyDataChanged() {
        super.notifyDataChanged();
        // setting to undefined requires recreation of this on next call to .getYRange()
        this.yRangeCached = undefined;
    }
}
exports.BaseGridDataSeries3D = BaseGridDataSeries3D;
