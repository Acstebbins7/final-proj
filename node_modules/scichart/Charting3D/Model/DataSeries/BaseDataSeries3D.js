"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseDataSeries3D = exports.EDataSeriesType3D = void 0;
const EventHandler_1 = require("../../../Core/EventHandler");
/**
 * Defines {@link BaseDataSeries3D | DataSeries} types available within SciChart's
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
 */
var EDataSeriesType3D;
(function (EDataSeriesType3D) {
    /**
     * Defines an {@link XyzDataSeries3D}
     */
    EDataSeriesType3D["Xyz3D"] = "Xyz";
    /**
     * Defines an {@link UniformGridDataSeries3D}
     */
    EDataSeriesType3D["UniformGrid3D"] = "UniformGrid3D";
    /**
     * Defines a NonUniformGridDataSeries3D
     */
    EDataSeriesType3D["NonUniformGrid3D"] = "NonUniformGrid3D";
})(EDataSeriesType3D = exports.EDataSeriesType3D || (exports.EDataSeriesType3D = {}));
/**
 * The base class for DataSeries in SciChart's {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
 * @remarks
 * A DataSeries stores the data to render. This is independent from the {@link IRenderableSeries3D | RenderableSeries}
 * which defines how that data should be rendered.
 *
 * See derived types of {@link BaseDataSeries3D} to find out what data-series are available.
 * See derived types of {@link IRenderableSeries3D} to find out what 3D JavaScript Chart types are available.
 */
class BaseDataSeries3D {
    /**
     * Creates an instance of the {@link BaseDataSeries3D}
     * @param webAssemblyContext the {@link TSciChart3D | SciChart WebAssembly Context} containing native methods
     * and access to our underlying WebGL2 rendering engine
     * @param options optional parameters of type {@link IBaseDataSeries3DOptions} to configure the series
     */
    constructor(webAssemblyContext, options) {
        var _a;
        this.webAssemblyContext = webAssemblyContext;
        this.dataSeriesNameProperty = (_a = options === null || options === void 0 ? void 0 : options.dataSeriesName) !== null && _a !== void 0 ? _a : this.dataSeriesNameProperty;
        this.dataChanged = new EventHandler_1.EventHandler();
        this.isModifiedProperty = true;
    }
    /**
     * @inheritDoc
     */
    get dataSeriesName() {
        return this.dataSeriesNameProperty;
    }
    /**
     * @inheritDoc
     */
    set dataSeriesName(dataSeriesName) {
        this.dataSeriesNameProperty = dataSeriesName;
        this.notifyDataChanged();
    }
    /**
     * Determines whether the Data Series has been modified since last resetModified() call.
     */
    get isModified() {
        return this.isModifiedProperty;
    }
    /**
     * Returns true if this DataSeries has been deleted and native memory destroyed
     */
    getIsDeleted() {
        return this.isDeleted;
    }
    /**
     * @inheritDoc
     */
    delete() {
        this.isDeleted = true;
    }
    /**
     * Call this method to notify subscribers of {@link dataChanged} that the data has changed
     * and {@link https://www.scichart.com/javascript-chart-features | 3D JavaScript Chart}
     * needs redrawing
     */
    notifyDataChanged() {
        this.isModifiedProperty = true;
        this.dataChanged.raiseEvent();
    }
    /**
     * Resets the modified flag.
     */
    resetModified() {
        this.isModifiedProperty = false;
    }
}
exports.BaseDataSeries3D = BaseDataSeries3D;
