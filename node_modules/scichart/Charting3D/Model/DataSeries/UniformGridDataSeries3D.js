"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UniformGridDataSeries3D = void 0;
const NumberRange_1 = require("../../../Core/NumberRange");
const BaseDataSeries3D_1 = require("./BaseDataSeries3D");
const BaseGridDataSeries3D_1 = require("./BaseGridDataSeries3D");
/**
 * @summary The {@link UniformGridDataSeries3D} wraps a 2D array of numbers which become the Y-values (heights) in various
 * {@link BaseRenderableSeries3D} in SciChart's High Performance
 * {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}.
 * @description
 * The {@link SurfaceMeshRenderableSeries3D} requires a 2D array of numbers to map to Y-values (heights).
 *
 * The {@link xStart}, @{link xStep} properties define the extents of the data in the X-direction, and {@link yStart}, {@link yStep}
 * define the extents of the data in the Y-direction.
 *
 * Y-values may be updated via manipulating the array returned by {@link getYValues}, or by setting a new array to {@link setYValues}. When
 * manpulating data directly, be sure to call {@link notifyDataChanged} to inform SciChart to redraw.
 */
class UniformGridDataSeries3D extends BaseGridDataSeries3D_1.BaseGridDataSeries3D {
    /**
     * Creates an instance of a {@link UniformGridDataSeries3D}
     * @param webAssemblyContext the {@link TSciChart3D | SciChart WebAssembly Context} containing native methods
     * and access to our underlying WebGL2 rendering engine
     * @param options optional parameters of type {@link IUniformGridDataSeries3DOptions} to configure the series
     */
    constructor(webAssemblyContext, options) {
        super(webAssemblyContext, options);
        this.type = BaseDataSeries3D_1.EDataSeriesType3D.UniformGrid3D;
        this.xStartProperty = (options === null || options === void 0 ? void 0 : options.xStart) || 0;
        this.xStepProperty = (options === null || options === void 0 ? void 0 : options.xStep) || 1;
        this.zStartProperty = (options === null || options === void 0 ? void 0 : options.zStart) || 0;
        this.zStepProperty = (options === null || options === void 0 ? void 0 : options.zStep) || 1;
    }
    /**
     * xStart defines the Start point on the {@link AxisBase3D | XAxis} where this grid or mesh will be drawn
     */
    get xStart() {
        return this.xStartProperty;
    }
    /**
     * xStart defines the Start point on the {@link AxisBase3D | XAxis} where this grid or mesh will be drawn
     */
    set xStart(xStart) {
        this.xStartProperty = xStart;
        this.notifyDataChanged();
    }
    /**
     * xStep defines Step on the {@link AxisBase3D | XAxis} for each cell in the grid or mesh
     */
    get xStep() {
        return this.xStepProperty;
    }
    /**
     * xStep defines Step on the {@link AxisBase3D | XAxis} for each cell in the grid or mesh
     */
    set xStep(xStep) {
        this.xStepProperty = xStep;
        this.notifyDataChanged();
    }
    /**
     * zStart defines the Start point on the {@link AxisBase3D | ZAxis} where this grid or mesh will be drawn
     */
    get zStart() {
        return this.zStartProperty;
    }
    /**
     * zStart defines the Start point on the {@link AxisBase3D | ZAxis} where this grid or mesh will be drawn
     */
    set zStart(zStart) {
        this.zStartProperty = zStart;
        this.notifyDataChanged();
    }
    /**
     * zStep defines Step on the {@link AxisBase3D | ZAxis} for each cell in the grid or mesh
     */
    get zStep() {
        return this.zStepProperty;
    }
    /**
     * zStep defines Step on the {@link AxisBase3D | ZAxis} for each cell in the grid or mesh
     */
    set zStep(zStep) {
        this.zStepProperty = zStep;
        this.notifyDataChanged();
    }
    /**
     * @inheritDoc
     */
    get xRange() {
        return new NumberRange_1.NumberRange(this.xStart, this.xStart + this.xStep * (this.xSize - 1));
    }
    /**
     * @inheritDoc
     */
    get zRange() {
        return new NumberRange_1.NumberRange(this.zStart, this.zStart + this.zStep * (this.zSize - 1));
    }
}
exports.UniformGridDataSeries3D = UniformGridDataSeries3D;
