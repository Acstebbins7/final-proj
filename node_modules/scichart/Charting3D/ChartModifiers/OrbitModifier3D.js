"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrbitModifier3D = void 0;
const Point_1 = require("../../Core/Point");
const ChartModifierBase3D_1 = require("./ChartModifierBase3D");
/**
 * @summary The {@link OrbitModifier3D} provides behavior to orbit around a target point on a 3D {@link SciChart3DSurface}
 * within SciChart - High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
 * @description
 *
 * To apply the {@link OrbitModifier3D} to a {@link SciChart3DSurface} and add orbit on mouse-drag behavior,
 * use the following code:
 *
 * ```ts
 * const sciChartS3Durface: SciChart3DSurface;
 * sciChart3DSurface.chartModifiers.add(new OrbitModifier3D());
 * ```
 */
class OrbitModifier3D extends ChartModifierBase3D_1.ChartModifierBase3D {
    constructor() {
        super();
    }
    /**
     * @inheritDoc
     */
    modifierMouseDown(args) {
        super.modifierMouseDown(args);
        // if (!this.isAttached) {
        //     throw new Error("Should not call RubberBandXyZoomModifier.modifierMouseDown if not attached");
        // }
        const { x, y } = args.mousePoint;
        this.pointStart = new Point_1.Point(x, y);
        this.isDragging = true;
        args.handled = true;
    }
    /**
     * @inheritDoc
     */
    modifierMouseMove(args) {
        super.modifierMouseMove(args);
        if (!this.isDragging) {
            return;
        }
        const camera = this.parentSurface.camera;
        if (!camera) {
            return;
        }
        const degreesPerPixel = 0.2;
        const { x, y } = args.mousePoint;
        const deltaPoint = new Point_1.Point(this.pointStart.x - x, this.pointStart.y - y);
        const deltaYaw = deltaPoint.x * degreesPerPixel;
        const deltaPitch = deltaPoint.y * degreesPerPixel;
        camera.orbitalYaw += deltaYaw;
        camera.orbitalPitch -= deltaPitch;
        this.pointStart = new Point_1.Point(x, y);
        args.handled = true;
    }
    /**
     * @inheritDoc
     */
    modifierMouseUp(args) {
        super.modifierMouseUp(args);
        this.isDragging = false;
        this.pointStart = undefined;
    }
}
exports.OrbitModifier3D = OrbitModifier3D;
