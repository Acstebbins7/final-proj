"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MouseWheelZoomModifier3D = void 0;
const CameraController_1 = require("../CameraController");
const ChartModifierBase3D_1 = require("./ChartModifierBase3D");
/**
 * @summary The {@link MouseWheelZoomModifier3D} provides Mouse wheel zooming behavior on a 3D {@link SciChart3DSurface}
 * within SciChart - High Performance {@link https://www.scichart.com/javascript-chart-features | JavaScript 3D Charts}
 * @description
 *
 * To apply the {@link MouseWheelZoomModifier3D} to a {@link SciChart3DSurface} and add Mouse-wheel zoom behavior,
 * use the following code:
 *
 * ```ts
 * const sciChartS3Durface: SciChart3DSurface;
 * sciChart3DSurface.chartModifiers.add(new MouseWheelZoomModifier3D());
 * ```
 *
 * @remarks The speed of mouse-wheel zoom can be modified via the {@link MouseWheelZoomModifier3D.mouseWheelSensitivity} property.
 */
class MouseWheelZoomModifier3D extends ChartModifierBase3D_1.ChartModifierBase3D {
    /**
     * Creates an instance of the {@link MouseWheelZoomModifier3D}
     * @param options optional parameters of type {@link IMouseWheelZoomModifier3DOptions} used to configure the modifier
     */
    constructor(options) {
        super(options);
        this.mouseWheelSensitivity = (options === null || options === void 0 ? void 0 : options.mouseWheelSensitivity) || 0.1;
    }
    /**
     * @inheritDoc
     */
    modifierMouseWheel(args) {
        super.modifierMouseWheel(args);
        const scs = this.parentSurface;
        if (!scs) {
            return;
        }
        const camera = scs.camera;
        if (!camera) {
            return;
        }
        const delta = args.mouseWheelDelta;
        const radius = camera.radius;
        const zoomFactor = (radius + delta * this.mouseWheelSensitivity) / radius;
        if (camera.projectionMode === CameraController_1.ECameraProjectionMode.Perspective) {
            camera.radius *= zoomFactor;
        }
        else {
            camera.orthoWidth *= zoomFactor;
            camera.orthoHeight *= zoomFactor;
        }
        args.handled = true;
    }
}
exports.MouseWheelZoomModifier3D = MouseWheelZoomModifier3D;
