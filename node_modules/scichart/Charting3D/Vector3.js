"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vector3 = void 0;
const Guard_1 = require("../Core/Guard");
/**
 * Defines a 3-component vector with X,Y,Z values
 */
class Vector3 {
    /**
     * Creates a 3-component vector with X,Y,Z values
     * @param x
     * @param y
     * @param z
     */
    constructor(x, y, z) {
        this.xProperty = x;
        this.yProperty = y;
        this.zProperty = z;
    }
    /**
     * Returns a static shared zero vector where X,Y,Z = 0
     */
    static get zero() {
        return Vector3.zeroVector;
    }
    /**
     * Gets the X-value
     * @remarks
     * Warning! Treat {@link Vector3} as immutable! Do not set this value but create new vectors if you need to change a value
     */
    get x() {
        return this.xProperty;
    }
    /**
     * Gets the Y-value
     * @remarks
     * Warning! Treat {@link Vector3} as immutable! Do not set this value but create new vectors if you need to change a value
     */
    get y() {
        return this.yProperty;
    }
    /**
     * Gets the Z-value
     * @remarks
     * Warning! Treat {@link Vector3} as immutable! Do not set this value but create new vectors if you need to change a value
     */
    get z() {
        return this.zProperty;
    }
    /**
     * Used internally - converts the {@link Vector3} to a {@link TSRVector3} for compatibility with SciChart's webassembly engine
     * @param webAssemblyContext The {@link TSciChart3D | SciChart 3D WebAssembly Context}
     * containing native methods and access to our WebGL2 Engine and WebAssembly numerical methods
     */
    toTsrVector3(webAssemblyContext) {
        Guard_1.Guard.notNull(webAssemblyContext, "webAssemblyContext");
        return new webAssemblyContext.TSRVector3(this.x, this.y, this.z);
    }
    /**
     * Performs vector subtraction of this - other, returning the result in a new vector
     * @description
     * An example can be found below
     * ```ts
     * const firstVector = new Vector3(1,2,3);
     * const secondVector = new Vector3(1,1,1);
     * const result = firstVector.subtract(secondVector);
     * // Result is [0,1,2]
     * ```
     * @param other the vector to substract from this vector
     * @returns A new vector with the subtraction result
     */
    subtract(other) {
        return new Vector3(this.x - other.x, this.y - other.y, this.z - other.z);
    }
    /**
     * Performs vector addition of this + other, returning the result in a new vector
     * @description
     * An example can be found below
     * ```ts
     * const firstVector = new Vector3(1,2,3);
     * const secondVector = new Vector3(1,1,1);
     * const result = firstVector.add(secondVector);
     * // Result is [2,3,4]
     * ```
     * @param other the vector to add to this vector
     * @returns A new vector with the addition result
     */
    add(other) {
        return new Vector3(this.x + other.x, this.y + other.y, this.z + other.z);
    }
    /**
     * Performs scalar multiplication of this vector x scalar constant, returning the result in a new vector
     * @description
     * An example can be found below
     * ```ts
     * const firstVector = new Vector3(1,2,3);
     * const result = firstVector.scalarMultiply(2);
     * // Result is [2,4,6]
     * ```
     * @param scalar
     * @returns A new vector with the multiply result
     */
    scalarMultiply(scalar) {
        return new Vector3(this.x * scalar, this.y * scalar, this.z * scalar);
    }
    /**
     * Performs vector cross product of this vector and another vector, returning the result in a new vector
     * @description
     * An example can be found below
     * ```ts
     * const firstVector = new Vector3(1,2,3);
     * const secondVector = new Vector3(4,5,6);
     * const result = firstVector.crossProduct(secondVector);
     * // Result is firstVector ^ (cross) secondVector
     * ```
     * @param rhs the other vector to apply to the right hand side of the cross product
     * @returns A new vector with the cross product result
     */
    crossProduct(rhs) {
        return new Vector3(this.y * rhs.z - this.z * rhs.y, this.z * rhs.x - this.x * rhs.z, this.x * rhs.y - this.y * rhs.x);
    }
    /**
     * Gets the euclidean length of the vector
     */
    get length() {
        return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    }
    /**
     * Normalizes the current vector by computing its X,Y,Z components which make the length = 1
     * but direction the same
     * @remarks
     * This is the only operation which modifies the current vector (not immutable)
     */
    normalize() {
        const m = 1.0 / this.length;
        if (m === 0) {
            throw new Error("Vector3 magnitude is zero, cannot normalize!");
        }
        this.xProperty = this.xProperty * m;
        this.yProperty = this.yProperty * m;
        this.zProperty = this.zProperty * m;
    }
    /**
     * Returns a string representation of the vector for debugging purposes
     */
    toString() {
        return `Vector3 (${this.xProperty.toFixed(2)}, ${this.yProperty.toFixed(2)}, ${this.zProperty.toFixed(2)})`;
    }
}
exports.Vector3 = Vector3;
Vector3.zeroVector = new Vector3(0, 0, 0);
