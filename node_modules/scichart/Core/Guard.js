"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Guard = void 0;
const isRealNumber_1 = require("../utils/isRealNumber");
/**
 * Guard class for sanity-checking (null checking, check if property is true, check arrays same length etc...)
 */
class Guard {
    /**
     * Asserts the argument is not null
     * @param arg The argument
     * @param name The argument name
     * @throws Error - an error when the argument is null or undefined
     */
    static notNull(arg, name) {
        if (arg === undefined || arg === null) {
            throw new Error("Argument " + name + " must not be undefined");
        }
    }
    /**
     * Asserts a parameter is true
     * @param value
     * @param message The message to show if not true
     * @throws Error - an error when the parameter is false
     */
    static isTrue(value, message) {
        if (!value) {
            throw new Error(message);
        }
    }
    /**
     * Asserts two arrays are not null (undefined) and are the same legnth
     * @param arg The first array
     * @param name1 The first array parameter name
     * @param arg2 The second array
     * @param name2 The second array parameter name
     * @throws Error - an error when the arrays are not the same length
     */
    static arraysSameLength(arg, name1, arg2, name2) {
        this.notNull(arg, name1);
        this.notNull(arg2, name2);
        if (arg.length !== arg2.length) {
            throw new Error(`Arrays ${name1} and ${name2} must have the same length`);
        }
    }
    /**
     * Asserts multiple arrays are not null (undefined) and are the same legnth
     * @param args The array of arrays
     * @throws Error - an error when the arrays are not the same length
     */
    static arraysSameLengthArr(args = []) {
        args.forEach(el => {
            this.notNull(el.arg, el.name);
        });
        if (args.length >= 0) {
            const firstArgLength = args[0].arg.length;
            const firstArgName = args[0].name;
            args.forEach(el => {
                if (el.arg.length !== firstArgLength) {
                    throw new Error(`Arrays ${firstArgName} and ${el.name} must have the same length`);
                }
            });
        }
    }
    /**
     * Asserts a numeric argument is a real number: not null (undefined), not NaN and not infinite
     * @param d
     * @param name
     */
    static argumentIsRealNumber(d, name) {
        if (!isRealNumber_1.isRealNumber(d)) {
            throw new Error(`Argument ${name} must be a real number (not infinite, not NAN)`);
        }
    }
}
exports.Guard = Guard;
