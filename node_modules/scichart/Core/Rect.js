"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Rect = void 0;
/**
 * Class to represent a rectangle in 2D space
 */
class Rect {
    /**
     * Creates a rect with X,Y,Width,Height
     * @remarks
     * To create a rect with two points, or with left, top right bottom, see the factory functions
     * {@link Rect.createWithPoints} or {@link Rect.createWithCoords}
     * @param x
     * @param y
     * @param width
     * @param height
     */
    constructor(x, y, width, height) {
        if (width < 0 || height < 0) {
            throw new Error("Can not create Rect with negative width/height");
        }
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
    }
    /**
     * Creates a rectangle with X,Y top left coordinate and width and height
     * @param x
     * @param y
     * @param width
     * @param height
     */
    static create(x, y, width, height) {
        if (width < 0 || height < 0) {
            throw new Error("Rect.create width and height cannot be less than zero");
        }
        return new Rect(x, y, width, height);
    }
    /**
     * Creates a rectangle with left, top ,right, bottom
     * @param left
     * @param top
     * @param right
     * @param bottom
     */
    static createWithCoords(left, top, right, bottom) {
        const x = left;
        const y = top;
        const width = right - left;
        const height = bottom - top;
        return new Rect(x, y, width, height);
    }
    /**
     * Create a rectangle with two points which could be top-left, bottom-right
     * @param point1
     * @param point2
     */
    static createWithPoints(point1, point2) {
        const x = Math.min(point1.x, point2.x);
        const y = Math.min(point1.y, point2.y);
        const width = Math.max(Math.max(point1.x, point2.x) - x, 0);
        const height = Math.max(Math.max(point1.y, point2.y) - y, 0);
        return Rect.create(x, y, width, height);
    }
    /**
     * Clones a rect
     * @param rect
     */
    static createCopy(rect) {
        return new Rect(rect.x, rect.y, rect.width, rect.height);
    }
    /**
     * Creates a zero rect with x,y,w,h = 0
     */
    static createZero() {
        return new Rect(0, 0, 0, 0);
    }
    /**
     * Returns true if a rect numerically equals another rect
     * @param rect1
     * @param rect2
     */
    static isEqual(rect1, rect2) {
        return (rect1.x === rect2.x && rect1.y === rect2.y && rect1.width === rect2.width && rect1.height === rect2.height);
    }
    /**
     * Gets the left edge of the rect
     */
    get left() {
        return this.x;
    }
    /**
     * Gets the top edge of the rect
     */
    get top() {
        return this.y;
    }
    /**
     * Gets the right edge of the rect
     */
    get right() {
        return this.x + this.width;
    }
    /**
     * Gets the bottom edge of the rect
     */
    get bottom() {
        return this.y + this.height;
    }
}
exports.Rect = Rect;
