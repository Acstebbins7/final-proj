"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.animateAny = void 0;
const AnimationToken_1 = require("../AnimationToken");
const Guard_1 = require("../Guard");
const NumberUtil_1 = require("../NumberUtil");
/**
 * @description A generic function for animating any value
 * @remarks See functions {@link DoubleAnimator.animate} and {@link NumberRangeAnimator.animate} for examples on how to use this
 * @param durationMs The duration of the animation in milliseconds
 * @param from The start value
 * @param to The end value
 * @param onAnimate A function which is called on animation step, with the current intermediate value passed in
 * @param interpolate An interpolation function
 * @param onCompleted A function which is called when animation is completed
 * @param easingFunc An easing function. See {@link IEasingMap} for a list of values
 */
function animateAny(durationMs, from, to, onAnimate, interpolate, onCompleted, easingFunc) {
    Guard_1.Guard.notNull(onAnimate, "onAnimate");
    Guard_1.Guard.notNull(from, "from");
    Guard_1.Guard.notNull(to, "to");
    Guard_1.Guard.notNull(interpolate, "interpolate");
    const startTime = new Date().getTime();
    const endTime = startTime + durationMs;
    // start the animation
    onAnimate(from);
    const token = new AnimationToken_1.AnimationToken(setInterval(() => {
        const timeNow = new Date().getTime();
        const progressionFactor = NumberUtil_1.NumberUtil.constrain(1 - (endTime - timeNow) / durationMs, 0, 1);
        const easedValue = easingFunc(progressionFactor);
        // Interpolate and notify
        const interpolated = interpolate(from, to, easedValue);
        onAnimate(interpolated);
        if (timeNow > endTime) {
            // Call the final onAnimate if not called
            if (easedValue !== 1) {
                onAnimate(interpolate(from, to, easingFunc(1.0)));
            }
            // end the animation
            token.completeAnimation();
        }
    }, 16.67), onCompleted);
    return token;
}
exports.animateAny = animateAny;
