"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.autoReverseEasing = exports.easing = void 0;
/**
 * Easing functions used throughout SciChart when animations are used
 */
exports.easing = {
    /**
     * @inheritDoc
     */
    linear: t => t,
    /**
     * @inheritDoc
     */
    quadratic: t => t * (-(t * t) * t + 4 * t * t - 6 * t + 4),
    /**
     * @inheritDoc
     */
    cubic: t => t * (4 * t * t - 9 * t + 6),
    /**
     * @inheritDoc
     */
    elastic: t => t * (33 * t * t * t * t - 106 * t * t * t + 126 * t * t - 67 * t + 15),
    /**
     * @inheritDoc
     */
    inQuad: t => t * t,
    /**
     * @inheritDoc
     */
    outQuad: t => t * (2 - t),
    /**
     * @inheritDoc
     */
    inOutQuad: t => (t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t),
    /**
     * @inheritDoc
     */
    inCubic: t => t * t * t,
    /**
     * @inheritDoc
     */
    outCubic: t => --t * t * t + 1,
    /**
     * @inheritDoc
     */
    inOutCubic: t => (t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1),
    /**
     * @inheritDoc
     */
    inQuart: t => t * t * t * t,
    /**
     * @inheritDoc
     */
    outQuart: t => 1 - --t * t * t * t,
    /**
     * @inheritDoc
     */
    inOutQuart: t => (t < 0.5 ? 8 * t * t * t * t : 1 - 8 * --t * t * t * t),
    /**
     * @inheritDoc
     */
    inQuint: t => t * t * t * t * t,
    /**
     * @inheritDoc
     */
    outQuint: t => 1 + --t * t * t * t * t,
    /**
     * @inheritDoc
     */
    inOutQuint: t => (t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * --t * t * t * t * t),
    /**
     * @inheritDoc
     */
    inSine: t => -Math.cos(t * (Math.PI / 2)) + 1,
    /**
     * @inheritDoc
     */
    outSine: t => Math.sin(t * (Math.PI / 2)),
    /**
     * @inheritDoc
     */
    inOutSine: t => -(Math.cos(Math.PI * t) - 1) / 2,
    /**
     * @inheritDoc
     */
    inExpo: t => Math.pow(2, 10 * (t - 1)),
    /**
     * @inheritDoc
     */
    outExpo: t => t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
    /**
     * @inheritDoc
     */
    inOutExpo: t => {
        t /= 0.5;
        if (t < 1)
            return Math.pow(2, 10 * (t - 1)) / 2;
        t--;
        return (-Math.pow(2, -10 * t) + 2) / 2;
    },
    /**
     * @inheritDoc
     */
    inCirc: t => -Math.sqrt(1 - t * t) + 1,
    /**
     * @inheritDoc
     */
    outCirc: t => Math.sqrt(1 - (t = t - 1) * t),
    /**
     * @inheritDoc
     */
    inOutCirc: t => {
        t /= 0.5;
        if (t < 1)
            return -(Math.sqrt(1 - t * t) - 1) / 2;
        t -= 2;
        return (Math.sqrt(1 - t * t) + 1) / 2;
    }
};
/**
 * Reversable functions that go from 0..1..0 used throughout SciChart when animations are used
 */
exports.autoReverseEasing = {
    /**
     * No easing acceleration like linear, but it does reverse from 0..1..0
     * @param t
     */
    linear: t => t < 0.5 ? t * 2 : 2 - t * 2,
};
