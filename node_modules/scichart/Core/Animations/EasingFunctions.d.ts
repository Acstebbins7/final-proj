/**
 * An easing function used in animations through SciChart. See {@link easing} for a list of values
 */
export declare type TEasing = (time: number) => number;
/**
 * Easing functions used throughout SciChart when animations are used
 */
export interface IEasingMap {
    /**
     * No easing, no acceleration
     * @param t
     */
    linear: TEasing;
    /**
     * Accelerates fast, then slows quickly towards end.
     * @param t
     */
    quadratic: TEasing;
    /**
     * Overshoots over 1 and then returns to 1 towards end.
     * @param t
     */
    cubic: TEasing;
    /**
     * Overshoots over 1 multiple times - wiggles around 1.
     * @param t
     */
    elastic: TEasing;
    /**
     * Accelerating from zero velocity
     * @param t
     */
    inQuad: TEasing;
    /**
     * Decelerating to zero velocity
     * @param t
     */
    outQuad: TEasing;
    /**
     * Acceleration until halfway, then deceleration
     * @param t
     */
    inOutQuad: TEasing;
    /**
     * Accelerating from zero velocity
     * @param t
     */
    inCubic: TEasing;
    /**
     * Decelerating to zero velocity
     * @param t
     */
    outCubic: TEasing;
    /**
     * Acceleration until halfway, then deceleration
     * @param t
     */
    inOutCubic: TEasing;
    /**
     * Accelerating from zero velocity
     * @param t
     */
    inQuart: TEasing;
    /**
     * Decelerating to zero velocity
     * @param t
     */
    outQuart: TEasing;
    /**
     * Acceleration until halfway, then deceleration
     * @param t
     */
    inOutQuart: TEasing;
    /**
     * Accelerating from zero velocity
     * @param t
     */
    inQuint: TEasing;
    /**
     * Decelerating to zero velocity
     * @param t
     */
    outQuint: TEasing;
    /**
     * Acceleration until halfway, then deceleration
     * @param t
     */
    inOutQuint: TEasing;
    /**
     * Accelerating from zero velocity
     * @param t
     */
    inSine: TEasing;
    /**
     * Decelerating to zero velocity
     * @param t
     */
    outSine: TEasing;
    /**
     * Accelerating until halfway, then decelerating
     * @param t
     */
    inOutSine: TEasing;
    /**
     * Exponential accelerating from zero velocity
     * @param t
     */
    inExpo: TEasing;
    /**
     * Exponential decelerating to zero velocity
     * @param t
     */
    outExpo: TEasing;
    /**
     * Exponential accelerating until halfway, then decelerating
     * @param t
     */
    inOutExpo: TEasing;
    /**
     * Circular accelerating from zero velocity
     * @param t
     */
    inCirc: TEasing;
    /**
     * Circular decelerating to zero velocity Moves VERY fast at the beginning and
     * then quickly slows down in the middle. This tween can actually be used
     * in continuous transitions where target value changes all the time,
     * because of the very quick start, it hides the jitter between target value changes.
     */
    outCirc: TEasing;
    /**
     * Circular acceleration until halfway, then deceleration
     * @param t
     */
    inOutCirc: TEasing;
}
/**
 * Easing functions used throughout SciChart when animations are used
 */
export declare const easing: IEasingMap;
/**
 * Reversable functions that go from 0..1..0 used throughout SciChart when animations are used
 */
export interface IReversableEasingMap {
    linear: TEasing;
}
/**
 * Reversable functions that go from 0..1..0 used throughout SciChart when animations are used
 */
export declare const autoReverseEasing: IReversableEasingMap;
