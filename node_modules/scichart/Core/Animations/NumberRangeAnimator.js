"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberRangeAnimator = void 0;
const NumberRange_1 = require("../NumberRange");
const Animator_1 = require("./Animator");
const EasingFunctions_1 = require("./EasingFunctions");
/**
 * A class for animating a value of type {@link NumberRange}. Used throughout SciChart to animate
 * {@link AxisCore.visibleRange} when zooming or panning.
 */
class NumberRangeAnimator {
    /**
     * Animates a {@link NumberRange} with a start, to value over a specified duration and with an optional completed and easing function
     * @param from The start value to animate
     * @param to The end value to animate
     * @param durationMs The duration of the animation in milliseconds
     * @param onAnimate A callback function which is called with intermediate values
     * @param onCompleted A callback function which is called when the animation completes
     * @param easingFunction An optional easing function. See {@link IEasingMap} for a list of values
     */
    static animate(from, to, durationMs, onAnimate, onCompleted, easingFunction = EasingFunctions_1.easing.outExpo) {
        return Animator_1.animateAny(durationMs, from, to, onAnimate, NumberRangeAnimator.interpolate, onCompleted, easingFunction);
    }
    static interpolate(from, to, interpolationFactor) {
        const newMin = (to.min - from.min) * interpolationFactor + from.min;
        const newMax = (to.max - from.max) * interpolationFactor + from.max;
        const result = new NumberRange_1.NumberRange(newMin, newMax);
        return result;
    }
}
exports.NumberRangeAnimator = NumberRangeAnimator;
