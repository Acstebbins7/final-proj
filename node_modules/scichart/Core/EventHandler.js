"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventHandler = void 0;
/**
 * An EventHandler is a generic class that enables subscription, unsubscription to an event
 * @description
 * Declare an event as a property in your class like this
 * ```ts
 * public class MyCLass {
 *     public EventHandler<string> someEvent = new EventHandler<string>();
 * }
 * ```
 *
 * Subscribe to the event like this
 * ```ts
 * const myClass = new MyClass();
 * myClass.subscribe((event) => {
 *    console.log(event);
 * });
 * ```
 *
 * Publish an event like this
 * ```ts
 * const myClass = new MyClass();
 * myClass.raiseEvent("Hi there!");
 * ```
 */
class EventHandler {
    constructor() {
        this.handlers = [];
    }
    /**
     * Subscribes to the event
     * @param handler
     */
    subscribe(handler) {
        if (!this.handlers.includes(handler)) {
            this.handlers.push(handler);
        }
    }
    /**
     * Unsubscribes from the event
     * @param handler
     */
    unsubscribe(handler) {
        this.handlers = this.handlers.filter(h => h !== handler);
    }
    /**
     * Raises the event with the provided data object
     * @param data
     */
    raiseEvent(data) {
        this.handlers.slice(0).forEach(h => h(data));
    }
}
exports.EventHandler = EventHandler;
