"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberRange = void 0;
const app_1 = require("../constants/app");
const isRealNumber_1 = require("../utils/isRealNumber");
/**
 * Defines a number range with numeric min, max
 */
class NumberRange {
    constructor(min = 0, max = 10) {
        this.min = min;
        this.max = max;
    }
    /**
     * Returns a new {@link NumberRange} which is the union of two ranges
     * @remarks
     * E.g. if current range is [1,2] and input is [2,3] the result range will be [1,3]
     * @param range
     * @returns the new union range
     */
    union(range) {
        const newMin = Math.min(this.min, range.min);
        const newMax = Math.max(this.max, range.max);
        return new NumberRange(newMin, newMax);
    }
    /**
     * Clips a range to a min, max value
     * @remarks
     * E.g. if the current range is [1,5] and input is [2,6] then result will be [2,5]
     * @param range
     * @returns The new clipped range
     */
    clip(range) {
        const newMin = Math.max(this.min, range.min);
        const newMax = Math.min(this.max, range.max);
        return new NumberRange(newMin, newMax);
    }
    /**
     * Grows a range by a min and max factor
     * @remarks
     * If the current range is [5,10] and the input range is [0.1, 0.1] the current range will be
     * grown by 10%, so [4.5, 10.5]
     * @param range The grow factor
     * @param isLogarithmic When true, treats the growth factor as logarithmic not linear
     */
    growBy(range, isLogarithmic = false) {
        const diff = this.max - this.min;
        // If min == max, expand around the mid line
        let min = this.min - range.min * (this.isZero() ? this.min : diff);
        let max = this.max + range.max * (this.isZero() ? this.max : diff);
        // Swap if min > max (occurs when mid line is negative)
        if (min > max) {
            const temp = min;
            min = max;
            max = temp;
        }
        // If still zero, then expand around the zero line
        if (Math.abs(max - min) <= app_1.EPSILON && Math.abs(min) <= app_1.EPSILON) {
            min = -1.0;
            max = 1.0;
        }
        return new NumberRange(min, max);
    }
    /**
     * Returns true if the range is defined (is a real number, not NaN, not infinite, and not undefined)
     */
    isDefined() {
        return isRealNumber_1.isRealNumber(this.max) && isRealNumber_1.isRealNumber(this.min);
    }
    /**
     * Returns true if the range equals another by value
     * @param other
     */
    equals(other) {
        if (!other) {
            return false;
        }
        return other.min === this.min && other.max === this.max;
    }
    /**
     * Returns a string representation of a {@link NumberRange} for easy debugging
     */
    toString() {
        return `NumberRange (${this.min}, ${this.max})`;
    }
    /**
     * Returns a difference between max and min
     */
    get diff() {
        return this.max - this.min;
    }
    /**
     * Returns true if the range min === range max
     */
    isZero() {
        return this.min === this.max;
    }
}
exports.NumberRange = NumberRange;
