"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservableArray = void 0;
const EventHandler_1 = require("./EventHandler");
const ObservableArrayChangedArgs_1 = require("./ObservableArrayChangedArgs");
/**
 * An Observable array which raises {@link collectionChanged} events when an item is added, removed or the collection cleared
 */
class ObservableArray {
    /**
     * Creates an instance of the {@link ObservableArray}
     */
    constructor() {
        this.items = [];
        this.collectionChanged = new EventHandler_1.EventHandler();
    }
    /**
     * gets the number of elements in the array
     */
    size() {
        return this.items.length;
    }
    /**
     * Adds items to the array, and raises the {@link collectionChanged} event to subscribers
     * @param items
     */
    add(...items) {
        items.forEach(item => this.items.push(item));
        this.collectionChanged.raiseEvent(new ObservableArrayChangedArgs_1.ObservableArrayChangedArgs(ObservableArrayChangedArgs_1.EObservableArrayChangedAction.Add, items, undefined));
    }
    /**
     * Converts to a javascript array
     */
    asArray() {
        return this.items;
    }
    /**
     * Inserts items at the specified index. Raises the {@link collectionChanged} event to subscribers
     * @param index
     * @param item
     */
    insert(index, item) {
        if (index < 0) {
            index = 0;
        }
        if (index >= this.items.length) {
            this.add(item);
            return;
        }
        this.items.splice(index, 0, item);
        this.collectionChanged.raiseEvent(new ObservableArrayChangedArgs_1.ObservableArrayChangedArgs(ObservableArrayChangedArgs_1.EObservableArrayChangedAction.Add, [item], undefined));
    }
    /**
     * Returns true if the array contains an item
     * @param item
     */
    contains(item) {
        return this.items.includes(item);
    }
    /**
     * Removes an item at the specified index. Raises the {@link collectionChanged} event to subscribers
     * @param index
     */
    removeAt(index) {
        if (index < 0 || index >= this.items.length) {
            return;
        }
        const item = this.items[index];
        this.items.splice(index, 1);
        this.collectionChanged.raiseEvent(new ObservableArrayChangedArgs_1.ObservableArrayChangedArgs(ObservableArrayChangedArgs_1.EObservableArrayChangedAction.Remove, undefined, [item]));
    }
    /**
     * Removes an item by value. Raises the {@link collectionChanged} event to subscribers
     * @param item
     */
    remove(item) {
        for (let index = 0; index < this.size(); index++) {
            if (this.items[index] === item) {
                this.removeAt(index);
                break;
            }
        }
    }
    /**
     * Clears the array. Raises the {@link collectionChanged} event to subscribers
     */
    clear() {
        const oldItems = this.items;
        this.items = [];
        this.collectionChanged.raiseEvent(new ObservableArrayChangedArgs_1.ObservableArrayChangedArgs(ObservableArrayChangedArgs_1.EObservableArrayChangedAction.Reset, undefined, oldItems));
    }
    /**
     * Gets an item at index
     * @param index
     */
    get(index) {
        return this.items[index];
    }
    /**
     * Sets an item at index. Raises the {@link collectionChanged} event to subscribers
     * @param index
     * @param item
     */
    set(index, item) {
        this.items[index] = item;
        this.collectionChanged.raiseEvent(new ObservableArrayChangedArgs_1.ObservableArrayChangedArgs(ObservableArrayChangedArgs_1.EObservableArrayChangedAction.Replace, [item], undefined));
    }
}
exports.ObservableArray = ObservableArray;
