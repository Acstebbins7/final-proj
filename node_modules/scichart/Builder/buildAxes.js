"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildAxes = void 0;
const NumericAxis_1 = require("../Charting/Visuals/Axis/NumericAxis");
const NumberRange_1 = require("../Core/NumberRange");
exports.buildAxes = (webAssemblyContext, scs, axisOptions) => {
    const { isVisible = true, tickSize = 1, colorMajor = "rgba(119, 119, 119, 1)", colorMinor = "rgba(119, 119, 119, 0.5)", thickness = 1, strokeDasharray } = axisOptions;
    if (isVisible) {
        const majorGridLineStyle = {
            strokeThickness: thickness,
            color: colorMajor,
            strokeDasharray
        };
        const minorGridLineStyle = {
            strokeThickness: thickness,
            color: colorMinor,
            strokeDasharray
        };
        const majorTickLineStyle = { tickSize };
        const minorTickLineStyle = { tickSize };
        const xAxis = new NumericAxis_1.NumericAxis(webAssemblyContext);
        const viewportSize = scs.renderSurface.viewportSize;
        xAxis.visibleRange = new NumberRange_1.NumberRange(0, viewportSize.width);
        xAxis.majorGridLineStyle = majorGridLineStyle;
        xAxis.minorGridLineStyle = minorGridLineStyle;
        xAxis.majorTickLineStyle = majorTickLineStyle;
        xAxis.minorTickLineStyle = minorTickLineStyle;
        scs.xAxes.add(xAxis);
        const yAxis = new NumericAxis_1.NumericAxis(webAssemblyContext);
        yAxis.visibleRange = new NumberRange_1.NumberRange(0, viewportSize.height);
        yAxis.majorGridLineStyle = majorGridLineStyle;
        yAxis.minorGridLineStyle = minorGridLineStyle;
        yAxis.majorTickLineStyle = majorTickLineStyle;
        yAxis.minorTickLineStyle = minorTickLineStyle;
        scs.yAxes.add(yAxis);
    }
};
